

package in.handyman.raven.lib;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.UrgencyTriageModel;
import in.handyman.raven.lib.model.triton.TritonInputRequest;
import in.handyman.raven.lib.model.triton.TritonRequest;
import in.handyman.raven.lib.model.utModel.*;
import in.handyman.raven.util.ExceptionUtil;
import okhttp3.*;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.*;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;


/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "UrgencyTriageModel"
)
public class UrgencyTriageModelAction implements IActionExecution {
  private final ActionExecutionAudit action;
  private final Logger log;
  private static UrgencyTriageModel urgencyTriageModel = new UrgencyTriageModel();
  private final Marker aMarker;
  private final String URI;


  public UrgencyTriageModelAction(final ActionExecutionAudit action, final Logger log,
                                  final Object UrgencyTriageModel) {
    UrgencyTriageModelAction.urgencyTriageModel = (UrgencyTriageModel) UrgencyTriageModel;
    this.action = action;
    this.log = log;
    this.URI = action.getContext().get("copro.urgency-triage-model.url");
    this.aMarker = MarkerFactory.getMarker(" UrgencyTriageModel:"+ UrgencyTriageModelAction.urgencyTriageModel.getName());
  }


  @Override
  public void execute() throws Exception {
    try {
      final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(urgencyTriageModel.getResourceConn());
      jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
      log.info(aMarker, "Urgency Triage Action for {} has been started", urgencyTriageModel.getName());
      final String insertQuery = "INSERT INTO urgency_triage.ut_model_result(created_on, created_user_id, last_updated_on, last_updated_user_id, process_id, group_id, tenant_id, confidence_score, origin_id, paper_no, template_id, model_registry_id, status, stage, message, paper_type, bboxes, root_pipeline_id)" +
              "values(now(),?,now(),?,?,?,?,?,?,?,?,?,?,?,?,?,?, ?)";
      final List<URL> urls = Optional.ofNullable(action.getContext().get("copro.urgency-triage-model.url")).map(s -> Arrays.stream(s.split(",")).map(s1 -> {
        try {
          return new URL(s1);
        } catch (MalformedURLException e) {
          log.error("Error in processing the URL ", e);
          throw new RuntimeException(e);
        }
      }).collect(Collectors.toList())).orElse(Collections.emptyList());

      final CoproProcessor<UrgencyTriageInputTable, UrgencyTriageOutputTable> coproProcessor =
              new CoproProcessor<>(new LinkedBlockingQueue<>(),
                      UrgencyTriageOutputTable.class,
                      UrgencyTriageInputTable.class,
                      jdbi, log,
                      new UrgencyTriageInputTable(), urls, action);
      coproProcessor.startProducer(urgencyTriageModel.getQuerySet(), Integer.valueOf(action.getContext().get("read.batch.size")));
      Thread.sleep(1000);
      coproProcessor.startConsumer(insertQuery, Integer.valueOf(action.getContext().get("ut.consumer.API.count")), Integer.valueOf(action.getContext().get("write.batch.size")), new UrgencyTriageConsumerProcess(log, aMarker, action));
      log.info(aMarker, "Urgency Triage has been completed {}  ", urgencyTriageModel.getName());
    } catch (Exception t) {
      action.getContext().put(urgencyTriageModel.getName() + ".isSuccessful", "false");
      log.error(aMarker, "Error at urgency triage execute method {}", ExceptionUtil.toString(t));
      throw new HandymanException("Error at Urgency triage model execute method ", t, action);

    }
  }

  @Override
  public boolean executeIf() throws Exception {
    return urgencyTriageModel.getCondition();
  }

  public static class UrgencyTriageConsumerProcess implements CoproProcessor.ConsumerProcess<UrgencyTriageInputTable, UrgencyTriageOutputTable> {
    private final Logger log;
    private final Marker aMarker;
    private final ObjectMapper mapper = new ObjectMapper();
    private final MediaType MediaTypeJSON = MediaType
            .parse("application/json; charset=utf-8");
    public final ActionExecutionAudit action;
    final OkHttpClient httpclient = new OkHttpClient.Builder()
            .connectTimeout(10, TimeUnit.MINUTES)
            .writeTimeout(10, TimeUnit.MINUTES)
            .readTimeout(10, TimeUnit.MINUTES)
            .build();

    public UrgencyTriageConsumerProcess(final Logger log, final Marker aMarker, ActionExecutionAudit action) {
      this.log = log;
      this.aMarker = aMarker;
      this.action = action;
    }

    @Override
    public List<UrgencyTriageOutputTable> process(URL endpoint, UrgencyTriageInputTable entity) throws Exception {
      List<UrgencyTriageOutputTable> parentObj = new ArrayList<>();

      String inputFilePath = entity.getInputFilePath();
      String outputDir = urgencyTriageModel.getOutputDir();
      Long actionId= action.getActionId();
      Long rootpipelineId= entity.getRootPipelineId();
      final String UT_MODEL_PROCESS="URGENCY_TRIAGE_MODEL";

//payload
      UrgencyTriageModelPayload UrgencyTriageModelpayload = new UrgencyTriageModelPayload();
      UrgencyTriageModelpayload.setRootPipelineId(Long.valueOf(String.valueOf(entity.getRootPipelineId())));
      UrgencyTriageModelpayload.setProcess("QR");
      UrgencyTriageModelpayload.setInputFilePath(entity.getInputFilePath());
      UrgencyTriageModelpayload.setActionId(action.getActionId());



      UregencyTriageModelRequest requests = new UregencyTriageModelRequest();
      TritonRequest requestBody = new TritonRequest();
      requestBody.setName("NER START");
      requestBody.setShape(List.of(1, 1));
      requestBody.setDatatype("BYTES");
      requestBody.setData(Collections.singletonList(UrgencyTriageModelpayload));

      TritonInputRequest tritonInputRequest=new TritonInputRequest();
      tritonInputRequest.setInputs(Collections.singletonList(tritonInputRequest));

      ObjectMapper objectMapper = new ObjectMapper();
      String jsonRequest = objectMapper.writeValueAsString(UrgencyTriageModelpayload);

      Request request = new Request.Builder().url(endpoint)
              .post(RequestBody.create(requestBody.toString(), MediaTypeJSON)).build();

      if(log.isInfoEnabled()) {
        log.info(aMarker, "Request has been build with the parameters \n coproUrl  {} ,inputFilePath : {} ,outputDir {} ", endpoint,inputFilePath,outputDir);
      }

      String createdUserId = entity.getCreatedUserId();
      String lastUpdatedUserId = entity.getLastUpdatedUserId();
      String tenantId = entity.getTenantId();
      Long processId = entity.getProcessId();
      Integer groupId = entity.getGroupId();
      String originId = entity.getOriginId();
      Integer paperNo = entity.getPaperNo();
      String templateId = entity.getTemplateId();
      String modelRegistryId = entity.getModelRegistryId();
      try (Response response = httpclient.newCall(request).execute()) {
        final String responseBody = Objects.requireNonNull(response.body()).string();
        if (response.isSuccessful()) {
          log.info("Response Details: {}",response);

          String responses = Objects.requireNonNull(response.body()).string();
          UrgencyTriageModelResponse modelResponse = objectMapper.readValue(responses, UrgencyTriageModelResponse.class);

          if (modelResponse.getOutputs() != null && !modelResponse.getOutputs().isEmpty()) {
            modelResponse.getOutputs().forEach(o -> {
              o.getData().forEach(PaperItemizerDataItem -> {

                final String paperType;
                try {
                  paperType = Optional.ofNullable(mapper.readTree(responseBody).get("paper_type")).map(JsonNode::asText).orElse(null);
                } catch (JsonProcessingException e) {
                  throw new RuntimeException(e);
                }
                final Long confidenceScore;
                try {
                  confidenceScore = Optional.ofNullable(mapper.readTree(responseBody).get("confidence_score")).map(JsonNode::asLong).orElse(null);
                } catch (JsonProcessingException e) {
                  throw new RuntimeException(e);
                }
                final String bboxes;
                try {
                  bboxes = Optional.ofNullable(mapper.readTree(responseBody).get("bboxes")).map(JsonNode::toString).orElse(null);
                } catch (JsonProcessingException e) {
                  throw new RuntimeException(e);
                }
                parentObj.add(UrgencyTriageOutputTable.builder()
                        .createdUserId(Optional.ofNullable(createdUserId).map(String::valueOf).orElse(null))
                        .lastUpdatedUserId(Optional.ofNullable(lastUpdatedUserId).map(String::valueOf).orElse(null))
                        .tenantId(Optional.ofNullable(tenantId).map(String::valueOf).orElse(null))
                        .processId(Optional.ofNullable(processId).map(String::valueOf).map(Long::parseLong).orElse(null))
                        .groupId(Optional.ofNullable(groupId).map(String::valueOf).map(Integer::parseInt).orElse(null))
                        .originId(Optional.ofNullable(originId).map(String::valueOf).orElse(null))
                        .paperNo(Optional.ofNullable(paperNo).map(String::valueOf).map(Integer::parseInt).orElse(null))
                        .templateId(Optional.ofNullable(templateId).map(String::valueOf).orElse(null))
                        .modelRegistryId(Optional.ofNullable(modelRegistryId).map(String::valueOf).map(Integer::parseInt).orElse(null))
                        .utResult(paperType)
                        .confScore(confidenceScore)
                        .bbox(bboxes)
                        .status("COMPLETED")
                        .stage("URGENCY_TRIAGE_MODEL")
                        .message("Urgency Triage Finished")
                        .rootPipelineId(entity.getRootPipelineId())
                        .build());
                log.info(aMarker, "Execute for urgency triage {}", response);
              });
            });
          }
        } else {
          parentObj.add(UrgencyTriageOutputTable.builder()
                  .createdUserId(Optional.ofNullable(createdUserId).map(String::valueOf).orElse(null))
                  .lastUpdatedUserId(Optional.ofNullable(lastUpdatedUserId).map(String::valueOf).orElse(null))
                  .tenantId(Optional.ofNullable(tenantId).map(String::valueOf).orElse(null))
                  .processId(Optional.ofNullable(processId).map(String::valueOf).map(Long::parseLong).orElse(null))
                  .groupId(Optional.ofNullable(groupId).map(String::valueOf).map(Integer::parseInt).orElse(null))
                  .originId(Optional.ofNullable(originId).map(String::valueOf).orElse(null))
                  .paperNo(Optional.ofNullable(paperNo).map(String::valueOf).map(Integer::parseInt).orElse(null))
                  .templateId(Optional.ofNullable(templateId).map(String::valueOf).orElse(null))
                  .modelRegistryId(Optional.ofNullable(modelRegistryId).map(String::valueOf).map(Integer::parseInt).orElse(null))
                  .status("FAILED")
                  .stage("URGENCY_TRIAGE_MODEL")
                  .message(response.message())
                  .rootPipelineId(entity.getRootPipelineId())
                  .build());
          log.error(aMarker, "The Exception occurred in urgency triage {}",response);
        }
      } catch (Exception e) {
        parentObj.add(UrgencyTriageOutputTable.builder()
                .createdUserId(Optional.ofNullable(createdUserId).map(String::valueOf).orElse(null))
                .lastUpdatedUserId(Optional.ofNullable(lastUpdatedUserId).map(String::valueOf).orElse(null))
                .tenantId(Optional.ofNullable(tenantId).map(String::valueOf).orElse(null))
                .groupId(Optional.ofNullable(groupId).map(String::valueOf).map(Integer::parseInt).orElse(null))
                .processId(Optional.ofNullable(processId).map(String::valueOf).map(Long::parseLong).orElse(null))
                .originId(Optional.ofNullable(originId).map(String::valueOf).orElse(null))
                .paperNo(Optional.ofNullable(paperNo).map(String::valueOf).map(Integer::parseInt).orElse(null))
                .templateId(Optional.ofNullable(templateId).map(String::valueOf).orElse(null))
                .modelRegistryId(Optional.ofNullable(modelRegistryId).map(String::valueOf).map(Integer::parseInt).orElse(null))
                .status("FAILED")
                .stage("URGENCY_TRIAGE_MODEL")
                .message(ExceptionUtil.toString(e))
                .rootPipelineId(entity.getRootPipelineId())
                .build());
        log.error(aMarker, "The Exception occurred in urgency triage", e);
        HandymanException handymanException = new HandymanException(e);
        HandymanException.insertException("Exception occurred in urgency triage model action for group id - "+ groupId+ " and originId - "+ originId, handymanException, this.action);
      }
      return parentObj;
    }
  }




}