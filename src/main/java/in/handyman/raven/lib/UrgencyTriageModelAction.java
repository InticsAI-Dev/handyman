

package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.UrgencyTriageModel;
import in.handyman.raven.util.ExceptionUtil;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.*;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import java.util.stream.Stream;


/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "UrgencyTriageModel"
)
public class UrgencyTriageModelAction implements IActionExecution {
  private static final MediaType MediaTypeJSON = MediaType.parse("application/json; charset=utf-8");
  private final ActionExecutionAudit action;
  private final Logger log;
  private static UrgencyTriageModel UrgencyTriageModel = new UrgencyTriageModel();
  private final Marker aMarker;
  private final String URI;
  private final ObjectMapper mapper = new ObjectMapper();

  public UrgencyTriageModelAction(final ActionExecutionAudit action, final Logger log,
                                  final Object UrgencyTriageModel) {
    this.UrgencyTriageModel = (UrgencyTriageModel) UrgencyTriageModel;
    this.action = action;
    this.log = log;
    this.URI = action.getContext().get("copro.urgency-triage-model.url");
    this.aMarker = MarkerFactory.getMarker(" UrgencyTriageModel:"+this.UrgencyTriageModel.getName());
  }


  @Override
  public void execute() throws Exception {
    try {
      final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(UrgencyTriageModel.getResourceConn());
      jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
      log.info(aMarker, "<-------Urgency Triage Action for {} has been started------->", UrgencyTriageModel.getName());
      final String insertQuery = "INSERT INTO urgency_triage.ut_model_result(created_on, created_user_id, last_updated_on, last_updated_user_id, process_id, group_id, tenant_id, confidence_score, origin_id, paper_no, template_id, model_registry_id, status, stage, message, paper_type, bboxes, root_pipeline_id)" +
              "values(now(),?,now(),?,?,?,?,?,?,?,?,?,?,?,?,?,?, ?)";
      final List<URL> urls = Optional.ofNullable(action.getContext().get("copro.urgency-triage-model.url")).map(s -> Arrays.stream(s.split(",")).map(s1 -> {
        try {
          return new URL(s1);
        } catch (MalformedURLException e) {
          log.error("Error in processing the URL ", e);
          throw new RuntimeException(e);
        }
      }).collect(Collectors.toList())).orElse(Collections.emptyList());

      final CoproProcessor<UrgencyTriageInputTable, UrgencyTriageOutputTable> coproProcessor =
              new CoproProcessor<>(new LinkedBlockingQueue<>(),
                      UrgencyTriageOutputTable.class,
                      UrgencyTriageInputTable.class,
                      jdbi, log,
                      new UrgencyTriageInputTable(), urls, action);
      coproProcessor.startProducer(UrgencyTriageModel.getQuerySet(), Integer.valueOf(action.getContext().get("read.batch.size")));
      Thread.sleep(1000);
      coproProcessor.startConsumer(insertQuery, 1, 1, new UrgencyTriageConsumerProcess(log, aMarker, action));
      log.info(aMarker, "Urgency Triage has been completed {}  ", UrgencyTriageModel.getName());
    } catch (Throwable t) {
      action.getContext().put(UrgencyTriageModel.getName() + ".isSuccessful", "false");
      log.error(aMarker, "Error at urgency triage execute method {}", t);
    }
  }

  @Override
  public boolean executeIf() throws Exception {
    return UrgencyTriageModel.getCondition();
  }

  public static class UrgencyTriageConsumerProcess implements CoproProcessor.ConsumerProcess<UrgencyTriageInputTable, UrgencyTriageOutputTable> {
    private final Logger log;
    private final Marker aMarker;
    private final ObjectMapper mapper = new ObjectMapper();
    private final MediaType MediaTypeJSON = MediaType
            .parse("application/json; charset=utf-8");
    public final ActionExecutionAudit action;
    final OkHttpClient httpclient = new OkHttpClient.Builder()
            .connectTimeout(10, TimeUnit.MINUTES)
            .writeTimeout(10, TimeUnit.MINUTES)
            .readTimeout(10, TimeUnit.MINUTES)
            .build();

    public UrgencyTriageConsumerProcess(final Logger log, final Marker aMarker, ActionExecutionAudit action) {
      this.log = log;
      this.aMarker = aMarker;
      this.action = action;
    }

    @Override
    public List<UrgencyTriageOutputTable> process(URL endpoint, UrgencyTriageInputTable entity) throws Exception {

      List<UrgencyTriageOutputTable> parentObj = new ArrayList<>();
      final ObjectNode objectNode = mapper.createObjectNode();
      objectNode.put("inputFilePath", entity.getInputFilePath());
      objectNode.put("outputDir", UrgencyTriageModel.getOutputDir());

      log.info("request builder object node {}",objectNode);

      Request request = new Request.Builder().url(endpoint)
              .post(RequestBody.create(objectNode.toString(), MediaTypeJSON)).build();
      log.debug(aMarker, "The Request Details: {}", request);


      try (Response response = httpclient.newCall(request).execute()) {
        final String responseBody = Objects.requireNonNull(response.body()).string();
        if (response.isSuccessful()) {
          log.info("Response Details: {}",response);
          final String paperType = Optional.ofNullable(mapper.readTree(responseBody).get("paper_type")).map(JsonNode::asText).orElse(null);
          final Long confidenceScore = Optional.ofNullable(mapper.readTree(responseBody).get("confidence_score")).map(JsonNode::asLong).orElse(null);
          final String bboxes = Optional.ofNullable(mapper.readTree(responseBody).get("bboxes")).map(JsonNode::toString).orElse(null);
          parentObj.add(UrgencyTriageOutputTable.builder()
                  .createdUserId(Optional.ofNullable(entity.getCreatedUserId()).map(String::valueOf).orElse(null))
                  .lastUpdatedUserId(Optional.ofNullable(entity.getLastUpdatedUserId()).map(String::valueOf).orElse(null))
                  .tenantId(Optional.ofNullable(entity.getTenantId()).map(String::valueOf).orElse(null))
                  .processId(Optional.ofNullable(entity.getProcessId()).map(String::valueOf).map(Long::parseLong).orElse(null))
                  .groupId(Optional.ofNullable(entity.getGroupId()).map(String::valueOf).map(Integer::parseInt).orElse(null))
                  .originId(Optional.ofNullable(entity.getOriginId()).map(String::valueOf).orElse(null))
                  .paperNo(Optional.ofNullable(entity.getPaperNo()).map(String::valueOf).map(Integer::parseInt).orElse(null))
                  .templateId(Optional.ofNullable(entity.getTemplateId()).map(String::valueOf).orElse(null))
                  .modelRegistryId(Optional.ofNullable(entity.getModelRegistryId()).map(String::valueOf).map(Integer::parseInt).orElse(null))
                  .utResult(paperType)
                  .confScore(confidenceScore)
                  .bbox(bboxes)
                  .status("COMPLETED")
                  .stage("URGENCY_TRIAGE_MODEL")
                  .message("Urgency Triage Finished")
                  .rootPipelineId(entity.rootPipelineId)
                  .build());
          log.info(aMarker, "Execute for urgency triage {}",response);
        } else {
          parentObj.add(UrgencyTriageOutputTable.builder()
                  .createdUserId(Optional.ofNullable(entity.getCreatedUserId()).map(String::valueOf).orElse(null))
                  .lastUpdatedUserId(Optional.ofNullable(entity.getLastUpdatedUserId()).map(String::valueOf).orElse(null))
                  .tenantId(Optional.ofNullable(entity.getTenantId()).map(String::valueOf).orElse(null))
                  .processId(Optional.ofNullable(entity.getProcessId()).map(String::valueOf).map(Long::parseLong).orElse(null))
                  .groupId(Optional.ofNullable(entity.getGroupId()).map(String::valueOf).map(Integer::parseInt).orElse(null))
                  .originId(Optional.ofNullable(entity.getOriginId()).map(String::valueOf).orElse(null))
                  .paperNo(Optional.ofNullable(entity.getPaperNo()).map(String::valueOf).map(Integer::parseInt).orElse(null))
                  .templateId(Optional.ofNullable(entity.getTemplateId()).map(String::valueOf).orElse(null))
                  .modelRegistryId(Optional.ofNullable(entity.getModelRegistryId()).map(String::valueOf).map(Integer::parseInt).orElse(null))
                  .status("FAILED")
                  .stage("URGENCY_TRIAGE_MODEL")
                  .message(response.message())
                  .rootPipelineId(entity.rootPipelineId)
                  .build());
          log.error(aMarker, "The Exception occurred in urgency triage {}",response);
        }
      } catch (Exception e) {
        parentObj.add(UrgencyTriageOutputTable.builder()
                .createdUserId(Optional.ofNullable(entity.getCreatedUserId()).map(String::valueOf).orElse(null))
                .lastUpdatedUserId(Optional.ofNullable(entity.getLastUpdatedUserId()).map(String::valueOf).orElse(null))
                .tenantId(Optional.ofNullable(entity.getTenantId()).map(String::valueOf).orElse(null))
                .groupId(Optional.ofNullable(entity.getGroupId()).map(String::valueOf).map(Integer::parseInt).orElse(null))
                .processId(Optional.ofNullable(entity.getProcessId()).map(String::valueOf).map(Long::parseLong).orElse(null))
                .originId(Optional.ofNullable(entity.getOriginId()).map(String::valueOf).orElse(null))
                .paperNo(Optional.ofNullable(entity.getPaperNo()).map(String::valueOf).map(Integer::parseInt).orElse(null))
                .templateId(Optional.ofNullable(entity.getTemplateId()).map(String::valueOf).orElse(null))
                .modelRegistryId(Optional.ofNullable(entity.getModelRegistryId()).map(String::valueOf).map(Integer::parseInt).orElse(null))
                .status("FAILED")
                .stage("URGENCY_TRIAGE_MODEL")
                .message(ExceptionUtil.toString(e))
                .rootPipelineId(entity.rootPipelineId)
                .build());
        log.error(aMarker, "The Exception occurred in urgency triage", e);
      }
      return parentObj;
    }
  }

  @AllArgsConstructor
  @NoArgsConstructor
  @Data
  @Builder
  public static class UrgencyTriageInputTable implements CoproProcessor.Entity {
    private String createdUserId;
    private String lastUpdatedUserId;
    private String tenantId;
    private Long processId;
    private Integer groupId;
    private String originId;
    private Integer paperNo;
    private String templateId;
    private String modelRegistryId;
    private String inputFilePath;
    private Long rootPipelineId;

    @Override
    public List<Object> getRowData() {
      return null;
    }
  }

  @AllArgsConstructor
  @NoArgsConstructor
  @Data
  @Builder
  public static class UrgencyTriageOutputTable implements CoproProcessor.Entity {
    private String createdUserId;
    private String lastUpdatedUserId;
    private Long processId;
    private Integer groupId;
    private String tenantId;
    private Long confScore;
    private String originId;
    private Integer paperNo;
    private String templateId;
    private Integer modelRegistryId;
    private String status;
    private String stage;
    private String message;
    private String utResult;
    private String bbox;
    private Long rootPipelineId;

    @Override
    public List<Object> getRowData() {
      return Stream.of(this.createdUserId, this.lastUpdatedUserId, this.processId, this.groupId, this.tenantId, this.confScore,
              this.originId, this.paperNo, this.templateId, this.modelRegistryId, this.status, this.stage, this.message, this.utResult, this.bbox, this.rootPipelineId).collect(Collectors.toList());
    }
  }
}