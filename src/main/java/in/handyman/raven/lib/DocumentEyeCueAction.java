package in.handyman.raven.lib;

import in.handyman.raven.core.utils.FileProcessingUtils;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.DocumentEyeCue;

import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.stream.Collectors;

import in.handyman.raven.lib.model.documentEyeCue.DocumentEyeCueConsumerProcess;
import in.handyman.raven.lib.model.documentEyeCue.DocumentEyeCueInputTable;
import in.handyman.raven.lib.model.documentEyeCue.DocumentEyeCueOutputTable;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "DocumentEyeCue"
)
public class DocumentEyeCueAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final DocumentEyeCue documentEyeCue;

    private final Marker aMarker;

    private final String processBase64;

    public static final String PROCESS_FILE_FORMAT = "pipeline.copro.api.process.file.format";

    public static final String DOCUMENT_EYE_CUE_READ_BATCH_SIZE = "document.eye.cue.read.batch.size";

    public static final String DOCUMENT_EYE_CUE_WRITE_BATCH_SIZE = "document.eye.cue.write.batch.size";

    public static final String DOCUMENT_EYE_CUE_CONSUMER_API_COUNT = "document.eye.cue.consumer.API.count";

    public static final String INSERT_COLUMNS = "origin_id, group_id, tenant_id, template_id, processed_file_path, status, " +
            "stage, message, created_on, process_id, root_pipeline_id, batch_id, last_updated_on, request, response, endpoint, encoded_file_path, doc_eyecue_duration";

    public static final String DOCUMENT_EYE_CUE_API_URL = "document.eye.cue.api.url";

    public DocumentEyeCueAction(final ActionExecutionAudit action, final Logger log,
                                final Object documentEyeCue) {
        this.documentEyeCue = (DocumentEyeCue) documentEyeCue;
        this.action = action;
        this.log = log;
        this.processBase64 = action.getContext().get(PROCESS_FILE_FORMAT);
        this.aMarker = MarkerFactory.getMarker(" DocumentEyeCue:" + this.documentEyeCue.getName());
    }

    @Override
    public void execute() throws Exception {
        try {
            log.info(aMarker, "Document EyeCue Action has been started {}", documentEyeCue);

            final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(documentEyeCue.getResourceConn());
            jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
            FileProcessingUtils fileProcessingUtils = new FileProcessingUtils(log, aMarker, action);

            //4. call the method start producer from preprocessor
            Integer readBatchSize = Integer.valueOf(action.getContext().get(DOCUMENT_EYE_CUE_READ_BATCH_SIZE));
            Integer consumerApiCount = Integer.valueOf(action.getContext().get(DOCUMENT_EYE_CUE_CONSUMER_API_COUNT));
            Integer writeBatchSize = Integer.valueOf(action.getContext().get(DOCUMENT_EYE_CUE_WRITE_BATCH_SIZE));


            final String outputDir = Optional.ofNullable(documentEyeCue.getOutputDir()).map(String::valueOf).orElse(null);
            log.info(aMarker, "Document EyeCue Action output directory {}", outputDir);
            //5. build insert prepare statement with output table columns
            final String insertQuery = "INSERT INTO " + documentEyeCue.getResultTable() +
                    "(" + INSERT_COLUMNS + ") " +
                    " VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ? , ?, ?, ?, ?, ?, ?, ?, ?)";
            log.info(aMarker, "Document EyeCue Insert query {}", insertQuery);

            //3. initiate Copro processor and Copro urls
            final List<URL> urls = Optional.ofNullable(action.getContext().get(DOCUMENT_EYE_CUE_API_URL)).map(s -> Arrays.stream(s.split(",")).map(s1 -> {
                try {
                    return new URL(s1);
                } catch (MalformedURLException e) {
                    log.error("Error in processing the URL ", e);
                    throw new HandymanException("Error in processing the URL", e, action);
                }
            }).collect(Collectors.toList())).orElse(Collections.emptyList());
            log.info(aMarker, "Document EyeCue copro urls {}", urls);

            final CoproProcessor<DocumentEyeCueInputTable, DocumentEyeCueOutputTable> coproProcessor =
                    new CoproProcessor<>(new LinkedBlockingQueue<>(),
                            DocumentEyeCueOutputTable.class,
                            DocumentEyeCueInputTable.class,
                            documentEyeCue.getResourceConn(), log,
                            new DocumentEyeCueInputTable(), urls, action);

            log.info(aMarker, "Document EyeCue copro coproProcessor initialization  {}", coproProcessor);


            coproProcessor.startProducer(documentEyeCue.getQuerySet(), readBatchSize);
            log.info(aMarker, "Document EyeCue copro coproProcessor startProducer called read batch size {}", readBatchSize);
            Thread.sleep(1000);
            coproProcessor.startConsumer(insertQuery, consumerApiCount, writeBatchSize, new DocumentEyeCueConsumerProcess(log, aMarker, fileProcessingUtils, action, processBase64, documentEyeCue));
            log.info(aMarker, "Document EyeCue copro coproProcessor startConsumer called consumer count {} write batch count {} ", consumerApiCount, writeBatchSize);

        } catch (Exception ex) {
            log.error(aMarker, "error in execute method for Document EyeCue  ", ex);
            throw new HandymanException("error in execute method for Document EyeCue", ex, action);
        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return documentEyeCue.getCondition();
    }
}
