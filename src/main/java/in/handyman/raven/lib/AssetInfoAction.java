package in.handyman.raven.lib;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.AssetInfo;
import in.handyman.raven.lib.model.AssetInfoInputTable;
import in.handyman.raven.lib.model.AssetInfoOutputTable;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.stream.Collectors;


/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "AssetInfo"
)
public class AssetInfoAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    public static final String READ_BATCH_SIZE = "read.batch.size";

    public static final String DUMMY_URL = "http://localhost:10181/copro/preprocess/autorotation";

    public static final String WRITE_BATCH_SIZE = "write.batch.size";

    public static final String ASSET_INFO_CONSUMER_API_COUNT = "asset.info.consumer.API.count";

    public static final String INSERT_INTO = "INSERT INTO ";
    public static final String INSERT_INTO_VALUES_UPDATED = "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    public static final String INSERT_COLUMNS_UPDATED = "file_id, process_id, tenant_id, root_pipeline_id, file_checksum, file_extension, file_name, decoded_file_name, file_path, file_size, encode, width, height, dpi, batch_id";

    private final AssetInfo assetInfo;

    private final Marker aMarker;

    public AssetInfoAction(final ActionExecutionAudit action, final Logger log,
                           final Object assetInfo) {
        this.assetInfo = (AssetInfo) assetInfo;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" AssetInfo:" + this.assetInfo.getName());
    }

    @Override
    public void execute() throws Exception {
        try {
            Long tenantId = Long.valueOf(action.getContext().get("tenant_id"));
            log.info(aMarker, "Asset Info Action for {} has been started", assetInfo.getName());

            final List<URL> urls = Optional.of(DUMMY_URL).map(s -> Arrays.stream(s.split(",")).map(s1 -> {
                try {
                    return new URL(s1);
                } catch (MalformedURLException e) {
                    log.error("Error in processing the URL ", e);
                    throw new HandymanException("Error in processing the URL", e, action);
                }
            }).collect(Collectors.toList())).orElse(Collections.emptyList());

            Integer readBatchSize = Integer.valueOf(action.getContext().get(READ_BATCH_SIZE));

            Integer consumerApiCount = Integer.valueOf(action.getContext().get(ASSET_INFO_CONSUMER_API_COUNT));

            final CoproProcessor<AssetInfoInputTable, AssetInfoOutputTable> coproProcessor = new CoproProcessor<>(new LinkedBlockingQueue<>(), AssetInfoOutputTable.class, AssetInfoInputTable.class, assetInfo.getResourceConn(), log, new AssetInfoInputTable(), urls, action);

            log.info(aMarker, "Consumer API count for Asset Info is {}", consumerApiCount);
            String insertQuery = INSERT_INTO + assetInfo.getAssetTable() + " ( " + INSERT_COLUMNS_UPDATED + " ) " + INSERT_INTO_VALUES_UPDATED;
            coproProcessor.startProducer(assetInfo.getValues(), readBatchSize);
            Thread.sleep(1000);

            Integer writeBatchSize = Integer.valueOf(action.getContext().get(WRITE_BATCH_SIZE));
            AssetInfoConsumerProcess assetInfoConsumerProcess = new AssetInfoConsumerProcess(log, aMarker, action, assetInfo, tenantId);

            coproProcessor.startConsumer(insertQuery, consumerApiCount, writeBatchSize, assetInfoConsumerProcess);
            log.info(aMarker, "Asset Info Action has been completed {}  ", assetInfo.getName());

        } catch (Exception e) {
            action.getContext().put(assetInfo.getName().concat(".error"), "true");
            log.error(aMarker, "The Exception occurred ", e);
            throw new HandymanException("Exception occurred in asset info execute", e, action);
        }
    }


    @Override
    public boolean executeIf() throws Exception {
        return assetInfo.getCondition();
    }

    @AllArgsConstructor
    @NoArgsConstructor
    @Data
    @Builder
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static class SanitarySummary {
        private int rowCount;
        private int correctRowCount;
        private int errorRowCount;
        private String comments;
        private Long tenantId;
        private String batchId;

    }
}