package in.handyman.raven.lib;

import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.FtpUpload;
import in.handyman.raven.lib.model.ftpUpload.FtpUploadConsumerProcess;
import in.handyman.raven.lib.model.ftpUpload.FtpUploadInputTable;
import in.handyman.raven.lib.model.ftpUpload.FtpUploadOutputTable;
import in.handyman.raven.util.ExceptionUtil;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.stream.Collectors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "FtpUpload"
)
public class FtpUploadAction implements IActionExecution {
  private final ActionExecutionAudit action;

  private final Logger log;

  private final FtpUpload ftpUpload;

  private final Marker aMarker;

  public FtpUploadAction(final ActionExecutionAudit action, final Logger log,
                         final Object ftpUpload) {
    this.ftpUpload = (FtpUpload) ftpUpload;
    this.action = action;
    this.log = log;
    this.aMarker = MarkerFactory.getMarker(" FtpUpload:"+this.ftpUpload.getName());
  }

  @Override
  public void execute() throws Exception {
    try {
      log.info(aMarker, "ftp download Action for {} with group by eoc-id has started", ftpUpload.getName());
      final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(ftpUpload.getResourceConn());
      jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));

      //5. build insert prepare statement with output table columns
      final String insertQuery = "INSERT INTO " + ftpUpload.getResultTable() +
              "(tenant_id, root_pipeline_id, created_date, created_by, last_modified_by, last_modified_date, status, message, type, last_processed_on, ftp_folder_path, destination_path, file_paths, version, info)" +
              "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?::jsonb, ?, ?)";


      //3. initiate copro processor and copro urls
      final List<URL> urls = Optional.ofNullable(action.getContext().get("ftp.upload.url")).map(s -> Arrays.stream(s.split(",")).map(s1 -> {
        try {
          return new URL(s1);
        } catch (MalformedURLException e) {
          log.error("Error in processing the URL {}", s1, e);
          throw new HandymanException("Error in processing the URL", e, action);
        }
      }).collect(Collectors.toList())).orElse(Collections.emptyList());

      log.info("Urls for the ftp Upload for sor grouping {}", urls);


      final CoproProcessor<FtpUploadInputTable, FtpUploadOutputTable> coproProcessor =
              new CoproProcessor<>(new LinkedBlockingQueue<>(),
                      FtpUploadOutputTable.class,
                      FtpUploadInputTable.class,
                      jdbi, log,
                      new FtpUploadInputTable(), urls, action);
      //4. call the method start producer from coproprocessor
      coproProcessor.startProducer(ftpUpload.getQuerySet(), Integer.valueOf(action.getContext().get("read.batch.size")));
      log.info("start producer method from copro processor ");
      Thread.sleep(1000);
      //8. call the method start consumer from coproprocessor
      coproProcessor.startConsumer(insertQuery, Integer.valueOf(action.getContext().get("ftp.download.API.count")), Integer.valueOf(action.getContext().get("write.batch.size")), new FtpUploadConsumerProcess(log, aMarker, action,  this.ftpUpload));
      log.info("start consumer method from copro processor ");

    } catch (Exception e) {
      log.error("Error in the ftp download action {}", ExceptionUtil.toString(e));
      throw new HandymanException("ftp download action failed ", e, action);

    }

  }



  @Override
  public boolean executeIf() throws Exception {
    return ftpUpload.getCondition();
  }
}
