package in.handyman.raven.lib;

import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.MultipartDownload;
import in.handyman.raven.util.CommonQueryUtil;
import in.handyman.raven.util.ExceptionUtil;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.io.File;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;


/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "MultipartDownload"
)
public class MultipartDownloadAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final MultipartDownload multipartDownload;

    private final Marker aMarker;

    final OkHttpClient httpclient = new OkHttpClient.Builder()
            .connectTimeout(10, TimeUnit.MINUTES)
            .writeTimeout(10, TimeUnit.MINUTES)
            .readTimeout(10, TimeUnit.MINUTES)
            .build();

    public MultipartDownloadAction(final ActionExecutionAudit action, final Logger log,
                                   final Object multipartDownload) {
        this.multipartDownload = (MultipartDownload) multipartDownload;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" MultipartDownload:" + this.multipartDownload.getName());
    }

    @Override
    public void execute() throws Exception {
        try {
            final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(multipartDownload.getResourceConn());
            jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
            log.info(aMarker, "Download OctetStream File Action for {} has been started", multipartDownload.getName());
            String endPoint = multipartDownload.getEndPoint();
            final List<URL> urls = Optional.ofNullable(endPoint).map(s -> Arrays.stream(s.split(",")).map(s1 -> {
                try {
                    return new URL(s1);
                } catch (MalformedURLException e) {
                    log.error("Error in processing the URL ", e);
                    throw new RuntimeException(e);
                }
            }).collect(Collectors.toList())).orElse(Collections.emptyList());

            List<DownloadOctetStreamFileInputTable> downloadOctetStreamFileInputTables = new ArrayList<>();
            final List<String> formattedQuery = CommonQueryUtil.getFormattedQuery(multipartDownload.getQuerySet());
            formattedQuery.forEach(sql -> jdbi.useTransaction(handle -> handle.createQuery(sql).mapToBean(DownloadOctetStreamFileInputTable.class).forEach(downloadOctetStreamFileInputTables::add)));

            if (!downloadOctetStreamFileInputTables.isEmpty()) {

                if (!urls.isEmpty()) {
                    int endpointSize = urls.size();

                    log.info("Endpoints are not empty for multipart download with nodes count {}", endpointSize);
                    int batchSize = Integer.parseInt(action.getContext().get("batch.processing.split.count"));
                    final ExecutorService executorService = Executors.newFixedThreadPool(batchSize);
                    int inputSize = downloadOctetStreamFileInputTables.size();
                    final CountDownLatch countDownLatch = new CountDownLatch(inputSize * endpointSize);
                    log.info("Total consumers {}", countDownLatch.getCount());

                    urls.forEach(url -> executorService.submit(() -> downloadOctetStreamFileInputTables.forEach(multipartUploadInputTable -> {
                        try {
                            downloadFile(url, multipartUploadInputTable);
                        } catch (Exception e) {
                            String filepath = multipartUploadInputTable.getFilepath();
                            log.error(aMarker, "The Exception occurred in multipart file download for file {} with exception {}", filepath, e.getMessage());
                            HandymanException handymanException = new HandymanException(e);
                            HandymanException.insertException("Exception occurred in multipart download for file - " + filepath, handymanException, this.action);
                        } finally {
                            log.info("Consumer {} completed the process", countDownLatch.getCount());
                            countDownLatch.countDown();
                        }
                    })));
                    try {
                        countDownLatch.await();
                    } catch (InterruptedException e) {
                        log.error("Consumer Interrupted with exception", e);
                    }
                } else {
                    log.error(aMarker, "Endpoints for multipart download is empty");
                }
            }
            else {
                log.info("Multipart download input request list is empty");
            }
        } catch (Exception t) {
            log.error(aMarker, "Error at Download OctetStream File execute method {}", ExceptionUtil.toString(t));
            throw new HandymanException("Error at Download OctetStream File execute method ", t, action);
        }
    }


    public void downloadFile(URL endpoint, DownloadOctetStreamFileInputTable entity) throws Exception {

        String outputFilePath = entity.getFilepath();

        MediaType MEDIA_TYPE = MediaType.parse("application/*");

        URL url = new URL(endpoint.toString() + "?filepath=" + outputFilePath);
        Request request = new Request.Builder().url(url)
                .addHeader("accept", "*/*")
                .post(RequestBody.create("{}", MEDIA_TYPE))
                .build();

        if (log.isInfoEnabled()) {
            log.info("Sending request to URL: {}", url);
            log.info("Request headers: {}", request.headers());
            log.info(aMarker, "Request has been build with the parameters {} ,outputFilePath : {}", endpoint, outputFilePath);
        }

        try (Response response = httpclient.newCall(request).execute()) {
            if (response.isSuccessful()) {

                log.info("Response is successful and Response Details: {}", response);
                log.info("Response is successful and header Details: {}", response.headers());

                try (ResponseBody responseBody = response.body()) {
                    if (responseBody != null) {
                        log.info("Response body is not null and content length is {}, and content type is {}", responseBody.contentLength(), responseBody.contentType());
                        try (InputStream inputStream = responseBody.byteStream()) {
                            Path path = Paths.get(outputFilePath);
                            File file = new File(outputFilePath);
                            if (!file.exists()) {
                                Files.createDirectories(path.getParent());
                                Files.copy(inputStream, path, StandardCopyOption.REPLACE_EXISTING);
                            }
                        }
                    } else {
                        log.error("Error writing file response body is null");
                        HandymanException handymanException = new HandymanException("Error writing file response body is null");
                        HandymanException.insertException("Exception occurred in Writing multipart File for file - " + outputFilePath, handymanException, this.action);
                    }
                } catch (Exception e) {
                    log.error("Error writing file: {}", e.getMessage());
                    HandymanException handymanException = new HandymanException(e);
                    HandymanException.insertException("Exception occurred in Writing multipart File for file - " + outputFilePath, handymanException, this.action);
                }
            }
        } catch (Exception e) {
            log.error(aMarker, "The Exception occurred in Download multipart File for file {} with exception {}", outputFilePath, e.getMessage());
            HandymanException handymanException = new HandymanException(e);
            HandymanException.insertException("Exception occurred in Download multipart File for file - " + outputFilePath, handymanException, this.action);
        }
    }


    @AllArgsConstructor
    @NoArgsConstructor
    @Data
    public static class DownloadOctetStreamFileInputTable {

        private String filepath;

    }

    @Override
    public boolean executeIf() throws Exception {
        return multipartDownload.getCondition();
    }
}
