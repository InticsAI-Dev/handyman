package in.handyman.raven.lib;

import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.P2pNameValidation;
import in.handyman.raven.lib.model.p2pNameValidation.P2PNameValidationInputTable;
import in.handyman.raven.lib.model.p2pNameValidation.P2PNameValidationOutputTable;
import in.handyman.raven.util.CommonQueryUtil;
import org.checkerframework.checker.index.qual.PolyUpperBound;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.sql.Types;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(actionName = "P2pNameValidation")
public class P2pNameValidationAction implements IActionExecution {
    private final ActionExecutionAudit actionExecutionAudit;
    private final Logger log;
    private final P2pNameValidation p2pNameValidation;
    public static final String INSERT_INTO = "INSERT INTO";
    public static final String COLUMN_LIST = "";
    public static final String SCHEMA_NAME = "voting";
    public static final String VAL_STRING_LIST = "";
    public static final String P2P_VALIDATION_TABLE = "cumulative_result_p2p_result_table_";
    private final Marker aMarker;

    public P2pNameValidationAction(final ActionExecutionAudit actionExecutionAudit, final Logger log, final Object p2pNameValidation, String insertInto) {
        this.p2pNameValidation = (P2pNameValidation) p2pNameValidation;
        this.actionExecutionAudit = actionExecutionAudit;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" P2pNameValidation:" + this.p2pNameValidation.getName());
        String insertQuery = INSERT_INTO + " " + SCHEMA_NAME + "." + P2P_VALIDATION_TABLE + "(" + COLUMN_LIST + ") " + " " + VAL_STRING_LIST;
    }

    @Override
    public void execute() throws Exception {

        final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(p2pNameValidation.getResourceConn());
        jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
        log.info(aMarker, "p2p name validation action {} has been started", p2pNameValidation.getName());

        final List<P2PNameValidationInputTable> p2PNameValidationInputs = new ArrayList<>();

        jdbi.useTransaction(handle -> {
            final List<String> formattedQuery = CommonQueryUtil.getFormattedQuery(p2pNameValidation.getQuerySet());
            formattedQuery.forEach(sqlToExecute -> p2PNameValidationInputs.addAll(handle.createQuery(sqlToExecute).mapToBean(P2PNameValidationInputTable.class).stream().collect(Collectors.toList())));
        });

        p2PNameValidationInputs.forEach(p2PNameValidationInput -> {
            try {
                log.info(aMarker, "executing for the file {}", p2PNameValidationInput);
                final String p2pBboxFinal = p2PNameValidationInput.getP2pFirstNameBBox();

                final String p2pFirstName = cleanAndExtractAlphabets(p2PNameValidationInput.getP2pFirstName());
                final String p2pLastName = cleanAndExtractAlphabets(p2PNameValidationInput.getP2pLastName());

                final Double p2pFistNameCfScore = p2PNameValidationInput.getP2pFirstNameConfidenceScore();
                final Double p2pLastNameCfScore = p2PNameValidationInput.getP2pLastNameConfidenceScore();
                final Double finalConfidenceScore = (p2pFistNameCfScore + p2pLastNameCfScore) / 2;

                final Double p2pFirstNameMaxScore = p2PNameValidationInput.getP2pFirstNameMaximumScore();
                final Double p2pLastNameMaxScore = p2PNameValidationInput.getP2pLastNameMaximumScore();
                final Double finalMaxScore = (p2pFirstNameMaxScore + p2pLastNameMaxScore) / 2;

                final Double p2pFirstNameFilterScore = p2PNameValidationInput.getP2pFirstNameFilterScore();
                final Double p2pLastNameFilterScore = p2PNameValidationInput.getP2pLastNameFilterScore();
                final Double finaFilterScore = (p2pFirstNameFilterScore + p2pLastNameFilterScore) / 2;

                final List<P2PNameValidationOutputTable> p2PNameValidationOutputTables = new ArrayList<>();

                String finalConcatenatedName = getConcatenatedName(p2pFirstName, p2pLastName);
                p2PNameValidationOutputTables.add(P2PNameValidationOutputTable.builder().p2pConcatenatedName(finalConcatenatedName).groupId(p2PNameValidationInput.getGroupId()).rootPipelineId(p2PNameValidationInput.getRootPipelineId()).paperNo(p2PNameValidationInput.getPaperNo()).originId(Optional.ofNullable(p2PNameValidationInput.getOriginId()).map(String::valueOf).orElse(null)).p2pBbox(p2pBboxFinal).p2pConfidenceScore(finalConfidenceScore).p2pFilterScore(finaFilterScore).p2pMaximumScore(finalMaxScore).build());
            } catch (Exception exception) {
                log.error(aMarker, "error in execute method for name concatenate action ", exception);
                throw new HandymanException(exception);
            }
        });
    }

    @NotNull
    private static String getConcatenatedName(String p2pFirstName, String p2pLastName) {
        String finalConcatenatedName;

        if (p2pFirstName.equalsIgnoreCase(p2pLastName)) {
            finalConcatenatedName = p2pFirstName;
        } else if (p2pFirstName.contains(p2pLastName)) {
            finalConcatenatedName = p2pFirstName;
        } else if (p2pLastName.contains(p2pFirstName)) {
            finalConcatenatedName = p2pLastName;
        } else {
            finalConcatenatedName = p2pLastName + " " + p2pLastName;
        }
        return finalConcatenatedName;
    }

    private String cleanAndExtractAlphabets(String value) {
        return value.replaceAll("[^a-zA-Z]+", "");
    }

    @Override
    public boolean executeIf() throws Exception {
        return p2pNameValidation.getCondition();
    }
}
