package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.ObjectMapper;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.agadia.outbound.delivery.adapters.OutboundAdapter;
import in.handyman.raven.lib.agadia.outbound.delivery.adapters.OutboundAdapterElv;
import in.handyman.raven.lib.agadia.outbound.delivery.adapters.OutboundAdapterProduct;
import in.handyman.raven.lib.agadia.outbound.delivery.entity.TableInputQuerySet;
import in.handyman.raven.lib.model.OutboundDeliveryNotify;
import in.handyman.raven.util.CommonQueryUtil;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.result.ResultIterable;
import org.jdbi.v3.core.statement.Query;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "OutboundDeliveryNotify"
)
public class OutboundDeliveryNotifyAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;
    private final OutboundDeliveryNotify outboundDeliveryNotify;
    private final Marker aMarker;
    private final String deliveryNotifyUrl;
    private final String appId;
    private final String appKeyId;
    private final OutboundAdapter outboundAdapter;
    private final OutboundAdapterProduct outboundAdapterProduct;
    private final OutboundAdapterElv outboundAdapterElv;
    private final ObjectMapper objectMapper = new ObjectMapper();

    public OutboundDeliveryNotifyAction(final ActionExecutionAudit action, final Logger log,
                                        final Object outboundDeliveryNotify) {
        this.outboundDeliveryNotify = (OutboundDeliveryNotify) outboundDeliveryNotify;
        this.action = action;
        this.log = log;
        this.appId = action.getContext().get("agadia.appId");
        this.appKeyId = action.getContext().get("agadia.appKeyId");
        this.deliveryNotifyUrl = action.getContext().get("doc.delivery.notify.url");
        this.outboundAdapter = new OutboundAdapter(log, objectMapper, action);
        this.outboundAdapterProduct = new OutboundAdapterProduct(log, objectMapper, action);
        this.outboundAdapterElv = new OutboundAdapterElv(log, objectMapper, action);
        this.aMarker = MarkerFactory.getMarker(" OutboundDeliveryNotify:" + this.outboundDeliveryNotify.getName());
    }

    @Override
    public void execute() throws Exception {
        try {

            final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(outboundDeliveryNotify.getResourceConn());
            final List<TableInputQuerySet> tableInfos = new ArrayList<>();

            jdbi.useTransaction(handle -> {
                final List<String> formattedQuery = CommonQueryUtil.getFormattedQuery(outboundDeliveryNotify.getQuerySet());
                AtomicInteger i = new AtomicInteger(0);
                formattedQuery.forEach(sqlToExecute -> {
                    log.info(aMarker, "executing  query {} from index {}", sqlToExecute, i.getAndIncrement());
                    Query query = handle.createQuery(sqlToExecute);
                    ResultIterable<TableInputQuerySet> resultIterable = query.mapToBean(TableInputQuerySet.class);
                    List<TableInputQuerySet> detailList = resultIterable.stream().collect(Collectors.toList());
                    tableInfos.addAll(detailList);
                    log.info(aMarker, "executed query from index {}", i.get());
                });
            });


            tableInfos.forEach(tableInputQuerySet -> {

                String response = doOutboundApiCall(tableInputQuerySet.getOutboundCondition(), tableInputQuerySet);
                log.info("Response {} for Outbound Delivery Notification Action", response);


            });

        } catch (Exception ex) {
            log.error(aMarker, "Error in execute method for Outbound Delivery Notification Action", ex);
            throw new HandymanException("Error in execute method for Outbound Delivery Notification Action", ex, action);

        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return outboundDeliveryNotify.getCondition();
    }

    public String doOutboundApiCall(final String outboundCondition, TableInputQuerySet tableInputQuerySet) {
        String response = null;
        switch (outboundCondition) {
            case "Agadia":
                response = this.outboundAdapter.requestApiCaller(tableInputQuerySet);
                break;
            case "ELV":
                response = this.outboundAdapterElv.requestApiCaller(tableInputQuerySet);
                break;
            default:
                response = this.outboundAdapterProduct.requestApiCaller(tableInputQuerySet);
        }
        return response;

    }


}
