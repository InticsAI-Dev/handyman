package in.handyman.raven.lib;

import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.alchemy.error.ErrorResponseConsumerProcess;
import in.handyman.raven.lib.alchemy.error.ErrorResponseInputTable;
import in.handyman.raven.lib.alchemy.error.ErrorResponseOutputTable;
import in.handyman.raven.lib.model.ErrorResponse;
import in.handyman.raven.util.ExceptionUtil;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.stream.Collectors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "ErrorResponse"
)
public class ErrorResponseAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final ErrorResponse errorResponse;

    private final Marker aMarker;

    public ErrorResponseAction(final ActionExecutionAudit action, final Logger log,
                               final Object errorResponse) {
        this.errorResponse = (ErrorResponse) errorResponse;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" ErrorResponse:" + this.errorResponse.getName());
    }

    @Override
    public void execute() throws Exception {

        try {
            final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(errorResponse.getResourceConn());
            jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
            log.info(aMarker, "Error Response Action for {} has been started", errorResponse.getName());
            final String insertQuery = "INSERT INTO " + errorResponse.getResultTable() +
                    "(batch_id, process_id, group_id, product_response, file_name, created_on, last_updated_on, tenant_id, root_pipeline_id, origin_id, status, stage, message, feature, triggered_url, request, response, endpoint) " +
                    " VALUES(?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            final List<URL> urls = Optional.ofNullable(action.getContext().get("alchemy.error.response.url"))
                    .map(s -> Arrays.stream(s.split(",")).map(s1 -> {
                        try {
                            return new URL(s1);
                        } catch (MalformedURLException e) {
                            log.error("Error in processing the URL ", e);
                            throw new HandymanException("Malformed URL: " + s1, e, action);
                        }
                    }).collect(Collectors.toList()))
                    .orElse(Collections.emptyList());

            final CoproProcessor<ErrorResponseInputTable, ErrorResponseOutputTable> coproProcessor =
                    new CoproProcessor<>(new LinkedBlockingQueue<>(),
                            ErrorResponseOutputTable.class,
                            ErrorResponseInputTable.class,
                            jdbi, log,
                            new ErrorResponseInputTable(), urls, action);
            coproProcessor.startProducer(errorResponse.getQuerySet(), Integer.valueOf(action.getContext().get("read.batch.size")));
            Thread.sleep(1000);
            coproProcessor.startConsumer(insertQuery, 1, Integer.valueOf(action.getContext().get("write.batch.size")), new ErrorResponseConsumerProcess(log, aMarker, action));
            log.info(aMarker, "Error Response has been completed {}  ", errorResponse.getName());
        } catch (Exception t) {
            log.error(aMarker, "Exception at Error Response execute method {}", ExceptionUtil.toString(t));
            throw new HandymanException("Error at Product Response execute method ", t, action);
        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return errorResponse.getCondition();
    }
}
