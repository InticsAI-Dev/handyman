package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.ObjectMapper;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.BlankPageRemover;
import in.handyman.raven.util.ExceptionUtil;
import okhttp3.MediaType;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.stream.Collectors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "BlankPageRemover"
)
public class BlankPageRemoverAction implements IActionExecution {
    private static final MediaType MediaTypeJSON = MediaType
            .parse("application/json; charset=utf-8");
    public static final String COPRO_BLANK_PAGE_REMOVER_URL = "copro.blank-page-remover.url";
    public static final String INSERT_INTO = "INSERT INTO";
    public static final String VALUES_LIST = " VALUES(?,?,?, ?,?,?,now())";

    public static final String COPRO_CLIENT_API_SLEEPTIME = "copro.client.api.sleeptime";
    public static final String THREAD_SLEEP_TIME = "1000";
    private final ActionExecutionAudit action;
    private final Logger log;
    private final BlankPageRemover blankPageRemover;
    private final ObjectMapper mapper = new ObjectMapper();
    private final String URI;

    private final Marker aMarker;
    private final String outputDir;
    private final String schemaName;
    private final String tableName;
    private final String columnList;
    private Integer readBatchSize;
    private int threadSleepTime;
    private Integer consumerApiCount;
    private Integer writeBatchSize;

    public BlankPageRemoverAction(final ActionExecutionAudit action, final Logger log,
                                  final Object blankPageRemover) {
        this.blankPageRemover = (BlankPageRemover) blankPageRemover;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" BlankPageRemover:" + this.blankPageRemover.getName());
        this.URI = action.getContext().get(COPRO_BLANK_PAGE_REMOVER_URL);
        final String outputDirRaw = this.blankPageRemover.getOutputDir();
        outputDir = Optional.ofNullable(outputDirRaw).map(String::valueOf).orElse(null);
        schemaName = "info";
        tableName = "blank_page_removal";
        columnList = "origin_id,group_id,processed_file_path, status,stage,message,created_on";
        String consumerApiCountRaw = action.getContext().get("consumer.API.count");
        String writeBatchSizeRaw = action.getContext().get("write.batch.size");
        String readBatchSizeRaw = action.getContext().get("read.batch.size");
        String threadSleepTimeStr = action.getContext().get(COPRO_CLIENT_API_SLEEPTIME);

        this.consumerApiCount = Integer.valueOf(consumerApiCountRaw);
        this.writeBatchSize = Integer.valueOf(writeBatchSizeRaw);
        this.readBatchSize = Integer.valueOf(readBatchSizeRaw);
        threadSleepTimeStr = threadSleepTimeStr != null && threadSleepTimeStr.trim().length() > 0 ? threadSleepTimeStr : THREAD_SLEEP_TIME;
        this.threadSleepTime = Integer.parseInt(threadSleepTimeStr);
    }

    @Override
    public void execute() throws Exception {
        try {
            log.info(aMarker, " Blank Page Removal Action has been started {}  ", blankPageRemover.getName());

            String resourceConn = blankPageRemover.getResourceConn();
            final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(resourceConn);
            jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));

            //5. build insert prepare statement with output table columns
            String processId = blankPageRemover.getProcessId();
            final String insertQuery = INSERT_INTO + " " + schemaName + "." + tableName + "_" + processId + "(" + columnList + ") " + VALUES_LIST;
            log.info(aMarker, "Blank Page Removal Insert query {}", insertQuery);

            //3. initiate copro processor and copro urls
            final List<URL> urls = Optional.ofNullable(action.getContext().get("copro.blank-page-remover.url")).map(s -> Arrays.stream(s.split(",")).map(urlItem -> {
                try {
                    return new URL(urlItem);
                } catch (MalformedURLException e) {
                    log.error("Error in processing the URL ", e);
                    throw new HandymanException(e);
                }
            }).collect(Collectors.toList())).orElse(Collections.emptyList());

            BlankPageRemoverInputTable inputTable = new BlankPageRemoverInputTable();
            final CoproProcessor<BlankPageRemoverInputTable, BlankPageRemoverOutputTable> coproProcessor =
                    new CoproProcessor<>(new LinkedBlockingQueue<>(),
                            BlankPageRemoverOutputTable.class,
                            BlankPageRemoverInputTable.class,
                            jdbi, log,
                            inputTable, urls, action);

            //4. call the method start producer from coproprocessor

            coproProcessor.startProducer(blankPageRemover.getQuerySet(), readBatchSize);

            Thread.sleep(threadSleepTime);
            //8. call the method start consumer from coproprocessor

            final BlankPageRemoverConsumerProcess blankPageRemoverConsumerProcess = new BlankPageRemoverConsumerProcess(log, aMarker, action, outputDir);
            coproProcessor.startConsumer(insertQuery, consumerApiCount, writeBatchSize, blankPageRemoverConsumerProcess);
            log.info(aMarker, " Blank Page Removal Action has been completed {}  ", blankPageRemover.getName());
        } catch (Exception e) {
            action.getContext().put(blankPageRemover.getName() + ".isSuccessful", "false");
            log.error(aMarker, "error at blank page removal execute method {}", ExceptionUtil.toString(e));
            throw new HandymanException("error in execute method for auto rotation", e, action);
        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return blankPageRemover.getCondition();
    }


}