package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.ObjectMapper;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.MultipartDelete;

import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

import in.handyman.raven.util.CommonQueryUtil;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import okhttp3.*;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.jdbi.v3.core.statement.UnableToExecuteStatementException;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "MultipartDelete"
)
public class MultipartDeleteAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final MultipartDelete multipartDelete;

    private final Marker aMarker;

    final OkHttpClient httpclient = new OkHttpClient.Builder()
            .connectTimeout(10, TimeUnit.MINUTES)
            .writeTimeout(10, TimeUnit.MINUTES)
            .readTimeout(10, TimeUnit.MINUTES)
            .build();

    public MultipartDeleteAction(final ActionExecutionAudit action, final Logger log,
                                 final Object multipartDelete) {
        this.multipartDelete = (MultipartDelete) multipartDelete;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" MultipartDelete:" + this.multipartDelete.getName());
    }

    @Override
    public void execute() throws Exception {

        List<MultipartDeleteInputTable> multipartDeleteInputTableArrayList = new ArrayList<>();

        try {
            final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(multipartDelete.getResourceConn());
            jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
            log.info(aMarker, "Multipart delete Action for {} has been started", multipartDelete.getName());

            String endPointUrl = multipartDelete.getEndPoint();

            final List<URL> urls = Optional.ofNullable(endPointUrl).map(s ->
                    Arrays.stream(s.split(",")).map(s1 -> {
                        try {
                            return new URL(s1);
                        } catch (MalformedURLException e) {
                            log.error("Error in processing the URL ", e);
                            throw new RuntimeException(e);
                        }
                    }).collect(Collectors.toList())).orElse(Collections.emptyList());

            final List<String> formattedQuery = CommonQueryUtil.getFormattedQuery(multipartDelete.getQuerySet());
            formattedQuery.forEach(sql -> jdbi.useTransaction(handle ->
                    handle.createQuery(sql)
                            .mapToBean(MultipartDeleteInputTable.class)
                            .forEach(multipartDeleteInputTableArrayList::add)));

            if (!multipartDeleteInputTableArrayList.isEmpty()) {

                if (!urls.isEmpty()) {
                    int endpointSize = urls.size();
                    log.info("Endpoints are not empty for multipart delete with nodes count {}", endpointSize);

                    final ExecutorService executorService = Executors.newFixedThreadPool(endpointSize);
                    final CountDownLatch countDownLatch = new CountDownLatch(endpointSize);
                    log.info("Total consumers {}", countDownLatch.getCount());

                    urls.forEach(url -> executorService.submit(() -> multipartDeleteInputTableArrayList.forEach(multipartDeleteInputTable -> {
                        try {
                            deleteFile(url, multipartDeleteInputTable, jdbi);
                        } catch (Exception e) {
                            String filepath = multipartDeleteInputTable.getFilePath();
                            log.error(aMarker, "The Exception occurred in multipart file delete for file {} with exception {}", filepath, e.getMessage());
                            HandymanException handymanException = new HandymanException(e);
                            HandymanException.insertException("Exception occurred in multipart delete for file - " + filepath, handymanException, this.action);
                        } finally {
                            log.info("Consumer {} completed the process", countDownLatch.getCount());
                            countDownLatch.countDown();
                        }
                    })));
                    try {
                        countDownLatch.await();
                    } catch (InterruptedException e) {
                        log.error("Consumer Interrupted with exception", e);
                        throw new HandymanException("Error in multipart delete execute method for mapping query set", e, action);
                    } finally {
                        executorService.shutdown();
                    }
                } else {
                    log.error(aMarker, "Endpoints for multipart delete is empty");
                }
            } else {
                log.info("Multipart delete input request list is empty");
            }

        } catch (Exception e) {
            throw new HandymanException("Error in Multipart delete", e, action);
        }
    }

    public void deleteFile(final URL endpoint, final MultipartDeleteInputTable entity, final Jdbi jdbi) throws Exception {

        // Retrieving input parameters
        final String deleteFilePath = entity.getFilePath();
        final Integer groupId = entity.getGroupId();
        final Long processId = entity.getProcessId();
        final String templateId = entity.getTemplateId();
        final Long tenantId = entity.getTenantId();
        final Integer paperNo = entity.getPaperNo();
        final String originId = entity.getOriginId();
        final Long rootPipelineId = entity.getRootPipelineId();

        // Creating URL for the request
        final URL url = new URL(endpoint.toString() + "/?filepath=" + deleteFilePath);

        // Building request
        final Request request = new Request.Builder()
                .url(url)
                .addHeader("accept", "*/*")
                .delete()
                .build();

        try (final Response response = httpclient.newCall(request).execute()) {
            final ObjectMapper objectMapper = new ObjectMapper();
            if (response.isSuccessful()) {
                // Handle successful response
                log.info("Response Details: {}", response);
                if (response.body() != null) {
                    final String responseBody = response.body().string();
                    final MultipartDeleteOutputTable multipartDeleteOutputTable = objectMapper.readValue(responseBody, MultipartDeleteOutputTable.class);
                    handleResponse(jdbi, groupId, processId, templateId, tenantId, paperNo, originId, rootPipelineId, multipartDeleteOutputTable);
                }
            } else {
                // Handle unsuccessful response
                log.error("Request was not successful. HTTP Status: {}", response.code());
                final MultipartDeleteOutputTable multipartDeleteOutputTable = new MultipartDeleteOutputTable();
                handleResponse(jdbi, groupId, processId, templateId, tenantId, paperNo, originId, rootPipelineId, multipartDeleteOutputTable);
            }
        } catch (final Exception e) {
            log.error(aMarker, "Exception occurred in multipart file delete for file {} with exception {}", deleteFilePath, e.getMessage());
            final HandymanException handymanException = new HandymanException(e);
            HandymanException.insertException("Exception occurred in multipart delete for file - " + deleteFilePath, handymanException, this.action);
        }

    }


    private void handleResponse(Jdbi jdbi, Integer groupId, Long processId, String templateId, Long tenantId, Integer paperNo, String originId, Long rootPipelineId, MultipartDeleteOutputTable multipartDeleteOutputTable) {
        try {
            multipartDeleteOutputTable.setGroupId(groupId);
            multipartDeleteOutputTable.setRootPipelineId(rootPipelineId);
            multipartDeleteOutputTable.setPaperNo(paperNo);
            multipartDeleteOutputTable.setOriginId(originId);
            multipartDeleteOutputTable.setTemplateId(templateId);
            multipartDeleteOutputTable.setProcessId(processId);
            multipartDeleteOutputTable.setTenantId(tenantId);
            multipartDeleteOutputTable.setDeletedTime(LocalDateTime.now());

            jdbi.useHandle(handle -> {
                String sql = "INSERT INTO multipart_info.multipart_delete(" +
                        "filepath, message, status, template_id, origin_id, " +
                        "root_pipeline_id, process_id, group_id, tenant_id, paper_no, deleted_time) " +
                        "VALUES (:filepath, :message, :status, :templateId, :originId, " +
                        ":rootPipelineId, :processId, :groupId, :tenantId, :paperNo, :deletedTime)";

                handle.createUpdate(sql)
                        .bindBean(multipartDeleteOutputTable)
                        .execute();
            });
        } catch (UnableToExecuteStatementException exception) {
            log.error(aMarker, "Exception occurred in multipart delete insert: {}", exception.getMessage(), exception);
            HandymanException handymanException = new HandymanException(exception);
            HandymanException.insertException("Exception occurred in multipart delete insert for the file -  " + multipartDeleteOutputTable.getFilepath(), handymanException, this.action);
        }
    }

    @AllArgsConstructor
    @NoArgsConstructor
    @Data
    public static class MultipartDeleteInputTable {
        private String originId;
        private Integer paperNo;
        private Integer groupId;
        private String filePath;
        private Long tenantId;
        private String templateId;
        private Long processId;
        private Long rootPipelineId;
    }


    @AllArgsConstructor
    @NoArgsConstructor
    @Data
    public static class MultipartDeleteOutputTable {
        private String filepath;
        private String message;
        private String status;
        private String originId;
        private Integer paperNo;
        private Integer groupId;
        private Long tenantId;
        private String templateId;
        private Long processId;
        private Long rootPipelineId;
        private LocalDateTime deletedTime;
    }

    @Override
    public boolean executeIf() throws Exception {
        return multipartDelete.getCondition();
    }
}
