package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.ObjectMapper;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.CloudDownload;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;

import in.handyman.raven.lib.model.cloudDownload.CloudDownloadInputTable;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;
import software.amazon.awssdk.core.ResponseInputStream;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.GetObjectRequest;
import software.amazon.awssdk.services.s3.model.GetObjectResponse;

import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Types;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
    actionName = "CloudDownload"
)
public class CloudDownloadAction implements IActionExecution {
  private final ActionExecutionAudit action;

  private final Logger log;

  private final CloudDownload cloudDownload;

  private final Marker aMarker;

  public CloudDownloadAction(final ActionExecutionAudit action, final Logger log,
      final Object cloudDownload) {
    this.cloudDownload = (CloudDownload) cloudDownload;
    this.action = action;
    this.log = log;
    this.aMarker = MarkerFactory.getMarker(" CloudDownload:"+this.cloudDownload.getName());
  }

  @Override
  public void execute() throws Exception {

      log.info(aMarker, "https Action for {} has started", cloudDownload.getName());
      final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(cloudDownload.getResourceConn());
      jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));

      CloudDownloadInputTable cloudDownloadInputTable = getInputTableFromQuerySet(cloudDownload.getQuerySet(),jdbi);
      String bucketName =cloudDownloadInputTable.getBucketName();
      String objectKey = cloudDownloadInputTable.getObjectKey();
      ObjectMapper objectMapper = new ObjectMapper();
      Strin cloudDownloadRequestJson = objectMapper.writeValueAsString(httpsDownloadInputTable);

    final
    final = "your-object-key";
    final   String localFilePath =action.getContext().get("localFilePath");

        // Set your AWS region
        Region region = Region.US_EAST_1; // Change to your desired region

        // Set your S3 bucket name, object key, and local file path

        // Create an S3 client
        S3Client s3Client = S3Client.builder().region(region).build();

        // Specify the request to get the S3 object
        GetObjectRequest getObjectRequest = GetObjectRequest.builder()
                .bucket(bucketName)
                .key(objectKey)
                .build();

        try {
            // Execute the request and get the S3 object
            ResponseInputStream<GetObjectResponse> s3Object = s3Client.getObject(getObjectRequest);

            // Get the input stream from the S3 object
            try (ResponseInputStream<GetObjectResponse> s3ObjectInputStream = s3Object) {

                // Create a FileOutputStream to write the file locally
                try (FileOutputStream fileOutputStream = new FileOutputStream(localFilePath)) {
                    byte[] buffer = new byte[1024];
                    int bytesRead;

                    // Read from the S3 object's input stream and write to the local file
                    while ((bytesRead = s3ObjectInputStream.read(buffer)) != -1) {
                        fileOutputStream.write(buffer, 0, bytesRead);
                    }
                }
            }

            System.out.println("File downloaded successfully.");

        } catch (IOException e) {
          e.printStackTrace();
        } finally {
          // Close the S3 client
          s3Client.close();
        }
      }




  @Override
  public boolean executeIf() throws Exception {
    return cloudDownload.getCondition();
  }
}
