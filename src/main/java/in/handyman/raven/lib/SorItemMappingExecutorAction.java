package in.handyman.raven.lib;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import in.handyman.raven.core.encryption.SecurityEngine;
import in.handyman.raven.core.encryption.inticsgrity.InticsIntegrity;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.SorItemMappingExecutor;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.stream.Collectors;

import in.handyman.raven.lib.model.kvp.llm.jsonparser.LlmJsonQueryInputTable;
import in.handyman.raven.lib.model.kvp.llm.jsonparser.LlmJsonQueryOutputTable;
import in.handyman.raven.lib.model.scalar.ValidatorByBeanShellExecutor;
import in.handyman.raven.util.CommonQueryUtil;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.jdbi.v3.core.Handle;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.jdbi.v3.core.statement.PreparedBatch;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import static in.handyman.raven.core.encryption.EncryptionConstants.ENCRYPT_ITEM_WISE_ENCRYPTION;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "SorItemMappingExecutor"
)
public class SorItemMappingExecutorAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final SorItemMappingExecutor sorItemMappingExecutor;

    private final Marker aMarker;
    public static final String DUMMY_URL = "http://localhost:10181/copro/preprocess/autorotation";


    public static final String READ_BATCH_SIZE = "read.batch.size";
    public static final String WRITE_BATCH_SIZE = "write.batch.size";
    public static final String LLM_JSON_PARSER_CONSUMER_API_COUNT = "llm.json.parser.consumer.API.count";

    public static final String INSERT_INTO = "INSERT INTO ";
    public static final String INSERT_INTO_VALUES_UPDATED = "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    public static final String INSERT_COLUMNS_UPDATED =
            "created_on, created_user_id, last_updated_on, last_updated_user_id, " +
                    "input_file_path, input_response_json, total_response_json, paper_no, origin_id, " +
                    "process_id, action_id, process, group_id, tenant_id, root_pipeline_id, batch_id, " +
                    "model_registry, status, stage, message, category, request, answer, endpoint, sor_item_name";



    public SorItemMappingExecutorAction(final ActionExecutionAudit action, final Logger log,
                                        final Object sorItemMappingExecutor) {
        this.sorItemMappingExecutor = (SorItemMappingExecutor) sorItemMappingExecutor;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" SorItemMappingExecutor:"+this.sorItemMappingExecutor.getName());
    }

    public void execute() {
        try {
            final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(sorItemMappingExecutor.getResourceConn());
            jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
            log.info(aMarker, "Llm json parser action {} has been started ", sorItemMappingExecutor.getName());

            final List<URL> urls = Optional.of(DUMMY_URL).map(s -> Arrays.stream(s.split(",")).map(s1 -> {
                try {
                    return new URL(s1);
                } catch (MalformedURLException e) {
                    log.error("Error in processing the URL ", e);
                    throw new HandymanException("Error in processing the URL", e, action);
                }
            }).collect(Collectors.toList())).orElse(Collections.emptyList());



            Integer readBatchSize = Integer.valueOf(action.getContext().get(READ_BATCH_SIZE));

            Integer consumerApiCount = Integer.valueOf(action.getContext().get(LLM_JSON_PARSER_CONSUMER_API_COUNT));

            final CoproProcessor<SorItemMappingInputTable, SorItemMappingOutputTable> coproProcessor = new CoproProcessor<>(new LinkedBlockingQueue<>(), SorItemMappingOutputTable.class, SorItemMappingInputTable.class, sorItemMappingExecutor.getResourceConn(), log, new SorItemMappingInputTable(), urls, action);
            log.info(aMarker, "Consumer API count for LLM JSON parser is {}", consumerApiCount);
            String insertQuery = INSERT_INTO + sorItemMappingExecutor.getOutputTable() + " ( " + INSERT_COLUMNS_UPDATED + " ) " + INSERT_INTO_VALUES_UPDATED;
            coproProcessor.startProducer(sorItemMappingExecutor.getQuerySet(), readBatchSize);
            Thread.sleep(1000);

            Integer writeBatchSize = Integer.valueOf(action.getContext().get(WRITE_BATCH_SIZE));
            SorItemConsumerProcess sorItemConsumerProcess = new SorItemConsumerProcess(log, aMarker, action, sorItemMappingExecutor);

            coproProcessor.startConsumer(insertQuery, consumerApiCount, writeBatchSize, sorItemConsumerProcess);
            log.info(aMarker, "LLM JSON parser Action has been completed {}  ", sorItemMappingExecutor.getName());

        } catch (Exception e) {
            action.getContext().put(sorItemMappingExecutor.getName().concat(".error"), "true");
            log.error(aMarker, "The Exception occurred ", e);
            throw new HandymanException("Exception occurred in asset info execute", e, action);
        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return sorItemMappingExecutor.getCondition();
    }

}
