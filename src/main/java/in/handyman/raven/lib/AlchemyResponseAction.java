package in.handyman.raven.lib;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.alchemy.common.AlchemyApiPayload;
import in.handyman.raven.lib.alchemy.common.BoundingBox;
import in.handyman.raven.lib.alchemy.common.Feature;
import in.handyman.raven.lib.model.AlchemyResponse;
import in.handyman.raven.util.CommonQueryUtil;
import in.handyman.raven.util.ExceptionUtil;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.jdbi.v3.core.result.ResultIterable;
import org.jdbi.v3.core.statement.Query;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "AlchemyResponse"
)
public class AlchemyResponseAction implements IActionExecution {
    public static final String ALCHEMY_TRANSFORM = "ALCHEMY_TRANSFORM";
    private final ActionExecutionAudit action;

    private final Logger log;

    private final AlchemyResponse alchemyResponse;

    private final Marker aMarker;

    public AlchemyResponseAction(final ActionExecutionAudit action, final Logger log,
                                 final Object alchemyResponse) {
        this.alchemyResponse = (AlchemyResponse) alchemyResponse;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" AlchemyResponse:" + this.alchemyResponse.getName());
    }

    @Override
    public void execute() throws Exception {
        try {
            final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(alchemyResponse.getResourceConn());
            jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
            Long consumerApiCount = getConsumerApiCount();
            Long tenantId = getTenantId();
            URL url = getOriginValuationUrl();
            String authToken = getAlchemyAuthToken();
            ObjectMapper mapper = new ObjectMapper();
            MediaType mediaTypeJSON = MediaType
                    .parse("application/json; charset=utf-8");


            final OkHttpClient httpclient = new OkHttpClient.Builder()
                    .connectTimeout(10, TimeUnit.MINUTES)
                    .writeTimeout(10, TimeUnit.MINUTES)
                    .readTimeout(10, TimeUnit.MINUTES)
                    .build();


            log.info(aMarker, "Alchemy Response Action for {} has been started", alchemyResponse.getName());

            List<AlchemyResponseInputTable> tableInfos = getDataFromSelectQuery(jdbi);

            process(url,tableInfos, tenantId,authToken, mapper, mediaTypeJSON, httpclient,jdbi);



        } catch (Exception t) {
            handleExecutionError(t);
        }
    }

    private void handleExecutionError(Exception e) {
        action.getContext().put(alchemyResponse.getName() + ".isSuccessful", "false");
        log.error(aMarker, "Error in AlchemyResponse execution: {}", ExceptionUtil.toString(e));
        throw new HandymanException("Error in AlchemyResponse execution", e, action);
    }

    private List<AlchemyResponseInputTable> getDataFromSelectQuery(Jdbi jdbi) {
        List<AlchemyResponseInputTable> tableInfos =new ArrayList<>();
        jdbi.useTransaction(handle -> {
            final List<String> formattedQuery = CommonQueryUtil.getFormattedQuery(alchemyResponse.getQuerySet());
            AtomicInteger i = new AtomicInteger(0);
            formattedQuery.forEach(sqlToExecute -> {
                log.info(aMarker, "executing  query {} from index {}", sqlToExecute, i.getAndIncrement());
                Query query = handle.createQuery(sqlToExecute);
                ResultIterable<AlchemyResponseInputTable> resultIterable = query.mapToBean(AlchemyResponseInputTable.class);
                List<AlchemyResponseInputTable> detailList = resultIterable.stream().collect(Collectors.toList());
                tableInfos.addAll(detailList);
                log.info(aMarker, "executed query from index {}", i.get());
            });
        });
        return tableInfos;
    }

    private String getAlchemyAuthToken() {
        String authToken = action.getContext().get("alchemyAuth.token");
        return authToken;
    }

    @NotNull
    private URL getOriginValuationUrl() throws MalformedURLException {
        URL url=new URL(action.getContext().get("alchemy.origin.valuation.url"));
        return url;
    }

    @NotNull
    private Long getTenantId() {
        Long tenantId = Long.valueOf(action.getContext().get("alchemyAuth.tenantId"));
        return tenantId;
    }

    private Long getConsumerApiCount() {
        String consumerApiCountStr = action.getContext().get("alchemy.response.consumer.API.count");
        Long consumerApiCount = Long.valueOf(consumerApiCountStr);
        return consumerApiCount;
    }

    @Override
    public boolean executeIf() throws Exception {
        return alchemyResponse.getCondition();
    }

    public List<AlchemyResponseOutputTable> process(
            URL endpoint,
            List<AlchemyResponseInputTable> entities,
            Long tenantId,
            String authToken,
            ObjectMapper objectMapper,
            MediaType mediaType,
            OkHttpClient httpClient,
            Jdbi jdbi
    ) throws Exception {

        List<AlchemyResponseOutputTable> parentObj = new ArrayList<>();
        Map<String, List<AlchemyResponseInputTable>> groupedByOriginId = getOriginBasedPredictions(entities);

        for (Map.Entry<String, List<AlchemyResponseInputTable>> entry : groupedByOriginId.entrySet()) {
            String originId = entry.getKey();
            List<AlchemyResponseInputTable> inputTables = entry.getValue();
            List<AlchemyRequestBody> requestData = new ArrayList<>();

            for (AlchemyResponseInputTable input : inputTables) {
                requestData.add(buildAlchemyRequest(input, objectMapper));
            }
            AlchemyResponseOutputTable alchemyResponseOutputTable=new AlchemyResponseOutputTable();
            executeAlchemyPredictionApi(endpoint, originId, tenantId, authToken, requestData, objectMapper, mediaType, httpClient, alchemyResponseOutputTable);
            consumerBatch(jdbi,alchemyResponseOutputTable);
        }

        return parentObj;
    }
    private AlchemyRequestBody buildAlchemyRequest(AlchemyResponseInputTable input, ObjectMapper objectMapper) {
        AlchemyRequestBody request = AlchemyRequestBody.builder()
                .paperNo(input.getPaperNo())
                .rootPipelineId(input.getRootPipelineId())
                .feature(input.getFeature())
                .build();

        try {
            switch (Feature.valueOf(input.getFeature())) {
                case KIE:
                case CHECKBOX_EXTRACTION:
                    request.setBbox(objectMapper.readTree(input.getBbox()));
                    request.setConfidenceScore(input.getConfidenceScore());
                    request.setExtractedValue(input.getExtractedValue());
                    request.setSynonymId(input.getSynonymId());
                    request.setQuestionId(input.getQuestionId());
                    request.setBatchId(input.getBatchId());
                    break;

                case TABLE_EXTRACT:
                    request.setTableData(objectMapper.readTree(input.getTableData()));
                    request.setCsvFilePath(input.getCsvFilePath());
                    request.setTruthEntityId(input.getTruthEntityId());
                    break;

                case CURRENCY_DETECTION:
                    request.setDetectedValue(input.getDetectedValue());
                    request.setDetectedAsciiValue(input.getDetectedAsciiValue());
                    request.setConfidenceScore(input.getConfidenceScore());
                    break;

                case TABLE_EXTRACT_AGGREGATE:
                    request.setTableData(objectMapper.readTree(input.getTableData()));
                    request.setAggregateJson(objectMapper.readTree(input.getTableAggregateNode()));
                    request.setSorItemId(input.getSorItemId());
                    break;

                case BULLETIN_EXTRACTION:
                    request.setBulletinPoints(objectMapper.readTree(input.getBulletinPoints()));
                    request.setBulletinSection(input.getBulletinSection());
                    request.setSynonymId(input.getSynonymId());
                    break;

                case PARAGRAPH_EXTRACTION:
                    request.setParagraphPoints(objectMapper.readTree(input.getParagraphPoints()));
                    request.setParagraphSection(input.getParagraphSection());
                    request.setSynonymId(input.getSynonymId());
                    break;

                case FACE_DETECTION:
                    request.setBbox(buildBoundingBox(input, objectMapper));
                    request.setEncode(input.getEncode());
                    request.setConfidenceScore(input.getConfidenceScore());
                    break;

                case FIGURE_DETECTION:
                case DOCUMENT_PARSER:
                    request.setEncode(input.getEncode());
                    break;
            }
        } catch (JsonProcessingException e) {
            throw new RuntimeException("Error processing JSON for feature: " + input.getFeature(), e);
        }

        return request;
    }

    private JsonNode buildBoundingBox(AlchemyResponseInputTable input, ObjectMapper objectMapper) throws JsonProcessingException {
        BoundingBox bbox = new BoundingBox();
        bbox.setTopLeftX(Integer.parseInt(input.getLeftPos()));
        bbox.setTopLeftY(Integer.parseInt(input.getUpperPos()));
        bbox.setBottomRightX(Integer.parseInt(input.getRightPos()));
        bbox.setBottomRightY(Integer.parseInt(input.getLowerPos()));

        return objectMapper.readTree(objectMapper.writeValueAsString(bbox));
    }

    private void executeAlchemyPredictionApi(
            URL endpoint,
            String originId,
            Long tenantId,
            String authToken,
            List<AlchemyRequestBody> requestData,
            ObjectMapper objectMapper,
            MediaType mediaType,
            OkHttpClient httpClient,
            AlchemyResponseOutputTable alchemyResponseOutputTable
    ) {

        alchemyResponseOutputTable.setOriginId(originId);
        alchemyResponseOutputTable.setTenantId(tenantId);
        alchemyResponseOutputTable.setGroupId(getGroupIdFromContext());
        alchemyResponseOutputTable.setRootPipelineId(action.getRootPipelineId());
        alchemyResponseOutputTable.setEndpoint(endpoint.toString());
        try {

            String url = endpoint + "/" + originId + "/?tenantId=" + tenantId;
            String requestBodyStr = objectMapper.writeValueAsString(requestData);
            RequestBody body = RequestBody.create(requestBodyStr, mediaType);
            alchemyResponseOutputTable.setRequest(requestBodyStr);
            alchemyResponseOutputTable.setCreatedOn(LocalDateTime.now());
            Request request = new Request.Builder()
                    .url(url)
                    .addHeader("accept", "*/*")
                    .addHeader("Authorization", "Bearer " + authToken)
                    .addHeader("Content-Type", "application/json")
                    .post(body)
                    .build();

            if (log.isInfoEnabled()) {
                log.info(aMarker, "Sending request to {} for originId {}", endpoint, originId);
            }

            try (Response response = httpClient.newCall(request).execute()) {
                if (response.isSuccessful()) {
                    alchemyResponseOutputTable.setStatus("COMPLETED");
                    alchemyResponseOutputTable.setStage(ALCHEMY_TRANSFORM);
                    alchemyResponseOutputTable.setCompletedOn(LocalDateTime.now());
                    alchemyResponseOutputTable.setResponse(response.body().string());
                    log.info("Response code: {}, Headers: {}", response.code(), response.headers());
                } else {
                    alchemyResponseOutputTable.setStatus("FAILED");
                    alchemyResponseOutputTable.setStage(ALCHEMY_TRANSFORM);
                    alchemyResponseOutputTable.setCompletedOn(LocalDateTime.now());
                    alchemyResponseOutputTable.setResponse(response.message());
                    log.error("Request failed with status: {}", response.code());
                }
            }
        } catch (Exception e) {
            log.error(aMarker, "Exception during Alchemy request for originId {}", originId, e);
            HandymanException handymanException = new HandymanException(e);
            alchemyResponseOutputTable.setCompletedOn(LocalDateTime.now());
            alchemyResponseOutputTable.setStatus("FAILED");
            alchemyResponseOutputTable.setStage(ALCHEMY_TRANSFORM);
            alchemyResponseOutputTable.setResponse(e.getMessage());
            HandymanException.insertException("Error in Alchemy request for originId - " + originId, handymanException, this.action);
        }


    }

    @NotNull
    private Long getGroupIdFromContext() {
        return Long.valueOf(action.getContext().get("group_id"));
    }

    void consumerBatch(final Jdbi jdbi, AlchemyResponseOutputTable resultQueue) {
        String outputTableName = getOutputTableName();
        try {
            jdbi.useTransaction(handle -> {
                try {
                    handle.createUpdate("INSERT INTO "+outputTableName+
                                    "(origin_id, root_pipeline_id, tenant_id, group_id, request, response, endpoint, status, stage, created_on, completed_on) " +
                                    "VALUES (:originId, :rootPipelineId, :tenantId, :groupId, :request, :response, :endpoint, :status, :stage, :createdOn, :completedOn);")
                            .bindBean(resultQueue)
                            .execute();
                    log.info("Inserted {} into alchemy_response_output_table", resultQueue.getOriginId());
                } catch (Throwable t) {

                    log.error("Error inserting result {}", resultQueue, t);
                }
            });
        } catch (Exception e) {
            log.error("Error inserting result {}", resultQueue, e);
            HandymanException handymanException = new HandymanException(e);
            HandymanException.insertException("Error inserting result " + resultQueue, handymanException, action);
        }
    }

    private String getOutputTableName() {
        String outputTableName = action.getContext().get("alchemy.response.output.table");
        return outputTableName;
    }

    @NotNull
    private static Map<String, List<AlchemyResponseInputTable>> getOriginBasedPredictions(List<AlchemyResponseInputTable> entities) {
        Map<String, List<AlchemyResponseInputTable>> groupedByOriginId = entities.stream()
                .collect(Collectors.groupingBy(AlchemyResponseInputTable::getOriginId));
        return groupedByOriginId;
    }

    @AllArgsConstructor
    @NoArgsConstructor
    @Data
    @Builder
    public static class AlchemyResponseOutputTable{
        private String originId;
        private Long rootPipelineId;
        private Long tenantId;
        private Long groupId;
        private String request;
        private String response;
        private String endpoint;
        private String status;
        private String stage;
        private LocalDateTime createdOn;
        private LocalDateTime completedOn;
    }


    @AllArgsConstructor
    @NoArgsConstructor
    @Data
    @Builder
    public static class AlchemyResponseInputTable implements CoproProcessor.Entity {

        private String originId;
        private Integer paperNo;
        private Long tenantId;
        private Long rootPipelineId;
        private Integer confidenceScore;
        private String extractedValue;
        private String sorItemName;
        private Long synonymId;
        private Long questionId;
        private String bbox;
        private String feature;
        private String state;
        private String tableData;
        private String detectedValue;
        private String detectedAsciiValue;
        private String csvFilePath;
        private Long truthEntityId;
        private String batchId;
        private String tableAggregateNode;
        private Long sorItemId;
        private String bulletinSection;
        private String bulletinPoints;
        private String paragraphSection;
        private String paragraphPoints;
        private String encode;
        private String leftPos;
        private String upperPos;
        private String rightPos;
        private String lowerPos;


        @Override
        public List<Object> getRowData() {
            return null;
        }
    }
    @AllArgsConstructor
    @NoArgsConstructor
    @Data
    @Builder
    public static class AlchemyCurrencyResponse{
        private String detectedValue;
        private String detectedAsciiValue;
        private String confidenceScore;
    }
    @AllArgsConstructor
    @NoArgsConstructor
    @Data
    @Builder
    public static class AlchemyRequestBody {
        private Integer paperNo;
        private Integer confidenceScore;
        private String extractedValue;
        private JsonNode bbox;
        private Long synonymId;
        private Long questionId;
        private Long rootPipelineId;
        private String feature;
        private String state;
        private String csvFilePath;
        private Long truthEntityId;
        private JsonNode tableData;
        private String detectedValue;
        private String detectedAsciiValue;
        private String batchId;
        private JsonNode aggregateJson;
        private Long sorItemId;
        private String bulletinSection;
        private JsonNode bulletinPoints;
        private String paragraphSection;
        private JsonNode paragraphPoints;
        private String encode;


    }


}
