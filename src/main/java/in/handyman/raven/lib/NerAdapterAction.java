package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.*;
import in.handyman.raven.lib.model.*;
import in.handyman.raven.lib.model.NerAdaptors.*;
import in.handyman.raven.lib.model.triton.TritonInputRequest;
import in.handyman.raven.lib.model.triton.TritonRequest;
import in.handyman.raven.util.ExceptionUtil;
import okhttp3.*;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Timestamp;
import java.sql.Types;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "NerAdapter"
)
public class NerAdapterAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final NerAdapter nerAdapter;

    private final Marker aMarker;

    private static String httpClientTimeout = new String();



    public NerAdapterAction(final ActionExecutionAudit action, final Logger log,
                            final Object nerAdapter) {
        this.nerAdapter = (NerAdapter) nerAdapter;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" NerAdapter:" + this.nerAdapter.getName());

    }

    @Override
    public void execute() throws Exception {

        try {
            log.info(aMarker, "ner adapter Action has been started {}", nerAdapter);

            final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(nerAdapter.getResourceConn());
            jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
            // build insert prepare statement with output table columns
            String COLUMN_LIST = "origin_id, paper_no, group_id, process_id, sor_id, sor_item_id, sor_item_name, question, answer,weight, created_user_id, tenant_id, created_on, word_score, char_score, validator_score_allowed, validator_score_negative, confidence_score, validation_name, b_box,status,stage,message,vqa_score,question_id,synonym_id,model_name,model_version";
            final String insertQuery = "INSERT INTO " + nerAdapter.getResultTable() +
                    "(" + COLUMN_LIST + ")" +
                    " VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,?,?, ?, ?, ?, ?, ?,?,?,?  ,? ,?,?,?,?);";
            log.info(aMarker, "ner adapter Insert query {}", insertQuery);

            //3. initiate copro processor and copro urls
            final List<URL> urls = Optional.ofNullable(action.getContext().get("copro.text-validation.url")).map(s -> Arrays.stream(s.split(",")).map(url -> {
                try {
                    return new URL(url);
                } catch (MalformedURLException e) {
                    log.error("Error in processing the URL {}", url, e);
                    throw new HandymanException("Error in processing the URL", e, action);
                }
            }).collect(Collectors.toList())).orElse(Collections.emptyList());
            log.info(aMarker, "ner adapter copro urls {}", urls);

            final CoproProcessor<NerInputTable, NerOutputTable> coproProcessor =
                    new CoproProcessor<>(new LinkedBlockingQueue<>(),
                            NerOutputTable.class,
                            NerInputTable.class,
                            jdbi, log,
                            new NerInputTable(), urls, action);

            log.info(aMarker, "ner adapter copro coproProcessor initialization  {}", coproProcessor);

            //4. call the method start producer from coproprocessor
            coproProcessor.startProducer(nerAdapter.getResultSet(), Integer.valueOf(action.getContext().get("read.batch.size")));
            log.info(aMarker, "ner adapter copro coproProcessor startProducer called read batch size {}", action.getContext().get("read.batch.size"));
            Thread.sleep(1000);
            coproProcessor.startConsumer(insertQuery, Integer.valueOf(action.getContext().get("ner.consumer.API.count")), Integer.valueOf(action.getContext().get("write.batch.size")),
                    new NerAdapterConsumerProcess(log, aMarker, action));
            log.info(aMarker, "ner adapter copro coproProcessor startConsumer called consumer count {} write batch count {} ", Integer.valueOf(action.getContext().get("ner.consumer.API.count")), Integer.valueOf(action.getContext().get("write.batch.size")));


        } catch (Exception ex) {
            log.error(aMarker, "Error in execute method for ner adapter {} ", ExceptionUtil.toString(ex));
            throw new HandymanException("Error in execute method for ner adapter", ex, action);

        }
    }

    public static class NerAdapterConsumerProcess implements CoproProcessor.ConsumerProcess<NerInputTable, NerOutputTable> {
        private final Logger log;
        private final Marker aMarker;
        private final NervalidatorAction nerAction;
        private final WordcountAction wordcountAction;
        private final CharactercountAction charactercountAction;
        private final AlphavalidatorAction alphaAction;
        private final NumericvalidatorAction numericAction;
        private final AlphanumericvalidatorAction alphaNumericAction;
        private final DatevalidatorAction dateAction;
        public final ActionExecutionAudit action;
        boolean multiverseValidator;
        String[] restrictedAnswers;
        String URI;
        private final String PHONE_NUMBER_REGEX = "^\\(?(\\d{3})\\)?[-]?(\\d{3})[-]?(\\d{4})$";
        private final String NUMBER_REGEX = "^[+-]?(\\d+\\.?\\d*|\\.\\d+)$";
        private static final MediaType MediaTypeJSON = MediaType
                .parse("application/json; charset=utf-8");

        private final OkHttpClient httpclient = new OkHttpClient.Builder()
                .connectTimeout(Long.parseLong(httpClientTimeout), TimeUnit.MINUTES)
                .writeTimeout(Long.parseLong(httpClientTimeout), TimeUnit.MINUTES)
                .readTimeout(Long.parseLong(httpClientTimeout), TimeUnit.MINUTES)
                .build();

        public NerAdapterConsumerProcess(Logger log, Marker aMarker, ActionExecutionAudit action) {
            this.log = log;
            this.aMarker = aMarker;
            this.action = action;
            this.nerAction = new NervalidatorAction(action, log, Nervalidator.builder().build());
            this.wordcountAction = new WordcountAction(action, log, Wordcount.builder().build());
            this.charactercountAction = new CharactercountAction(action, log, Charactercount.builder().build());
            this.alphaAction = new AlphavalidatorAction(action, log, Alphavalidator.builder().build());
            this.numericAction = new NumericvalidatorAction(action, log, Numericvalidator.builder().build());
            this.alphaNumericAction = new AlphanumericvalidatorAction(action, log, Alphanumericvalidator.builder().build());
            this.dateAction = new DatevalidatorAction(action, log, Datevalidator.builder().build());
        }

        @Override
        public List<NerOutputTable> process(URL endpoint, NerInputTable result) throws Exception {
            URI = String.valueOf(endpoint);
            multiverseValidator = Boolean.parseBoolean(action.getContext().get("validation.multiverse-mode"));
            restrictedAnswers = action.getContext().get("validation.restricted-answers").split(",");
            log.info(aMarker, "Build 19-coproProcessor consumer process started with endpoint {} and entity {}", endpoint, result);
            List<NerOutputTable> parentObj = new ArrayList<>();
            String inputValue = result.getInputValue();
            int wordScore = wordcountAction.getWordCount(inputValue,
                    result.getWordLimit(), result.getWordThreshold());
            int charScore = charactercountAction.getCharCount(inputValue,
                    result.getCharLimit(), result.getCharThreshold());
            Validator configurationDetails = Validator.builder()
                    .inputValue(inputValue)
                    .adapter(result.getAllowedAdapter())
                    .allowedSpecialChar(result.getAllowedCharacters())
                    .comparableChar(result.getComparableCharacters())
                    .threshold(result.getValidatorThreshold())
                    .build();

            int validatorScore = computeAdapterScore(configurationDetails);
            int validatorNegativeScore;
            if (result.getRestrictedAdapterFlag() == 1 && validatorScore != 0) {
                configurationDetails.setAdapter(result.getRestrictedAdapter());
                validatorNegativeScore = computeAdapterScore(configurationDetails);
            } else {
                validatorNegativeScore = 0;
            }
            double valConfidenceScore = wordScore + charScore + validatorScore - validatorNegativeScore;
            log.info(aMarker, "Build 19-validator confidence score {}", valConfidenceScore);

            updateEmptyValueIfLowCf(result, valConfidenceScore);
            updateEmptyValueForRestrictedAns(result, inputValue);

            String rootPipelineId = action.getContext().get("gen_id.root_pipeline_id");
            Long actionId=action.getActionId();
            String process = String.valueOf("NER");
            String inputString = inputValue;
            ObjectMapper objectMapper = new ObjectMapper();


            //payload
            NerAdapterPayload NerAdaptorpayload = new NerAdapterPayload();
            NerAdaptorpayload.setRootPipelineId(Long.valueOf(rootPipelineId));
            NerAdaptorpayload.setProcess(process);
            NerAdaptorpayload.setActionId(actionId);
            NerAdaptorpayload.setInputString(Collections.singletonList(inputValue));

            String jsonInputRequest = objectMapper.writeValueAsString(NerAdaptorpayload);

            NerAdapterRequest requests = new NerAdapterRequest();
            TritonRequest requestBody = new TritonRequest();
            requestBody.setName("NER START");
            requestBody.setShape(List.of(1, 1));
            requestBody.setDatatype("BYTES");
            requestBody.setData(Collections.singletonList(jsonInputRequest));

            //   requestBody.setData(Collections.singletonList(jsonNodeRequest));

            //  requestBody.setData(Collections.singletonList(NerAdaptorpayload));

            TritonInputRequest tritonInputRequest=new TritonInputRequest();
            tritonInputRequest.setInputs(Collections.singletonList(requestBody));

            String jsonRequest = objectMapper.writeValueAsString(tritonInputRequest);

            Request request = new Request.Builder().url(endpoint)
                    .post(RequestBody.create(jsonRequest, MediaTypeJSON)).build();

            if(log.isInfoEnabled()) {
                log.info(aMarker, "Request has been build with the parameters \n coproUrl  {} ,action : {} rootPipelineId {}  process {} ", endpoint,actionId,rootPipelineId,process);
            }

            AtomicInteger atomicInteger = new AtomicInteger();
            log.info(aMarker, "coproProcessor consumer confidence score  {}", valConfidenceScore);
            String originId = result.getOriginId();
            Integer groupId = result.getGroupId();
            int sorId = result.getSorId();
            String tenantId = result.getTenantId();
            String processId = result.getProcessId();
            int paperNo = result.getPaperNo();
            int sorItemId = result.getSorItemId();
            String sorKey = result.getSorKey();
            String question = result.getQuestion();
            int weight = result.getWeight();
            float vqaScore = result.getVqaScore();
            String createdUserId = result.getCreatedUserId();
            log.info(aMarker, "Build 19-validator vqa score {}", vqaScore);


            try (Response response = httpclient.newCall(request).execute()) {
                String responseBody = Objects.requireNonNull(response.body()).string();

                if (response.isSuccessful()) {
                    ObjectMapper objectMappers = new ObjectMapper();
                    NerAdapterResponse Response = objectMappers.readValue(responseBody, NerAdapterResponse.class);
                    if (Response.getOutputs() != null && !Response.getOutputs().isEmpty()) {
                        Response.getOutputs().forEach(o -> {
                            o.getData().forEach(NerAdapterDataItem -> {

                                NerAdapterDataItem.getNerAdapterprediction().forEach(NerAdapterPrediction -> {
                                    in.handyman.raven.lib.model.NerAdaptors.NerAdapterPrediction score = new NerAdapterPrediction();
                                    String inputName = score.getInputName();
                                    int predictionScore = score.getPredictionScore();
                                    String predictionTag = score.getPredictionTag();
                                    String predictedLabel = score.getPredictedLabel();

                                            if (valConfidenceScore >= 0) {
                                                parentObj.add(
                                                        NerOutputTable
                                                                .builder()
                                                                .originId(Optional.ofNullable(originId).map(String::valueOf).orElse(null))
                                                                .groupId(groupId)
                                                                .sorId(sorId)
                                                                .tenantId(tenantId)
                                                                .processId(processId)
                                                                .paperNo(paperNo)
                                                                .sorItemId(sorItemId)
                                                                .sorItemName(sorKey)
                                                                .question(question)
                                                                .answer(inputValue)
                                                                .vqaScore(vqaScore)
                                                                .weight(weight)
                                                                .createdUserId(createdUserId)
                                                                .createdOn(Timestamp.valueOf(LocalDateTime.now()))
                                                                .wordScore(wordScore)
                                                                .charScore(charScore)
                                                                .validatorScoreAllowed(validatorScore)
                                                                .validatorScoreNegative(validatorNegativeScore)
                                                                .confidenceScore(valConfidenceScore)
                                                                .validationName(result.getAllowedAdapter())
                                                                .bBox(result.getBbox())
                                                                .questionId(result.getQuestionId())
                                                                .synonymId(result.getSynonymId())
                                                                .status("COMPLETED")
                                                                .stage("SCALAR_VALIDATION")
                                                                .message("Ner validation macro completed")
                                                                .build());
                                            }
                                });
                            });
                        });
                    }

                } else {
                    parentObj.add(
                            NerOutputTable
                                    .builder()
                                    .originId(Optional.ofNullable(originId).map(String::valueOf).orElse(null))
                                    .groupId(groupId)
                                    .sorId(sorId)
                                    .tenantId(tenantId)
                                    .processId(processId)
                                    .paperNo(paperNo)
                                    .sorItemId(sorItemId)
                                    .sorItemName(sorKey)
                                    .question(question)
                                    .answer(inputValue)
                                    .vqaScore(vqaScore)
                                    .weight(weight)
                                    .createdUserId(createdUserId)
                                    .createdOn(Timestamp.valueOf(LocalDateTime.now()))
                                    .wordScore(wordScore)
                                    .charScore(charScore)
                                    .validatorScoreAllowed(validatorScore)
                                    .validatorScoreNegative(validatorNegativeScore)
                                    .confidenceScore(valConfidenceScore)
                                    .validationName(result.getAllowedAdapter())
                                    .bBox(result.getBbox())
                                    .questionId(result.getQuestionId())
                                    .synonymId(result.getSynonymId())
                                    .status("FAILED")
                                    .stage("SCALAR_VALIDATION")
                                    .message("Confidence Score is less than 0")
                                    .build());
                    log.error(aMarker, "The Exception occurred in confidence score validation by {} ", valConfidenceScore);
                }
            }

            atomicInteger.set(0);
            log.info(aMarker, "coproProcessor consumer process with output entity {}", parentObj);
            return parentObj;
        }

        int computeAdapterScore(Validator inputDetail) {
            int confidenceScore = 0;
            try {

                switch (inputDetail.getAdapter()) {
                    case "ner":
                        confidenceScore = this.nerAction.getNerScore(inputDetail, URI);
                        break;
                    case "alpha":
                        confidenceScore = this.alphaAction.getAlphaScore(inputDetail);
                        break;
                    case "alphanumeric":
                        confidenceScore = this.alphaNumericAction.getAlphaNumericScore(inputDetail);
                        break;
                    case "numeric":
                        confidenceScore = this.numericAction.getNumericScore(inputDetail);
                        break;
                    case "date":
                        confidenceScore = this.dateAction.getDateScore(inputDetail);
                        break;
                    case "phone-reg":
                        confidenceScore = regValidator(inputDetail, PHONE_NUMBER_REGEX);
                        break;
                    case "numeric-reg":
                        confidenceScore = regValidator(inputDetail, NUMBER_REGEX);
                        break;
                }

            } catch (Throwable t) {
                log.error(aMarker, "error adapter validation{}", inputDetail, t);
                action.getContext().put(this.action.getActionName().concat(".error"), "true");
                log.error(aMarker, "Exception occurred in Scalar Computation {}", ExceptionUtil.toString(t));
                HandymanException handymanException = new HandymanException("Error in execute method for ner adapter", t, action);
                HandymanException.insertException("Exception occurred in NER Computation", handymanException, action);
                throw new HandymanException("Error in execute method for ner adapter", t, action);
            }
            return confidenceScore;
        }

        private void updateEmptyValueForRestrictedAns(NerInputTable result, String inputValue) {
            if (multiverseValidator) {
                log.info(aMarker, "Build 19-validator updatating for Restricted answer {}");
                for (String format : restrictedAnswers) {
                    if (inputValue.equalsIgnoreCase(format)) {
                        updateEmptyValueAndCf(result);
                    }
                }
            }
        }

        private void updateEmptyValueIfLowCf(NerInputTable result, double valConfidenceScore) {
            if (valConfidenceScore < 100 && multiverseValidator) {
                log.info(aMarker, "Build 19-validator updateEmptyValueIfLowCf {}", valConfidenceScore);
                updateEmptyValueAndCf(result);
            }
        }

        private static void updateEmptyValueAndCf(NerInputTable result) {
            result.setInputValue("");
            result.setVqaScore(0);
        }

        private int regValidator(Validator validator, String regForm) {
            String inputValue = validator.getInputValue();
            inputValue = replaceSplChars(validator.getAllowedSpecialChar(), inputValue);
            Pattern pattern = Pattern.compile(regForm);
            Matcher matcher = pattern.matcher(inputValue);
            return matcher.matches() ? validator.getThreshold() : 0;
        }

        private String replaceSplChars(final String specialCharacters, String input) {
            if (specialCharacters != null) {
                for (int i = 0; i < specialCharacters.length(); i++) {
                    if (input.contains(Character.toString(specialCharacters.charAt(i)))) {
                        input = input.replace(Character.toString(specialCharacters.charAt(i)), "");
                    }
                }
            }
            return input;
        }

    }


    @Override
    public boolean executeIf() throws Exception {
        return nerAdapter.getCondition();
    }


}
