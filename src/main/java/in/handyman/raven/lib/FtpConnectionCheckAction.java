package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.FtpConnectionCheck;
import in.handyman.raven.lib.model.FtpConnectionCheckTable;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPReply;
import org.jdbi.v3.core.Handle;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Types;
import java.time.LocalDateTime;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
    actionName = "FtpConnectionCheck"
)
public class FtpConnectionCheckAction implements IActionExecution {
  private final ActionExecutionAudit action;

  private final Logger log;

  private final FtpConnectionCheck ftpConnectionCheck;

  private final Marker aMarker;

  public FtpConnectionCheckAction(final ActionExecutionAudit action, final Logger log,
                                  final Object ftpConnectionCheck) {
    this.ftpConnectionCheck = (FtpConnectionCheck) ftpConnectionCheck;
    this.action = action;
    this.log = log;
    this.aMarker = MarkerFactory.getMarker(" FtpConnectionCheck:" + this.ftpConnectionCheck.getName());
  }

  @Override
  public void execute() throws Exception {

    final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(ftpConnectionCheck.getResourceConn());
    jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));

    final String insertQuery = "INSERT INTO " + ftpConnectionCheck.getResultTable() +
            "(tenant_id, root_pipeline_id, createdBy, lastModifiedDate, createdDate, lastModifiedBy, status, message, type, info, last_processed_on, ftpconnected) " +
            "VALUES (:tenantId, :rootPipelineId, :createdBy, :lastModifiedDate, :createdDate, :lastModifiedBy, :status, :message, :type, :info, :lastProcessedOn, :ftpconnected)";


    log.info(aMarker, "ftpConnectionCheck Insert query {}", insertQuery);

    final String tenantId = action.getContext().get("tenant");
    final String remoteHost = action.getContext().get("host");
    final Long rootPipelineId = action.getPipelineId();
    final String userName = action.getContext().get("username");
    final String password = action.getContext().get("password");
    final String remotePort = action.getContext().get("port");
    final String destDir = action.getContext().get("remoteDir");


    boolean isFtpConnected = checkFtpConnection(userName,password,remotePort,remoteHost);// Check the FTP connection using credentials (username and password)
    boolean isDirectoryAccessOk = checkDirectoryAccess(destDir);
    String ftpConnectionMessage = isFtpConnected ? "FTP connection successful" : "FTP connection failed";
    String directoryAccessMessage = isDirectoryAccessOk ? "Directory access successful" : "Directory access failed";


    FtpConnectionCheckTable data = new FtpConnectionCheckTable();
    data.setTenantId(Long.valueOf(tenantId));
    data.setRootPipelineId(rootPipelineId); // Matches 'root_pipeline_id' in the database
    data.setCreatedDate(LocalDateTime.now()); // Matches 'createdon' in the database
    data.setCreatedBy(1L); // Matches 'createduserid' in the database
    data.setLastModifiedBy(1L); // Matches 'lastupdateduserid' in the database
    data.setLastModifiedDate(LocalDateTime.now()); // Matches 'lastupdatedon' in the database
    data.setStatus(isFtpConnected && isDirectoryAccessOk ? "True" : "False"); // Matches 'status' in the database
    data.setMessage((isFtpConnected && isDirectoryAccessOk) ? "FTP connected and credential stored" :
            "FTP connection or directory access failed. " + ftpConnectionMessage + ". " + directoryAccessMessage); // Matches 'message' in the database
    data.setType("FTP"); // Matches 'type' in the database
    data.setInfo(""); // Matches 'info' in the database
    data.setLastProcessedOn(LocalDateTime.now()); // Matches 'lastprocessedon' in the database
    data.setFtpconnected(isFtpConnected && isDirectoryAccessOk); // Matches 'isftpconnected' in the database



    try (Handle handle = jdbi.open()) {
      handle.createUpdate(insertQuery)
              .bindBean(data)
              .execute();
      log.info(aMarker, "Data inserted successfully");
    } catch (Exception e) {
      log.error("Error inserting data: " + e.getMessage());
    }
  }




  private boolean checkDirectoryAccess(String destDir) {
    // Convert the directory path to a Path object
//    Path directory = Paths.get(destDir);
    Path directory;

    if (destDir != null) {
      directory = Paths.get(destDir);

      // Check if the directory exists
      if (Files.exists(directory) && Files.isDirectory(directory)) {
        // Check if you have read access to the directory
        if (Files.isReadable(directory)) {
          return true; // Access is OK
        }
      }
      return false; // Either directory doesn't exist or access is not OK
    } else {
      return false;
      // Handle the case where destDir is null, e.g., provide a default path or throw an exception.
    }
  }



  private boolean checkFtpConnection(String userName, String password, String remoteHost, String remotePort ) {
    FTPClient ftpClient = new FTPClient();

    try {
      // Connect to the FTP server
      ftpClient.connect(remoteHost, Integer.parseInt(remotePort));
      int reply = ftpClient.getReplyCode();

      if (!FTPReply.isPositiveCompletion(reply)) {
        // Connection failed
        log.error("FTP connection failed: FTP server reply code is not positive.");
        return false;
      }

      // Login with the provided username and password
      if (ftpClient.login(userName, password)) {
        // Successfully logged in
        return true;
      }

      // Login failed
      log.error("FTP login failed: Invalid username or password.");
      return false;
    } catch (Exception e) {
      // Handle any exceptions (e.g., connection timeout)
      log.error("Error during FTP connection: " + e.getMessage(), e);
      return false;
    } finally {
      try {
        ftpClient.disconnect();
      } catch (Exception e) {
        log.error("Error disconnecting from FTP server: " + e.getMessage(), e);
      }
    }
  }
  @Override
  public boolean executeIf() throws Exception {
    return ftpConnectionCheck.getCondition();
  }
}
