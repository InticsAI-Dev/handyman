package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.ObjectMapper;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.HttpsDownload;
import in.handyman.raven.lib.model.https.HttpsDownloadInputTable;
import in.handyman.raven.lib.model.https.HttpsDownloadOutputTable;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.jdbi.v3.core.Handle;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.URI;
import java.sql.Types;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;


/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "HttpsDownload"
)
public class HttpsDownloadAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final HttpsDownload httpsDownload;

    private final Marker aMarker;


    public HttpsDownloadAction(final ActionExecutionAudit action, final Logger log,
                               final Object httpsDownload) {
        this.httpsDownload = (HttpsDownload) httpsDownload;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" HttpsDownload:" + this.httpsDownload.getName());
    }

    @Override
    public void execute() throws Exception {


        log.info(aMarker, "https Action for {} has started", httpsDownload.getName());
        final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(httpsDownload.getResourceConn());
        jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));

        HttpsDownloadInputTable httpsDownloadInputTable = getInputTableFromQuerySet(action.getContext().get("httpDownloadPasswordProtectedQuerySet"), jdbi);

        String url = httpsDownloadInputTable.getUrl();
        ObjectMapper objectMapper = new ObjectMapper();
        String httpsDownloadRequestJson = objectMapper.writeValueAsString(httpsDownloadInputTable);






        final String tenantId = action.getContext().get("tenant_id");
        final Long rootPipelineId = action.getRootPipelineId();
        final String savePath = action.getContext().get("savePath");
        final String localDestination = action.getContext().get("localDestination");
        final String https = "HTTPS";
        final String active = "ACTIVE";
        final String completed = "COMPLETED";


        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            log.info(aMarker, "HTTP request to URL: {}", url);
            HttpGet httpGet = new HttpGet(url);

            String fileName = extractFileNameFromURL(url);

            HttpResponse response = httpClient.execute(httpGet);
            HttpEntity entity = response.getEntity();
            // Check the HTTP response status code
            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                log.info(aMarker, "HTTP response code: {}", response);
                String localPath = savePath + fileName;

                try (InputStream in = entity.getContent();
                     FileOutputStream out = new FileOutputStream(localPath)) {
                    log.info(aMarker, "Download successful");
                    IOUtils.copy(in, out);
                }

                // Determine the file extension
                String fileExtension = localPath.substring(localPath.lastIndexOf('.') + 1).toLowerCase();

                if ("zip".equals(fileExtension)) {
                    try (ZipArchiveInputStream zipInput = new ZipArchiveInputStream(new FileInputStream(localPath))) {
                        List<String> extractedFilePaths = new ArrayList<>();
                        ArchiveEntry entry;
                        while ((entry = zipInput.getNextEntry()) != null) {
                            if (!zipInput.canReadEntryData(entry)) {
                                continue;
                            }
                            File file = new File(localDestination, entry.getName());
                            if (entry.isDirectory()) {
                                file.mkdirs();
                            } else {
                                try (FileOutputStream output = new FileOutputStream(file)) {
                                    IOUtils.copy(zipInput, output);
                                }

                                extractedFilePaths.add(file.getPath());
                                ObjectMapper mapper = new ObjectMapper();
                                String filePaths = mapper.writeValueAsString(extractedFilePaths);

                                HttpsDownloadOutputTable httpsDownloadOutputTable = HttpsDownloadOutputTable.builder()
                                        .tenantId(Long.valueOf(tenantId))
                                        .rootPipelineId(rootPipelineId) // Adjust as needed
                                        .createdOn(LocalDateTime.now())
                                        .createdUserId(Long.valueOf(tenantId)) // Set as needed
                                        .lastUpdatedUserId(Long.valueOf(tenantId)) // Set as needed
                                        .lastUpdatedOn(LocalDateTime.now())
                                        .status(active) // Set the status as needed
                                        .message("https download completed")
                                        .type(https)
                                        .info(httpsDownloadRequestJson)// Set as needed
                                        .lastProcessedOn(LocalDateTime.now())
                                        .localFilePath(localPath) // Set the https folder path
                                        .extractedLocalDirectoryPath(localDestination) // Set the destination path
                                        .extractedFilePaths(filePaths)
                                        .version(1)
                                        .executionStatus(completed)
                                        .build();
                                insertIntoOutputTable(jdbi, httpsDownloadOutputTable);
                            }
                        }
                    }
                } else {
                    ObjectMapper mapper = new ObjectMapper();
                    List<String> filePaths = new ArrayList<>();
                    filePaths.add(savePath);
                    String filePathsjson = mapper.writeValueAsString(filePaths);

                    HttpsDownloadOutputTable httpsDownloadOutputTable = HttpsDownloadOutputTable.builder()
                            .tenantId(Long.valueOf(tenantId))
                            .rootPipelineId(rootPipelineId) // Adjust as needed
                            .createdOn(LocalDateTime.now())
                            .createdUserId(Long.valueOf(tenantId)) // Set as needed
                            .lastUpdatedUserId(Long.valueOf(tenantId)) // Set as needed
                            .lastUpdatedOn(LocalDateTime.now())
                            .status(active) // Set the status as needed
                            .message("https download completed")
                            .type(https)
                            .info(httpsDownloadRequestJson)// Set as needed
                            .lastProcessedOn(LocalDateTime.now())
                            .localFilePath(localPath) // Set the https folder path
                            .extractedFilePaths(filePathsjson)
                            .version(1)
                            .executionStatus(completed)
                            .build();
                    insertIntoOutputTable(jdbi, httpsDownloadOutputTable);
                }

            }else {
                HttpsDownloadOutputTable httpsDownloadOutputTable = HttpsDownloadOutputTable.builder()
                        .tenantId(Long.valueOf(tenantId))
                        .rootPipelineId(rootPipelineId) // Adjust as needed
                        .createdOn(LocalDateTime.now())
                        .createdUserId(Long.valueOf(tenantId)) // Set as needed
                        .lastUpdatedUserId(Long.valueOf(tenantId)) // Set as needed
                        .lastUpdatedOn(LocalDateTime.now())
                        .status("ACTIVE") // Set the status as needed
                        .message("HTTP response failed")
                        .type(https)
                        .lastProcessedOn(LocalDateTime.now())
                        .version(1)
                        .executionStatus("FAILED")
                        .build();
                insertIntoOutputTable(jdbi, httpsDownloadOutputTable);

            }
        } catch (Exception e) {
            log.error(aMarker, "An error occurred during HTTPS download", e);
            HttpsDownloadOutputTable httpsDownloadOutputTable = HttpsDownloadOutputTable.builder()
                    .tenantId(Long.valueOf(tenantId))
                    .rootPipelineId(rootPipelineId) // Adjust as needed
                    .createdOn(LocalDateTime.now())
                    .createdUserId(Long.valueOf(tenantId)) // Set as needed
                    .lastUpdatedUserId(Long.valueOf(tenantId)) // Set as needed
                    .lastUpdatedOn(LocalDateTime.now())
                    .status("ACTIVE") // Set the status as needed
                    .message(e.getMessage())
                    .type(https)
                    .lastProcessedOn(LocalDateTime.now())
                    .localFilePath(savePath) // Set the https folder path
                    .extractedLocalDirectoryPath(localDestination) // Set the destination path
                    .version(1)
                    .executionStatus("FAILED")
                    .build();
            insertIntoOutputTable(jdbi, httpsDownloadOutputTable);

        }

    }

    private String extractFileNameFromURL(String url) {
        try {
            // Create a URI object from the URL string
            URI uri = new URI(url);

            // Get the path component from the URI
            String path = uri.getPath();

            // If the path contains directory structure, extract the file name
            int lastIndex = path.lastIndexOf('/');
            if (lastIndex >= 0 && lastIndex < path.length() - 1) {
                String fileName = path.substring(lastIndex + 1);
                return fileName;
            }

            return null; // No file name found
        } catch (Exception e) {
            e.printStackTrace();
            return null; // Handle the exception or return a default value
        }
    }



    private void insertIntoOutputTable(Jdbi jdbi, HttpsDownloadOutputTable httpsDownloadOutputTable) {
        jdbi.useTransaction(handle -> {
            handle.createUpdate("INSERT INTO onboard_wizard_info.https_download_info\n" +
                            "                (created_on, created_user_id, last_updated_on, last_updated_user_id, status, version, extracted_local_directory_Path, execution_status, extracted_file_paths, local_file_path, info, last_processed_on, message, root_pipeline_id, tenant_id, type) " +
                            "VALUES( :createdOn, :createdUserId, :lastUpdatedOn, :lastUpdatedUserId, :status, :version, :extractedLocalDirectoryPath, :executionStatus, :extractedFilePaths::jsonb, :localFilePath, :info, :lastProcessedOn, :message, :rootPipelineId, :tenantId, :type);")
                    .bindBean(httpsDownloadOutputTable).execute();
            log.debug(aMarker, "inserted {} into https download info details", httpsDownloadOutputTable);
        });
    }

    private HttpsDownloadInputTable getInputTableFromQuerySet(String querySet, Jdbi jdbi) {
        try (Handle handle = jdbi.open()) {
            return handle.createQuery(querySet)
                    .mapToBean(HttpsDownloadInputTable.class)
                    .one();
        }
    }


    @Override
    public boolean executeIf() throws Exception {
        return httpsDownload.getCondition();
    }
}
