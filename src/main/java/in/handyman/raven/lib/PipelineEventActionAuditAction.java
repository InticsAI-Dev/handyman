package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.ObjectMapper;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.PipelineEventActionAudit;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

import in.handyman.raven.util.CommonQueryUtil;
import org.jdbi.v3.core.Jdbi;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
    actionName = "PipelineEventActionAudit"
)
public class PipelineEventActionAuditAction implements IActionExecution {
  private final ActionExecutionAudit action;

  private final Logger log;

  private final PipelineEventActionAudit pipelineEventActionAudit;

  private final Marker aMarker;

  public PipelineEventActionAuditAction(final ActionExecutionAudit action, final Logger log,
      final Object pipelineEventActionAudit) {
    this.pipelineEventActionAudit = (PipelineEventActionAudit) pipelineEventActionAudit;
    this.action = action;
    this.log = log;
    this.aMarker = MarkerFactory.getMarker(" PipelineEventActionAudit:"+this.pipelineEventActionAudit.getName());
  }
  @Override
  public void execute() throws Exception {
    log.info(aMarker, "Assign Action for {} has been started", pipelineEventActionAudit.getName());

    final String dbSrc = pipelineEventActionAudit.getResourceConn();
    log.info(aMarker, "Input name: {}, source-database: {}", pipelineEventActionAudit.getName(), dbSrc);
    log.debug(aMarker, "SQL input post parameter ingestion:\n{}", pipelineEventActionAudit.getQuerySet());

    final Map<String, String> contextNode = action.getContext();

    try {
      final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(dbSrc);
      ObjectMapper objectMapper = new ObjectMapper(); // Jackson mapper

      jdbi.useTransaction(handle -> {
        final List<String> formattedQuery = CommonQueryUtil.getFormattedQuery(pipelineEventActionAudit.getQuerySet());

        for (String sqlToExecute : formattedQuery) {
          log.info(aMarker, "Executing SQL: {}", sqlToExecute);

          String transactionId = action.getContext().get("transaction_id");
          String pipelineName = contextNode.getOrDefault("pipelineName", action.getPipelineName());
          String context = objectMapper.writeValueAsString(contextNode);
          Long tenantId = Long.valueOf(action.getContext().get("tenant_id"));
          Long rootpipelineId = Long.valueOf(action.getRootPipelineId());

          handle.createUpdate(
                          "INSERT INTO audit.pipeline_plugin_audit " +
                                  "(transaction_id, pipeline_name, start_time, end_time, context, tenant_id, rootpipeline_id) " +
                                  "VALUES (:transactionId, :pipelineName, :startTime, :endTime, :context::jsonb, :tenantId, :rootpipelineId)"
                  ) // Note ::jsonb cast
                  .bind("transactionId", transactionId)
                  .bind("pipelineName", pipelineName)
                  .bind("startTime", LocalDateTime.now())
                  .bind("endTime", LocalDateTime.now())
                  .bind("context", context) // Bound as String, cast as jsonb
                  .bind("tenantId", tenantId)
                  .bind("rootpipelineId", rootpipelineId)
                  .execute();
        }
      });

      log.info(aMarker, "Assign Action for {} has been completed", pipelineEventActionAudit.getName());

    } catch (Exception e) {
      log.error(aMarker, "The exception occurred", e);
      throw new HandymanException("Failed to execute", e, String.valueOf(pipelineEventActionAudit));
    }

  }

  @Override
  public boolean executeIf() throws Exception {
    return pipelineEventActionAudit.getCondition();
  }
}
