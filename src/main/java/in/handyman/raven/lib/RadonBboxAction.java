package in.handyman.raven.lib;

import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;

import in.handyman.raven.lib.model.RadonBbox;
import in.handyman.raven.lib.model.radonbbox.RadonBboxConsumerProcess;
import in.handyman.raven.lib.model.radonbbox.RadonBboxInputEntity;
import in.handyman.raven.lib.model.radonbbox.RadonBboxOutputEntity;

import in.handyman.raven.util.ExceptionUtil;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.stream.Collectors;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;


/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "RadonBbox"
)
public class RadonBboxAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final RadonBbox radonBbox;

    private final Marker aMarker;

    public RadonBboxAction(final ActionExecutionAudit action, final Logger log,
                           final Object radonBbox) {
        this.radonBbox = (RadonBbox) radonBbox;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" RadonBbox:" + this.radonBbox.getName());
    }

    @Override
    public void execute() throws Exception {

        try {

            log.info(aMarker, "Radon Bbox Action for {}  has started", radonBbox.getName());
            final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(radonBbox.getResourceConn());
            jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL)); //for handling null values
            //3. initiate Copro processor and Copro urls change the url to integrated noise model
            final List<URL> urls = Optional.ofNullable(radonBbox.getEndpoint()).map(s -> Arrays.stream(s.split(",")).map(s1 -> {
                try {
                    return new URL(s1);
                } catch (MalformedURLException e) {
                    log.error("Error in processing the URL {}", s1, e);
                    throw new HandymanException("Error in processing the URL", e, action);
                }
            }).collect(Collectors.toList())).orElse(Collections.emptyList());
            log.info("Urls for the Integrated radon bbox model :  {}", urls);
            //5. build insert prepare statement with output table columns
//

            final String insertQuery = "INSERT INTO " + radonBbox.getOutputTable() +
                    "(created_on,created_user_id, last_updated_on, last_updated_user_id,sor_container_name,sor_item_name, answer, bbox, paper_no, " +
                    "origin_id, group_id, tenant_id, root_pipeline_id, batch_id, model_registry," +
                    "extracted_image_unit, image_dpi, image_height, image_width) "
                    + " VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?  ,?,?,?,?)";


            final CoproProcessor<RadonBboxInputEntity, RadonBboxOutputEntity> coproProcessor =
                    new CoproProcessor<>(new LinkedBlockingQueue<>(),
                            RadonBboxOutputEntity.class,
                            RadonBboxInputEntity.class,
                            jdbi, log,
                            new RadonBboxInputEntity(), urls, action);

            coproProcessor.startProducer(radonBbox.getQuerySet(), Integer.valueOf(action.getContext().get("read.batch.size")));
            log.info("start producer method from copro processor ");
            Thread.sleep(1000);

            //8. call the method start consumer from coproprocessor
            coproProcessor.startConsumer(insertQuery, Integer.valueOf(action.getContext().get("bbox.consumer.API.count")), Integer.valueOf(action.getContext().get("write.batch.size")), new RadonBboxConsumerProcess(log, aMarker, action));
            log.info("start consumer method from copro processor ");


        } catch (Exception e) {
            log.error("Error in the Integrated noise model action {}", ExceptionUtil.toString(e));
            throw new HandymanException("Integrated noise model action failed ", e, action);


        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return radonBbox.getCondition();
    }
}
