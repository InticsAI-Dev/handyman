package in.handyman.raven.lib;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.core.encryption.SecurityEngine;
import in.handyman.raven.core.encryption.inticsgrity.InticsIntegrity;
import in.handyman.raven.lib.model.PostProcessingExecutor;
import in.handyman.raven.lib.model.scalar.ValidatorByBeanShellExecutor;
import in.handyman.raven.util.CommonQueryUtil;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.Handle;
import org.jdbi.v3.core.statement.PreparedBatch;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.List;
import java.util.stream.Collectors;

import static in.handyman.raven.core.encryption.EncryptionConstants.ENCRYPT_ITEM_WISE_ENCRYPTION;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "PostProcessingExecutor"
)
public class PostProcessingExecutorAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final PostProcessingExecutor postProcessingExecutor;

    private final Marker aMarker;

    private List<PostProcessingExecutorInput> postProcessingExecutorInputs;

    private static final String POST_PROCESSING_THREAD_COUNT = "post.processing.thread.count";

    public PostProcessingExecutorAction(ActionExecutionAudit action, Logger log, Object executor) {
        this.action = action;
        this.log = log;
        this.postProcessingExecutor = (PostProcessingExecutor) executor;
        this.aMarker = MarkerFactory.getMarker("PostProcessingExecutor:" + postProcessingExecutor.getName());
    }

    @Override
    public void execute() throws Exception {

        Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(postProcessingExecutor.getResourceConn());
        InticsIntegrity crypt = SecurityEngine.getInticsIntegrityMethod(action, log);
        String itemWiseEncryptionActivator = action.getContext().getOrDefault(ENCRYPT_ITEM_WISE_ENCRYPTION, "true");
        int postProcessingThreadCount = Integer.parseInt(action.getContext().getOrDefault(POST_PROCESSING_THREAD_COUNT, "10"));

        boolean encryptEnabled = Boolean.parseBoolean(itemWiseEncryptionActivator);
        log.info(aMarker, "PostProcessingExecutor started with encryptEnabled: {}", encryptEnabled);

        jdbi.useTransaction(handle -> fetchAndDecryptInputs(handle, crypt, encryptEnabled));

        log.info(aMarker, "Fetched {} rows for post-processing", postProcessingExecutorInputs.size());
        postProcessingExecutorInputs = new ValidatorByBeanShellExecutor(postProcessingExecutorInputs, action, log, postProcessingThreadCount).doRowWiseValidator();
        log.info(aMarker, "Total Rows present after post-processing : {}", postProcessingExecutorInputs.size());

        postProcessingExecutorInputs.forEach(input -> processEncryption(input, crypt, encryptEnabled));

        String outputTable = postProcessingExecutor.getOutputTable();
        log.info(aMarker, "Started batch insert into {}", outputTable);
        jdbi.useHandle(handle -> executeBatchInsert(handle, postProcessingExecutorInputs));
        log.info(aMarker, "Batch insert completed into {}", outputTable);
    }

    private void fetchAndDecryptInputs(Handle handle, InticsIntegrity crypt, boolean encryptEnabled) {
        List<String> queries = CommonQueryUtil.getFormattedQuery(postProcessingExecutor.getQuerySet());
        postProcessingExecutorInputs = queries.stream()
                .flatMap(sql -> handle.createQuery(sql)
                        .mapToBean(PostProcessingExecutorInput.class)
                        .stream())
                .collect(Collectors.toList());
        log.info(aMarker, "Total rows fetched: {}", postProcessingExecutorInputs.size());
        if (encryptEnabled) {
            postProcessingExecutorInputs.forEach(input -> {
                if ("t".equalsIgnoreCase(input.getIsEncrypted())) {
                    String decrypted = crypt.decrypt(
                            input.getExtractedValue(),
                            input.getEncryptionPolicy(),
                            input.getSorItemName()
                    );
                    input.setExtractedValue(decrypted);
                }
            });
        }
    }

    private void processEncryption(PostProcessingExecutorInput input, InticsIntegrity crypt, boolean encryptEnabled) {
        if ("multi_value".equalsIgnoreCase(input.getLineItemType())) {
            handleMultiValue(input, crypt, encryptEnabled);
        } else if (encryptEnabled && "t".equalsIgnoreCase(input.getIsEncrypted())) {
            input.setExtractedValue(
                    crypt.encrypt(
                            input.getExtractedValue(),
                            input.getEncryptionPolicy(),
                            input.getSorItemName()
                    )
            );
        }
    }

    private void handleMultiValue(PostProcessingExecutorInput input, InticsIntegrity crypt, boolean encryptEnabled) {
        String[] parts = input.getExtractedValue().split(",");
        List<String> reEncrypted = java.util.Arrays.stream(parts)
                .map(String::trim)
                .map(val -> encryptEnabled && "t".equalsIgnoreCase(input.getIsEncrypted())
                        ? crypt.encrypt(val, input.getEncryptionPolicy(), input.getSorItemName())
                        : val)
                .collect(Collectors.toList());
        input.setExtractedValue(String.join(",", reEncrypted));
    }

    private void executeBatchInsert(Handle handle, List<PostProcessingExecutorInput> rows) {
        String sql = buildInsertSQL();
        try (PreparedBatch batch = handle.prepareBatch(sql)) {
            rows.forEach(row -> {
                batch.bind("createdUserId", action.getContext().get("created_user_id"));
                batch.bindBean(row);
                batch.bind("groupId", Long.valueOf(postProcessingExecutor.getGroupId()));
                batch.bind("batchId", postProcessingExecutor.getBatchId());
                batch.add();
            });
            int[] counts = batch.execute();
            log.info(aMarker, "Batch inserted {} records", counts.length);
        } catch (Exception e) {
            log.error(aMarker, "Batch insert failed", e);
            HandymanException.insertException("Error in batch insert into " + postProcessingExecutor.getOutputTable(), new HandymanException(e), action);
        }
    }

    private String buildInsertSQL() {
        return "INSERT INTO " + postProcessingExecutor.getOutputTable() + " (" +
                "created_on, created_user_id, last_updated_on, last_updated_user_id, tenant_id, aggregated_score, masked_score, group_id, origin_id, paper_no, predicted_value, vqa_score, " +
                "rank, sor_item_attribution_id, sor_item_name, document_id, acc_transaction_id, b_box, root_pipeline_id, frequency, question_id, synonym_id, model_registry, batch_id) VALUES (" +
                "now(), :createdUserId, now(), :createdUserId, :tenantId, :aggregatedScore, :maskedScore, :groupId, :originId, :paperNo, :extractedValue, :vqaScore, " +
                ":rank, :sorItemAttributionId, :sorItemName, :documentId, :accTransactionId, :bbox, :rootPipelineId, :frequency, :questionId, :synonymId, :modelRegistry, :batchId)";
    }

    @Override
    public boolean executeIf() throws Exception {
        return postProcessingExecutor.getCondition();
    }

    @AllArgsConstructor
    @NoArgsConstructor
    @Data
    @Builder
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static class PostProcessingExecutorInput {
        private Long tenantId;
        private double aggregatedScore;
        private double maskedScore;
        private String originId;
        private Integer paperNo;
        private String extractedValue;
        private double vqaScore;
        private Integer rank;
        private Integer sorItemAttributionId;
        private String sorItemName;
        private String documentId;
        private Long accTransactionId;
        private String bbox;
        private Long rootPipelineId;
        private Long frequency;
        private Long questionId;
        private Long synonymId;
        private String modelRegistry;
        private String encryptionPolicy;
        private String isEncrypted;
        private String lineItemType;
    }
}