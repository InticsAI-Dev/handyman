package in.handyman.raven.lib;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.ObjectMapper;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.LoadBalancerQueueUpdate;
import in.handyman.raven.util.InstanceUtil;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import org.jdbi.v3.core.Jdbi;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.List;
import java.util.Objects;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "LoadBalancerQueueUpdate"
)
public class LoadBalancerQueueUpdateAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final ObjectMapper mapper = new ObjectMapper();
    private static final MediaType MediaTypeJSON = MediaType
            .parse("application/json; charset=utf-8");


    private final LoadBalancerQueueUpdate loadBalancerQueueUpdate;

    private final Marker aMarker;

    public LoadBalancerQueueUpdateAction(final ActionExecutionAudit action, final Logger log,
                                         final Object loadBalancerQueueUpdate) {
        this.loadBalancerQueueUpdate = (LoadBalancerQueueUpdate) loadBalancerQueueUpdate;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" LoadBalancerQueueUpdate:" + this.loadBalancerQueueUpdate.getName());
    }

    @Override
    public void execute() throws Exception {

        String loadBalancerQueueUpdateName = loadBalancerQueueUpdate.getName();
        log.info(aMarker, "Load Balancer Queue Update Action for {} has been started", loadBalancerQueueUpdateName);
        final OkHttpClient httpclient = InstanceUtil.createOkHttpClient();

        String resourceConn = loadBalancerQueueUpdate.getResourceConn();
        final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(resourceConn);
        LoadBalancerQueryResult loadBalancerQueryResult = jdbi.withHandle(handle -> handle.createQuery(loadBalancerQueueUpdate.getQuerySet()).mapToBean(LoadBalancerQueryResult.class).first());

        Long tenantId = loadBalancerQueryResult.tenantId;

        String ipAddress = loadBalancerQueueUpdate.getIpAddress();
        String port = loadBalancerQueueUpdate.getPort();

        LoadBalancerInputTable loadBalancerInputTable = LoadBalancerInputTable.builder()
                .endpointId(loadBalancerQueryResult.getEndpointId())
                .batchId(loadBalancerQueryResult.getLoadBalancerBatchId())
                .transactionId(loadBalancerQueryResult.getTransactionId())
                .completedFileNames(loadBalancerQueryResult.getCompletedFiles())
                .failedFilesNames(loadBalancerQueryResult.getFailedFiles())
                .build();

        String loadBalancerQueueUpdateUrl = ipAddress + ":" + port + "/api/v1/" + "endpointQueueUpdate?tenantId=" + tenantId;
        Request loadBalancerUpdateRequest = new Request.Builder()
                .url(loadBalancerQueueUpdateUrl)
                .post(RequestBody.create(mapper.writeValueAsString(loadBalancerInputTable), MediaTypeJSON))
                .header("accept", "*/*")
                .build();

        try (Response updateResponse = httpclient.newCall(loadBalancerUpdateRequest).execute()) {
            String updateResponseBody = Objects.requireNonNull(updateResponse.body()).string();
            if (updateResponse.isSuccessful()) {
                log.info(aMarker, "The Successful Response for refresh token generation {} --> {}", loadBalancerQueueUpdateName, updateResponseBody);
            }
        } catch (Exception e) {
            log.error(aMarker, "The Exception occurred ", e);
            throw new HandymanException("Failed to execute to load balancer queue update request", e, action);
        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return loadBalancerQueueUpdate.getCondition();
    }

    @AllArgsConstructor
    @NoArgsConstructor
    @Data
    @Builder
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static class LoadBalancerQueryResult {

        private Long tenantId;
        private String transactionId;
        private Long loadBalancerBatchId;
        private Long endpointId;
        private List<String> completedFiles;
        private List<String> failedFiles;

    }

    @AllArgsConstructor
    @NoArgsConstructor
    @Data
    @Builder
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static class LoadBalancerInputTable {

        private Long endpointId;
        private Long batchId;
        private String transactionId;
        private List<String> completedFileNames;
        private List<String> failedFilesNames;

    }

}
