package in.handyman.raven.lib;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import okhttp3.MediaType;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.DataExtraction;

import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import in.handyman.raven.util.CommonQueryUtil;
import in.handyman.raven.util.InstanceUtil;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import org.jdbi.v3.core.Jdbi;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "DataExtraction"
)
public class DataExtractionAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final DataExtraction dataExtraction;
    private static final MediaType MediaTypeJSON = MediaType
            .parse("application/json; charset=utf-8");
    private final Marker aMarker;
    private final ObjectMapper mapper = new ObjectMapper();

    private final String URI;


    public DataExtractionAction(final ActionExecutionAudit action, final Logger log,
                                final Object dataExtraction) {
        this.dataExtraction = (DataExtraction) dataExtraction;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" DataExtraction:" + this.dataExtraction.getName());
        this.URI = action.getContext().get("copro.data-extraction.url");
    }

    @Override
    public void execute() throws Exception {
        log.info(aMarker, "<-------Data extraction Action for {} has been started------->" + dataExtraction.getName());
        final OkHttpClient httpclient = InstanceUtil.createOkHttpClient();

        final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(dataExtraction.getResourceConn());
        final List<Map<String, Object>> requestInfos = new ArrayList<>();

        jdbi.useTransaction(handle -> {
            final List<String> formattedQuery = CommonQueryUtil.getFormattedQuery(dataExtraction.getValue());
            formattedQuery.forEach(sqlToExecute -> {
                requestInfos.addAll(handle.createQuery(sqlToExecute).mapToMap().stream().collect(Collectors.toList()));
            });
        });

        for (var requestInfo : requestInfos) {
            final String inputFilepathString = Optional.ofNullable(requestInfo.get("inputfilepath")).map(String::valueOf).orElse("[]");
            final String outputDirString = Optional.ofNullable(requestInfo.get("data_extraction_dest_path")).map(String::valueOf).orElse("[]");
            final ObjectNode objectNode = mapper.createObjectNode();
            objectNode.put("inputFilePath", inputFilepathString);
            // objectNode.put("outputDir", outputDirString);
            log.info(aMarker, " Input variables id : {}", action.getActionId());

            // build a request
            Request request = new Request.Builder().url(URI)
                    .post(RequestBody.create(objectNode.toString(), MediaTypeJSON)).build();
            log.debug(aMarker, "Request has been build with the parameters \n URI : {} \n Input-File-Path : {} \n Output-Directory : {} \n", URI, inputFilepathString, outputDirString);
            String name = dataExtraction.getName();
            log.info(aMarker, "The Request Details : {}", request);
            try (Response response = httpclient.newCall(request).execute()) {
                String responseBody = response.body().string();
                if (response.isSuccessful()) {
                    log.info(aMarker, "The Successful Response for {} --> {}", name, responseBody);
                    String content = Optional.ofNullable(mapper.readValue(responseBody, AssetAttributionResponse.class).getPageContent()).orElse("");
                    content = cleanTextContent(content);
                    String filePath = Optional.ofNullable(mapper.readTree(responseBody).get("filePath")).map(JsonNode::toString).orElse("[]");
                    action.getContext().put(dataExtraction.getName() + ".extractedText", content);
                    action.getContext().put(dataExtraction.getName() + ".filePath", filePath);
                } else {
                    log.info(aMarker, "The Failure Response {} --> {}", name, responseBody);
                    action.getContext().put(name.concat(".error"), "true");
                    action.getContext().put(name.concat(".errorMessage"), responseBody);
                }
                action.getContext().put(name + ".isSuccessful", String.valueOf(response.isSuccessful()));
            } catch (Exception e) {
                log.error(aMarker, "The Exception occurred ", e);
                action.getContext().put(name + ".isSuccessful", "false");
                throw new HandymanException("Failed to execute", e);
            }
            log.info(aMarker, "<-------Data extraction Action for {} has been completed------->" + dataExtraction.getName());

        }

    }

    private static String cleanTextContent(String text) {
        // strips off all non-ASCII characters
        text = text.replaceAll("[^\\x00-\\x7F]", "");
        // erases all the ASCII control characters
        text = text.replaceAll("[\\p{Cntrl}&&[^\r\n\t]]", "");
        // removes non-printable characters from Unicode
        text = text.replaceAll("\\p{C}", "");
        text = text.replaceAll("[^ -~]", "");
        text = text.replaceAll("[^\\p{ASCII}]", "");
        text = text.replaceAll("\\\\x\\p{XDigit}{2}", "");
        text = text.replaceAll("\\\\n", "");
        text = text.replaceAll("[^\\x20-\\x7e]", "");
        return text;
    }

    @Override
    public boolean executeIf() throws Exception {
        return dataExtraction.getCondition();
    }

    @Data
    @AllArgsConstructor
    @Builder
    @NoArgsConstructor
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static class AssetAttributionResponse {
        private String pageContent;
    }
}