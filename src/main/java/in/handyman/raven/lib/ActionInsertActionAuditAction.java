package in.handyman.raven.lib;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.InsertActionAudit;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

import in.handyman.raven.util.CommonQueryUtil;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.result.ResultIterable;
import org.jdbi.v3.core.statement.Query;
import org.jdbi.v3.core.statement.Update;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
    actionName = "InsertActionAudit"
)
public class ActionInsertActionAuditAction implements IActionExecution {
  private final ActionExecutionAudit action;

  private final Logger log;

  private final InsertActionAudit insertActionAudit;

  private final Marker aMarker;

  public  ActionInsertActionAuditAction(final ActionExecutionAudit action, final Logger log,
                                       final Object insertActionAudit) {
    this.insertActionAudit = (InsertActionAudit) insertActionAudit;
    this.action = action;
    this.log = log;
    this.aMarker = MarkerFactory.getMarker(" InsertActionAudit:" + this.insertActionAudit.getName());
  }

  @Override
  public void execute() throws Exception {
    log.info(aMarker, "Assign Action for {} has been started", insertActionAudit.getName());

    final String dbSrc = insertActionAudit.getResourceConn();
    log.info(aMarker, "Input name: {}, source-database: {}", insertActionAudit.getName(), dbSrc);
    log.debug(aMarker, "SQL input post parameter ingestion:\n{}", insertActionAudit.getQuerySet());

    final Map<String, String> contextNode = action.getContext();

    try {
      final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(dbSrc);
      jdbi.useTransaction(handle -> {
        final List<String> formattedQuery = CommonQueryUtil.getFormattedQuery(insertActionAudit.getQuerySet());

        for (String sqlToExecute : formattedQuery) {
          log.info(aMarker, "Executing SQL: {}", sqlToExecute);

          // Sample values - replace these with actual values as needed
          String transactionId = action.getContext().get("transaction_id");
          String processLoadType = action.getProcessName();
          String pipelineName = contextNode.getOrDefault("pipelineName", action.getPipelineName());
          String context = contextNode.toString();
          Long tenantId = Long.valueOf(action.getContext().get("tenant_id"));
          Long rootpipelineId=Long.valueOf(action.getRootPipelineId());


          handle.createUpdate(
                          "INSERT INTO audit.pipeline_plugin_audit " +
                                  "(transaction_id, process_load_type, pipeline_name, start_time, end_time, context, tenant_id,rootpipeline_id) " +
                                  "VALUES (:transactionId, :processLoadType, :pipelineName, :startTime, :endTime, :context, :tenantId,:rootpipelineId)"
                  )
                  .bind("transactionId", transactionId)
                  .bind("processLoadType", processLoadType)
                  .bind("pipelineName", pipelineName)
                  .bind("startTime", LocalDateTime.now())
                  .bind("endTime", LocalDateTime.now())
                  .bind("context", context)
                  .bind("tenantId", tenantId)
                  .bind("rootpipelineId",rootpipelineId)
                  .execute();
        }
      });

      log.info(aMarker, "Assign Action for {} has been completed", insertActionAudit.getName());

    } catch (Exception e) {
      log.error(aMarker, "The exception occurred", e);
      throw new HandymanException("Failed to execute", e, String.valueOf(insertActionAudit));
    }

}

  @Override
  public boolean executeIf() throws Exception {
    return insertActionAudit.getCondition();
  }

  @AllArgsConstructor
  @NoArgsConstructor
  @Data
  @Builder
  @JsonIgnoreProperties(ignoreUnknown = true)
  public static class PluginNameActionAudit {
    private String transactionId;
    private String processLoadType;
    private String pipelineName;
    private LocalDateTime startTime;
    private LocalDateTime endTime;
    private String context;
    private Long tenantId;
  }
}
