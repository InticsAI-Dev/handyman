package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.TritonModelLoadUnload;
import in.handyman.raven.util.ExceptionUtil;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import org.jdbi.v3.core.Jdbi;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.Map;
import java.util.Objects;
import java.util.concurrent.TimeUnit;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "TritonModelLoadUnload"
)
public class TritonModelLoadUnloadAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final TritonModelLoadUnload tritonModelLoadUnload;

    private final Marker aMarker;
    private final OkHttpClient httpclient = new OkHttpClient.Builder()
            .connectTimeout(10, TimeUnit.MINUTES)
            .writeTimeout(10, TimeUnit.MINUTES)
            .readTimeout(10, TimeUnit.MINUTES)
            .build();
    private final ObjectMapper objectMapper = new ObjectMapper();

    private static final MediaType MEDIA_TYPE = MediaType
            .parse("application/json; charset=utf-8");

    public TritonModelLoadUnloadAction(final ActionExecutionAudit action, final Logger log,
                                       final Object tritonModelLoadUnload) {
        this.tritonModelLoadUnload = (TritonModelLoadUnload) tritonModelLoadUnload;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" TritonModelLoadUnload:" + this.tritonModelLoadUnload.getName());
    }

    @Override
    public void execute() throws Exception {
        String actionName = tritonModelLoadUnload.getName();
        String loadType = tritonModelLoadUnload.getLoadType();
        String endPoint = tritonModelLoadUnload.getEndPoint();

        log.info(aMarker, "Triton model {} API call for {} has been started------->", loadType, actionName);

        final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(tritonModelLoadUnload.getResourceConn());
        String configVariable = tritonModelLoadUnload.getConfigVariable();

        String load = "load";
        Request request;
        if (loadType.equalsIgnoreCase(load)) {

            Map<String, Object> configJson = getTritonModelConfig(jdbi, configVariable);
            String configString = configJson.get("value").toString().replaceAll("\n", "");

            final ObjectNode configNode = objectMapper.createObjectNode();

            configNode.put("config", configString);
            System.out.println(configString);


            final ObjectNode parameterNode = objectMapper.createObjectNode();
            parameterNode.set("parameters", configNode);
            System.out.println(objectMapper.writeValueAsString(parameterNode));

            request = new Request.Builder().url(endPoint).post(RequestBody.create(objectMapper.writeValueAsString(parameterNode), MEDIA_TYPE)).build();
            if (log.isInfoEnabled()) {
                log.info(aMarker, "Request has been build with the parameters for model load with \n ModelUrl  {} and configString {}", endPoint, configString);
            }
        } else {
            if (log.isInfoEnabled()) {
                log.info(aMarker, "Request has been build with the parameters for model unload with \n ModelUrl  {} ", endPoint);
            }
            request = new Request.Builder().url(endPoint).post(okhttp3.internal.Util.EMPTY_REQUEST).build();
        }
        doTritonModelApiCall(actionName, loadType, request);
    }

    private void doTritonModelApiCall(final String actionName, final String loadType, final Request request) {
        try (Response response = httpclient.newCall(request).execute()) {
            String responseBody = Objects.requireNonNull(response.body()).string();
            if (response.isSuccessful()) {
                log.info(aMarker, "The Successful Response for {} --> {}", actionName, responseBody);
            } else {
                log.error(aMarker, "The Failure Response {} --> {}", actionName, responseBody);
            }
            log.info(aMarker, "Triton model {} API call for {} has been completed", loadType, actionName);
        } catch (Exception e) {
            log.error(aMarker, "The Exception occurred in model {} with exception {}", loadType, ExceptionUtil.toString(e));
            throw new HandymanException("The Exception occurred in model " + loadType + "for " + actionName, e, action);
        }
    }

    private Map<String, Object> getTritonModelConfig(final Jdbi jdbi, final String configVariable) {
        return jdbi.withHandle(handle -> {
            String query = "SELECT value FROM config.triton_config where variable = :variable";
            return handle.createQuery(query).bind("variable", configVariable).mapToMap().one();
        });
    }

    @Override
    public boolean executeIf() throws Exception {
        return tritonModelLoadUnload.getCondition();
    }
}
