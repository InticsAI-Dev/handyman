package in.handyman.raven.lib;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.CoproProcessor;
import in.handyman.raven.lib.model.HwDetection;
import in.handyman.raven.lib.model.hwDectection.*;
import in.handyman.raven.lib.model.triton.TritonInputRequest;
import in.handyman.raven.lib.model.triton.TritonRequest;
import in.handyman.raven.util.ExceptionUtil;
import okhttp3.*;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.*;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "HwDetection"
)
public class HwDetectionAction implements IActionExecution {
  private final ActionExecutionAudit action;

  private final Logger log;

  private static HwDetection hwDetection = new HwDetection();

  private final Marker aMarker;
  public static String httpClientTimeout = new String();

  public HwDetectionAction(final ActionExecutionAudit action, final Logger log,
                           final Object hwDetection) {
    this.hwDetection = (HwDetection) hwDetection;
    this.action = action;
    this.log = log;
    this.httpClientTimeout = action.getContext().get("okhttp.client.timeout");
    this.aMarker = MarkerFactory.getMarker(" HwDetection:" + this.hwDetection.getName());
  }

  @Override
  public void execute() throws Exception {

    try {
      final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(hwDetection.getResourceConn());
      jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));

      log.info(aMarker, "Handwritten Classification Action for {} has been started", hwDetection.getName());
      final String insertQuery = "INSERT INTO paper_classification.paper_classification_result(created_on, created_user_id, last_updated_on, last_updated_user_id, tenant_id, origin_id, paper_no, template_id, model_id, document_type, status, stage, message, group_id, root_pipeline_id, confidence_score,model_name,model_version)" +
              "values(now(),?,now(),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
      final List<URL> urls = Optional.ofNullable(action.getContext().get("copro.hw-detection.url")).map(s -> Arrays.stream(s.split(",")).map(url -> {
        try {
          return new URL(url);
        } catch (MalformedURLException e) {
          log.error("Error in processing the URL {}", url, e);
          throw new HandymanException("Error in processing the URL", e, action);
        }
      }).collect(Collectors.toList())).orElse(Collections.emptyList());
      log.info("urls used in hw detection macro {}", urls);
      final CoproProcessor<HwClassificationInputTable, HwClassificationOutputTable> coproProcessor =
              new CoproProcessor<>(new LinkedBlockingQueue<>(),
                      HwClassificationOutputTable.class,
                      HwClassificationInputTable.class,
                      jdbi, log,
                      new HwClassificationInputTable(), urls, action);
      coproProcessor.startProducer(hwDetection.getQuerySet(), Integer.valueOf(action.getContext().get("read.batch.size")));
      log.info("hwdetection read batch size {} and queryset from macro {} ", Integer.valueOf(action.getContext().get("read.batch.size")), hwDetection.getQuerySet());
      Thread.sleep(1000);
      coproProcessor.startConsumer(insertQuery, Integer.valueOf(action.getContext().get("paper.classification.consumer.API.count")), Integer.valueOf(action.getContext().get("write.batch.size")), new HwClassificationConsumerProcess(log, aMarker, action));
      log.info(aMarker, " Handwritten Classification has been completed {}  ", hwDetection.getName());
    } catch (Exception e) {
      action.getContext().put(hwDetection.getName() + ".isSuccessful", "false");
      log.error(aMarker, "Error at handwritten classification execute method {}", ExceptionUtil.toString(e));
      throw new HandymanException("Error at handwritten classification execute method ", e, action);
    }
  }

  @Override
  public boolean executeIf() throws Exception {
    return hwDetection.getCondition();
  }

}