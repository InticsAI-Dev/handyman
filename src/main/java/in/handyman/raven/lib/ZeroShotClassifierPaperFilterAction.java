package in.handyman.raven.lib;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.ZeroShotClassifierPaperFilter;
import in.handyman.raven.util.ExceptionUtil;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import okhttp3.*;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.json.JSONArray;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.*;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "ZeroShotClassifierPaperFilter"
)
public class ZeroShotClassifierPaperFilterAction implements IActionExecution {
    public final ActionExecutionAudit action;

    public final Logger log;
    public final ZeroShotClassifierPaperFilter zeroShotClassifierPaperFilter;

    public final Marker aMarker;

    public ZeroShotClassifierPaperFilterAction(final ActionExecutionAudit action, final Logger log,
                                               final Object zeroShotClassifierPaperFilter) {
        this.zeroShotClassifierPaperFilter = (ZeroShotClassifierPaperFilter) zeroShotClassifierPaperFilter;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" ZeroShotClassifierPaperFilter:" + this.zeroShotClassifierPaperFilter.getName());
    }

    @Override
    public void execute() throws Exception {
        try {
        final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(zeroShotClassifierPaperFilter.getResourceConn());
        jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
        log.info(aMarker, "Phrase match paper filter Action for {} has been started", zeroShotClassifierPaperFilter.getName());
        final String processId = Optional.ofNullable(zeroShotClassifierPaperFilter.getProcessID()).map(String::valueOf).orElse(null);
        final String insertQuery = "INSERT INTO paper.zero_shot_classifier_filtering_result_" + processId + "(origin_id,group_id,paper_no,synonym,confidence_score,truth_entity,status,stage,message, created_on, root_pipeline_id) " +
                " VALUES(?,?,?,?,?,?,?,?,?,now() ,?)";
        final List<URL> urls = Optional.ofNullable(action.getContext().get("copro.paper-filtering-zero-shot-classifier.url")).map(s -> Arrays.stream(s.split(",")).map(s1 -> {
            try {
                return new URL(s1);
            } catch (MalformedURLException e) {
                log.error("Error in processing the URL ", e);
                throw new RuntimeException(e);
            }
        }).collect(Collectors.toList())).orElse(Collections.emptyList());

            final CoproProcessor<PaperFilteringZeroShotClassifierInputTable, PaperFilteringZeroShotClassifierOutputTable> coproProcessor =
                    new CoproProcessor<>(new LinkedBlockingQueue<>(),
                            PaperFilteringZeroShotClassifierOutputTable.class,
                            PaperFilteringZeroShotClassifierInputTable.class,
                            jdbi, log,
                            new PaperFilteringZeroShotClassifierInputTable(), urls, action);
            coproProcessor.startProducer(zeroShotClassifierPaperFilter.getQuerySet(), Integer.parseInt(zeroShotClassifierPaperFilter.getReadBatchSize()));
            Thread.sleep(1000);
            coproProcessor.startConsumer(insertQuery, Integer.parseInt(zeroShotClassifierPaperFilter.getThreadCount()),
                    Integer.parseInt(zeroShotClassifierPaperFilter.getWriteBatchSize()),
                    new ZeroShotConsumerProcess(log, aMarker, action));
            log.info(aMarker, " Zero shot classifier has been completed {}  ", zeroShotClassifierPaperFilter.getName());

        } catch (Exception e) {
            log.error(aMarker, "Error in zero shot paper filter action", e);
            throw new HandymanException("Error in zero shot paper filter action", e, action);
        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return zeroShotClassifierPaperFilter.getCondition();
    }

    public static class ZeroShotConsumerProcess implements CoproProcessor.ConsumerProcess<PaperFilteringZeroShotClassifierInputTable, PaperFilteringZeroShotClassifierOutputTable> {
        private final Logger log;
        private final Marker aMarker;
        private final ObjectMapper mapper = new ObjectMapper();
        private static final MediaType MediaTypeJSON = MediaType
                .parse("application/json; charset=utf-8");

        private static final String actionName = "ZERO_SHOT_CLASSIFIER";

        public final ActionExecutionAudit action;
        final OkHttpClient httpclient = new OkHttpClient.Builder()
                .connectTimeout(10, TimeUnit.MINUTES)
                .writeTimeout(10, TimeUnit.MINUTES)
                .readTimeout(10, TimeUnit.MINUTES)
                .build();

        public ZeroShotConsumerProcess(final Logger log, final Marker aMarker, ActionExecutionAudit action) {
            this.log = log;
            this.aMarker = aMarker;
            this.action = action;
        }

        @Override
        public List<PaperFilteringZeroShotClassifierOutputTable> process(URL endpoint, PaperFilteringZeroShotClassifierInputTable entity) {
            List<PaperFilteringZeroShotClassifierOutputTable> parentObj = new ArrayList<>();
            final ObjectNode objectNode = mapper.createObjectNode();
            objectNode.put("pageContent", entity.pageContent);
            try {
//                objectNode.put("truthEntity", entity.truthEntity);
                objectNode.set("keysToFilter", mapper.readTree(entity.truthPlaceholder));
                objectNode.put("originId", entity.originId);
                objectNode.put("groupId", entity.groupId);
                objectNode.put("paperNo", entity.paperNo);
                log.info(aMarker, " Input variables id : {}", action.getActionId());
                Request request = new Request.Builder().url(endpoint)
                        .post(RequestBody.create(objectNode.toString(), MediaTypeJSON)).build();
                log.debug(aMarker, "Request has been build with the parameters \n URI : {} \n page content : {} \n key-filters : {} ", endpoint, entity.getPageContent(), entity.getTruthPlaceholder());
                log.debug(aMarker, "The Request Details: {}", request);
                coproAPIProcessor(entity, parentObj, request);
            } catch (JsonProcessingException e) {
                log.error("error in the zero-shot classifier paper filter copro api call {}", e.toString());
            }
            return parentObj;
        }

        private void coproAPIProcessor(PaperFilteringZeroShotClassifierInputTable entity, List<PaperFilteringZeroShotClassifierOutputTable> parentObj, Request request) {
            try (Response response = httpclient.newCall(request).execute()) {
                String responseBody = Objects.requireNonNull(response.body()).string();
                if (response.isSuccessful()) {
                    JSONObject parentResponseObject = new JSONObject(responseBody);
                    final Integer paperNo = Optional.ofNullable(entity.getPaperNo()).map(String::valueOf).map(Integer::parseInt).orElse(null);
                    JSONArray responseObject = new JSONArray(String.valueOf(parentResponseObject.get("entity_confidence_score")));
                    responseObject.forEach(entry -> {
                        final JSONObject childObj = new JSONObject(entry.toString());
                        parentObj.add(PaperFilteringZeroShotClassifierOutputTable
                                .builder()
                                .originId(Optional.ofNullable(entity.getOriginId()).map(String::valueOf).orElse(null))
                                .groupId(Optional.ofNullable(entity.getGroupId()).map(String::valueOf).orElse(null))
                                .truthEntity(Optional.ofNullable(childObj.get("truthEntity")).map(String::valueOf).orElse(null))
                                .entity(Optional.ofNullable(childObj.get("key")).map(String::valueOf).orElse(null))
                                .confidenceScore(Optional.ofNullable(childObj.get("score")).map(String::valueOf).orElse(null))
                                .paperNo(paperNo)
                                .status("COMPLETED")
                                .stage(actionName)
                                .message("Completed API call zero shot classifier")
                                .rootPipelineId(entity.rootPipelineId)
                                .build());
                    });
                } else {
                    parentObj.add(
                            PaperFilteringZeroShotClassifierOutputTable
                                    .builder()
                                    .originId(Optional.ofNullable(entity.getOriginId()).map(String::valueOf).orElse(null))
                                    .groupId(Optional.ofNullable(entity.getGroupId()).map(String::valueOf).orElse(null))
                                    .status("FAILED")
                                    .paperNo(entity.paperNo)
                                    .stage(actionName)
                                    .message(Optional.of(responseBody).map(String::valueOf).orElse(null))
                                    .rootPipelineId(entity.rootPipelineId)
                                    .build());
                    log.info(aMarker, "The Exception occurred in zero shot classifier API call");
                }
            } catch (Exception e) {
                log.info(aMarker, "The Exception occurred ", e);
                parentObj.add(
                        ZeroShotClassifierPaperFilterAction.PaperFilteringZeroShotClassifierOutputTable
                                .builder()
                                .originId(Optional.ofNullable(entity.getOriginId()).map(String::valueOf).orElse(null))
                                .groupId(Optional.ofNullable(entity.getGroupId()).map(String::valueOf).orElse(null))
                                .status("FAILED")
                                .paperNo(entity.paperNo)
                                .stage(actionName)
                                .message(ExceptionUtil.toString(e))
                                .rootPipelineId(entity.rootPipelineId)
                                .build());
            }
        }

    }

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public static class PaperFilteringZeroShotClassifierInputTable implements CoproProcessor.Entity {
        private String originId;
        private Integer paperNo;
        private String groupId;
        private String pageContent;
        //        private String truthEntity;
        private String truthPlaceholder;
        private String processId;
        private Long rootPipelineId;

        @Override
        public List<Object> getRowData() {
            return null;
        }
    }


    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public static class PaperFilteringZeroShotClassifierOutputTable implements CoproProcessor.Entity {
        private String originId;
        private Integer paperNo;
        private String groupId;
        private String truthEntity;

        private String confidenceScore;
        private String entity;

        private String status;

        private String stage;

        private String message;
        private Long rootPipelineId;


        @Override
        public List<Object> getRowData() {
            return Stream.of(this.originId, this.groupId, this.paperNo, this.entity, this.confidenceScore,
                    this.truthEntity, this.status, this.stage, this.message,this.rootPipelineId).collect(Collectors.toList());
        }
    }


}
