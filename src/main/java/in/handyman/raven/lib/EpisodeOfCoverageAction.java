
package in.handyman.raven.lib;

import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.agadia.eocsplitting.EocIdCoverage;
import in.handyman.raven.lib.agadia.eocsplitting.QrCodeCoverage;
import in.handyman.raven.lib.agadia.eocsplitting.SorItemCoverage;
import in.handyman.raven.lib.model.EpisodeOfCoverage;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.jdbi.v3.core.Jdbi;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.List;
import java.util.Map;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "EpisodeOfCoverage"
)
public class EpisodeOfCoverageAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final EpisodeOfCoverage episodeOfCoverage;

    private final Marker aMarker;

    public EpisodeOfCoverageAction(final ActionExecutionAudit action, final Logger log,
                                   final Object episodeOfCoverage) {
        this.episodeOfCoverage = (EpisodeOfCoverage) episodeOfCoverage;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" EpisodeOfCoverage:" + this.episodeOfCoverage.getName());
    }

    @Override
    public void execute() throws Exception {

        log.info(aMarker, "<-------Episode of coverage Action for {} with group by eoc-id has started------->" + episodeOfCoverage.getName());
        final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(episodeOfCoverage.getResourceConn());


        try {
            EocIdCoverage eocIdCoverage = new EocIdCoverage(log, episodeOfCoverage, aMarker, action);
            Map<String, List<Integer>> sorIdPageNumbers = eocIdCoverage.SplitByEocId(jdbi, "eoc_id");
            OutputQueryExecutor(jdbi, "EID", sorIdPageNumbers);

            if (sorIdPageNumbers.isEmpty()) {
                QrCodeCoverage qrCodeCoverage = new QrCodeCoverage(log, episodeOfCoverage, aMarker, action);
                Map<String, List<Integer>> qrPageNumbers = qrCodeCoverage.splitByQrcode(jdbi, "qr_code");
                OutputQueryExecutor(jdbi, "QID", qrPageNumbers);

                if (qrPageNumbers.isEmpty()) {
                    SorItemCoverage sorItemMemberIdCoverage = new SorItemCoverage(log, episodeOfCoverage, aMarker, action);
                    Map<String, List<Integer>> patientMemberNumbers = sorItemMemberIdCoverage.splitBySorItem(jdbi, "patient_member_id");
                    OutputQueryExecutor(jdbi, "PID", patientMemberNumbers);

                    if (patientMemberNumbers.isEmpty()) {
                        SorItemCoverage sorItemPatientNameCoverage = new SorItemCoverage(log, episodeOfCoverage, aMarker, action);
                        Map<String, List<Integer>> patientNameNumbers = sorItemPatientNameCoverage.splitBySorItem(jdbi, "patient_name");
                        OutputQueryExecutor(jdbi, "PND", patientNameNumbers);

                    }
                }
            }

        } catch (Exception e) {
            log.info(aMarker, "<-------Episode of coverage Action for {} with group by eoc-id has failes------->" + episodeOfCoverage.getName());

        }

    }

    @Override
    public boolean executeIf() throws Exception {
        return episodeOfCoverage.getCondition();
    }

    public void OutputQueryExecutor(Jdbi jdbi, String sorItem, Map<String, List<Integer>> stringListMap) {

        stringListMap.forEach((s, integers) -> {
            for (Integer integer : integers) {
                CoverageEntity coverageEntity = CoverageEntity.builder()
                        .paper(integer)
                        .pahubId(s)
                        .originId(episodeOfCoverage.getOriginId())
                        .sourceOfPahub(sorItem)
                        .build();
                try {
                    jdbi.useTransaction(handle -> handle.execute("create table if not exists macro." + episodeOfCoverage.getOutputTable() + " (pahub_id varchar not null,origin_id varchar(255) NOT NULL,source_of_pahub varchar null,paper int NOT NULL);"));

                    jdbi.useTransaction(handle -> {
                        handle.createUpdate("INSERT INTO macro." + episodeOfCoverage.getOutputTable() +
                                        "(pahub_id, origin_id, source_of_pahub, paper)" +
                                        "VALUES (:pahubId , :originId, :sourceOfPahub , :paper)")
                                .bindBean(coverageEntity).execute();
                    });

                } catch (Exception e) {
                    log.info(aMarker, "Failed in executed formated query {} for this sor item {}", e, sorItem);
                }
            }
        });
    }

//  public List<Map<String, Object>> queryExecutor(Jdbi jdbi,String sorItem,String unFormattedQueryString){
//    final List<Map<String, Object>> requestInfos = new ArrayList<>();
//      try{
//        jdbi.useTransaction(handle -> {
//          final List<String> formattedQuery = CommonQueryUtil.getFormattedQuery(unFormattedQueryString);
//          formattedQuery.forEach(sqlToExecute -> {
//            requestInfos.addAll(handle.createQuery(sqlToExecute).mapToMap().stream().collect(Collectors.toList()));
//          });
//        });
//
//      }catch(Exception e){
//        log.info(aMarker, "Failed in executed formated query {} for this sor item {}", e,sorItem);
//      }
//      return requestInfos;
//  }
//  public Map<String,List<Integer>> splitPageNumbersByEocId(Jdbi jdbi, String sorItem) {
//    Map<String,List<Integer>> eocObjectMap=new HashMap<>();
//
//    if(Objects.equals(sorItem,"eoc_id")){
//
//
//        List<Map<String, Object>> eocIdRequestInfo=queryExecutor(jdbi,sorItem,episodeOfCoverage.getEocGroupingItem());
//      if (!eocIdRequestInfo.isEmpty()) {
//
//        List<Map<String, Object>> eocGroupingEocIdRequestInfos=queryExecutor(jdbi,sorItem,episodeOfCoverage.getValue());
//        List<Integer> breakPointsList = new ArrayList<>();
//        eocGroupingEocIdRequestInfos.forEach(eocGroupingEocIdRequestInfo -> {
//          final Integer startNoString = (Integer) Optional.ofNullable(eocGroupingEocIdRequestInfo.get("start_no")).orElse(0);
//          breakPointsList.add(startNoString);
//        });
//        Collections.sort(breakPointsList);
//
//
//        for (var eocGroupingEocIdRequestInfo : eocGroupingEocIdRequestInfos) {
//          List<Integer> paperList = new ArrayList<>();
//          Integer startNoInt = (Integer) Optional.ofNullable(eocGroupingEocIdRequestInfo.get("start_no")).orElse(0);
//          final String answerString = Optional.ofNullable(eocGroupingEocIdRequestInfo.get("answer")).map(String::valueOf).orElse("");
//          int totalPageInt = Integer.parseInt(episodeOfCoverage.getTotalPages());
//          int endPoint = 0;
//
//          try {
//            endPoint = breakPointsList.get(breakPointsList.indexOf(startNoInt) + 1);
//          } catch (Exception e) {
//            endPoint = totalPageInt + 1;
//          }
//          if (breakPointsList.indexOf(startNoInt) == 0 && eocObjectMap.isEmpty()) {
//            startNoInt = 1;
//          }
//
//          for (int i = startNoInt; i < endPoint; i++) {
//            paperList.add(i);
//          }
//          //thic code will save the result as a map with string as key and list as value
//          eocObjectMap.put(answerString, paperList);
//        }
//      }
//    }
//
//    return eocObjectMap;
//  }
//
//
//  public Map<String,List<Integer>> splitPageNumbersByQrCode(Jdbi jdbi, String sorItem) {
//    Map<String,List<Integer>> qrObjectMap = new HashMap<>();
//    List<Map<String, Object>> eocGroupingQrItemRequestInfos= queryExecutor(jdbi,sorItem,episodeOfCoverage.getFilepath());
//
//    for (var eocGroupingQrItemRequestInfo : eocGroupingQrItemRequestInfos){
//
//      final OkHttpClient httpclient = InstanceUtil.createOkHttpClient();
//      final String inputFilePathString= Optional.ofNullable(eocGroupingQrItemRequestInfo.get("file_path")).map(String::valueOf).orElse("");
//      final String pageNoString= Optional.ofNullable(eocGroupingQrItemRequestInfo.get("paper_no")).map(String::valueOf).orElse("");
//      int pageNoInt=Integer.parseInt(pageNoString);
//
//      log.info(aMarker, " Input variables id : {}", action.getActionId());
//      final ObjectNode objectNode = mapper.createObjectNode();
//      objectNode.put("inputFilePath", inputFilePathString);
//      log.info(aMarker, " Input variables id : {}", action.getActionId());
//      Request request = new Request.Builder().url(URI)
//              .post(RequestBody.create(objectNode.toString(), MediaTypeJSON)).build();
//      String name = episodeOfCoverage.getName();
//      log.debug(aMarker, "Request has been build with the parameters \n URI : {} \n Input-File-Path : {} \n", URI,inputFilePathString );
//      log.info(aMarker, "The Request Details : {}", request);
//
//      try (Response response = httpclient.newCall(request).execute()) {
//        String responseBody = response.body().string();
//        //This map for store filepath and qr output
//
//
//        if (response.isSuccessful()) {
//          log.info(aMarker, "The Successful Response for {} --> {}", name, responseBody);
//
//          QrReader qrResponse=mapper.readValue(responseBody,QrReader.class);
//          if(!qrResponse.getQr().isEmpty()){
//            if(qrObjectMap.containsKey(qrResponse.getQr().get(0))){
//              List<Integer> list=qrObjectMap.get(qrResponse.getQr().get(0));
//              list.add(pageNoInt);
//              qrObjectMap.put(qrResponse.getQr().get(0),list);
//            }else {
//              List<Integer> list=new ArrayList<>();
//              list.add(pageNoInt);
//              qrObjectMap.put(qrResponse.getQr().get(0),list);
//            }
//          }
//
//          log.info(aMarker, "The successed output for eoc splitting with QR code {} --> {}", name, qrObjectMap);
//        } else {
//          log.info(aMarker, "The Failure Response {} --> {}", name, responseBody);
//          action.getContext().put(name.concat(".error"), "true");
//          action.getContext().put(name.concat(".errorMessage"), responseBody);
//        }
//
//        action.getContext().put(name + ".isSuccessful", String.valueOf(response.isSuccessful()));
//      } catch (Exception e) {
//        log.error(aMarker, "The Exception occurred for group by qr code ", e);
//        action.getContext().put(name + ".isSuccessful", "false");
//        throw new HandymanException("Failed to execute", e);
//      }
//      log.info(aMarker, "<-------Episode of coverage Action for {} with group by qr-code has completed------->" + episodeOfCoverage.getName());
//    }
//
//    return qrObjectMap;
//  }
//
//
//  public Map<String,List<Integer>> splitPageNumbersByItem(Jdbi jdbi, String sorItem) {
//
//    Map<String, List<Integer>> stringObjectMap = new HashMap<>();
//
//    try {
//      String UnformattedQueryString="SELECT predicted_value as answer,min(paper_no) as start_no,max(paper_no) as end_no \n" +
//              "          FROM score.aggregation_evaluator\n" +
//              "          WHERE origin_id= '" + episodeOfCoverage.getOriginId() +
//              "' AND sor_item_name='" +sorItem+
//              "'         group by predicted_value;" ;
//      List<Map<String, Object>> eocGroupingMemberItemRequestInfos = queryExecutor(jdbi,sorItem,UnformattedQueryString);
//
//      List<Integer> breakPointsList = new ArrayList<>();
//      eocGroupingMemberItemRequestInfos.forEach(stringObjectMapInfo -> {
//        final Integer startNoString = (Integer) Optional.ofNullable(stringObjectMapInfo.get("start_no")).orElse(0);
//        breakPointsList.add(startNoString);
//      });
//      Collections.sort(breakPointsList);
//
//      //this logic needs start_page_no and total page numbers list
//      for (var eocGroupingMemberItemRequestInfo : eocGroupingMemberItemRequestInfos) {
//        List<Integer> paperList = new ArrayList<>();
//        Integer startNoInt = (Integer) Optional.ofNullable(eocGroupingMemberItemRequestInfo.get("start_no")).orElse(0);
//        final String answerString = Optional.ofNullable(eocGroupingMemberItemRequestInfo.get("answer")).map(String::valueOf).orElse("");
//        int totalPageInt = Integer.parseInt(episodeOfCoverage.getTotalPages());
//        int endPoint = 0;
//
//        try {
//          endPoint = breakPointsList.get(breakPointsList.indexOf(startNoInt) + 1);
//        } catch (Exception e) {
//          endPoint = totalPageInt + 1;
//        }
//        if (breakPointsList.indexOf(startNoInt) == 0 && stringObjectMap.isEmpty()) {
//          startNoInt = 1;
//        }
//
//        for (int i = startNoInt; i < endPoint; i++) {
//          paperList.add(i);
//        }
//        //thic code will save the result as a map with string as key and list as value
//        stringObjectMap.put(answerString, paperList);
//      }
//
//    } catch (Exception e) {
//      log.info(aMarker, "<-------Episode of coverage Action for member id filter {} has failed------->" + episodeOfCoverage.getName());
//
//    }
//    return stringObjectMap;
//  }

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public static class CoverageEntity {
        private String pahubId;

        private String originId;

        private String sourceOfPahub;

        private Integer paper;
    }
}