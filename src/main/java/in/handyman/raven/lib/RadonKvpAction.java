package in.handyman.raven.lib;

import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.RadonKvp;
import in.handyman.raven.lib.model.kvp.llm.radon.processor.RadonKvpConsumerProcess;
import in.handyman.raven.lib.model.kvp.llm.radon.processor.RadonQueryInputTable;
import in.handyman.raven.lib.model.kvp.llm.radon.processor.RadonQueryOutputTable;
import in.handyman.raven.lib.utils.FileProcessingUtils;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.stream.Collectors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "RadonKvp"
)
public class RadonKvpAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final RadonKvp radonKvp;

    private final Marker aMarker;


    public static final String DEFAULT_SOCKET_TIME_OUT = "100";
    public static final String COPRO_CLIENT_SOCKET_TIMEOUT = "copro.client.socket.timeout";
    public static final String COPRO_CLIENT_API_SLEEPTIME = "copro.client.api.sleeptime";
    public static final String CONSUMER_API_COUNT = "Radon.kvp.consumer.API.count";
    public static final String WRITE_BATCH_SIZE = "write.batch.size";
    public static final String THREAD_SLEEP_TIME = "1000";
    public static final String INSERT_INTO = "INSERT INTO";

    public static final String COLUMN_LIST = "created_on, created_user_id, last_updated_on, last_updated_user_id, input_file_path," +
            " total_response_json, paper_no, origin_id, process_id, action_id, process, group_id, tenant_id, " +
            "root_pipeline_id, batch_id, model_registry, status, stage, message, category,request,response,endpoint";
    public static final String VAL_STRING_LIST = "VALUES( ?,?,?,?,?," +
            "?,?,?,?,?" +
            ",?,?,?,?,?," +
            "?,?, ?, ?" +
            ",?,?,?,?)";

    public static final String READ_BATCH_SIZE = "read.batch.size";
    private final int threadSleepTime;
    private final Integer consumerApiCount;
    private final Integer writeBatchSize;
    private final String targetTableName;
    private final String columnList;
    private final String insertQuery;
    private final String radonKvpUrl;

    private int timeout;


    private final int readBatchSize;
    private final String processBase64;
    public static final String COPRO_FILE_PROCESS_FORMAT = "pipeline.copro.api.process.file.format";


    public RadonKvpAction(final ActionExecutionAudit action, final Logger log,
                          final Object radonKvp) {
        this.radonKvp = (RadonKvp) radonKvp;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" RadonKvp:" + this.radonKvp.getName());
        String socketTimeStr = action.getContext().get(COPRO_CLIENT_SOCKET_TIMEOUT);
        socketTimeStr = socketTimeStr != null && socketTimeStr.trim().length() > 0 ? socketTimeStr : DEFAULT_SOCKET_TIME_OUT;
        this.timeout = Integer.parseInt(socketTimeStr);
        String threadSleepTimeStr = action.getContext().get(COPRO_CLIENT_API_SLEEPTIME);
        threadSleepTimeStr = threadSleepTimeStr != null && threadSleepTimeStr.trim().length() > 0 ? threadSleepTimeStr : THREAD_SLEEP_TIME;
        this.threadSleepTime = Integer.parseInt(threadSleepTimeStr);
        String consumerApiCountStr = this.action.getContext().get(CONSUMER_API_COUNT);
        consumerApiCount = Integer.valueOf(consumerApiCountStr);
        String writeBatchSizeStr = this.action.getContext().get(WRITE_BATCH_SIZE);
        this.writeBatchSize = Integer.valueOf(writeBatchSizeStr);
        this.readBatchSize = Integer.valueOf(action.getContext().get(READ_BATCH_SIZE));
        this.targetTableName = this.radonKvp.getOutputTable();
        this.columnList = COLUMN_LIST;
        this.radonKvpUrl = this.radonKvp.getEndpoint();
        this.processBase64 = action.getContext().get(COPRO_FILE_PROCESS_FORMAT);
        insertQuery = INSERT_INTO + " " + targetTableName + "(" + columnList + ") " + " " + VAL_STRING_LIST;

    }

    @Override
    public void execute() throws Exception {
        try {
            final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(radonKvp.getResourceConn());
            jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
            log.info(aMarker, "kvp extraction with llm Action for {} has been started", radonKvp.getName());
            FileProcessingUtils fileProcessingUtils = new FileProcessingUtils(log, aMarker, action);

            final List<URL> urls = Optional.ofNullable(radonKvpUrl).map(s -> Arrays.stream(s.split(",")).map(urlItem -> {
                try {
                    return new URL(urlItem);
                } catch (MalformedURLException e) {
                    log.error("Error in processing the URL {}", urlItem, e);
                    throw new HandymanException("Error in processing the URL", e, action);
                }
            }).collect(Collectors.toList())).orElse(Collections.emptyList());

            final CoproProcessor<RadonQueryInputTable, RadonQueryOutputTable> coproProcessor = getTableCoproProcessor(jdbi, urls);
            Thread.sleep(threadSleepTime);
            final RadonKvpConsumerProcess radonKvpConsumerProcess = new RadonKvpConsumerProcess(log, aMarker, action, this, processBase64, fileProcessingUtils);
            coproProcessor.startConsumer(insertQuery, consumerApiCount, writeBatchSize, radonKvpConsumerProcess);
            log.info(aMarker, " llm kvp Action has been completed {}  ", radonKvp.getName());
        } catch (Exception e) {
            action.getContext().put(radonKvp.getName() + ".isSuccessful", "false");
            HandymanException handymanException = new HandymanException(e);
            HandymanException.insertException("error in execute method for llm kvp action", handymanException, action);

        }

    }

    private @NotNull CoproProcessor<RadonQueryInputTable, RadonQueryOutputTable> getTableCoproProcessor(Jdbi jdbi, List<URL> urls) {
        RadonQueryInputTable neonQueryInputTable = new RadonQueryInputTable();
        final CoproProcessor<RadonQueryInputTable, RadonQueryOutputTable> coproProcessor =
                new CoproProcessor<>(new LinkedBlockingQueue<>(),
                        RadonQueryOutputTable.class,
                        RadonQueryInputTable.class,
                        jdbi, log,
                        neonQueryInputTable, urls, action);

        coproProcessor.startProducer(radonKvp.getQuerySet(), readBatchSize);
        return coproProcessor;
    }


    @Override
    public boolean executeIf() throws Exception {
        return radonKvp.getCondition();
    }

    public int getTimeOut() {
        return 0;
    }
}
