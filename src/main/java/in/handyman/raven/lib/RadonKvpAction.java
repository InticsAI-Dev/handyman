package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.ObjectMapper;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.custom.kvp.post.processing.processor.ProviderDataTransformer;
import in.handyman.raven.lib.encryption.SecurityEngine;
import in.handyman.raven.lib.encryption.inticsgrity.InticsIntegrity;
import in.handyman.raven.lib.model.RadonKvp;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.stream.Collectors;

import in.handyman.raven.lib.model.kvp.llm.radon.processor.RadonKvpConsumerProcess;
import in.handyman.raven.lib.model.kvp.llm.radon.processor.RadonQueryInputTable;
import in.handyman.raven.lib.model.kvp.llm.radon.processor.RadonQueryOutputTable;
import in.handyman.raven.lib.utils.FileProcessingUtils;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.stream.Collectors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "RadonKvp"
)
public class RadonKvpAction implements IActionExecution {
    private static final String DEFAULT_SOCKET_TIMEOUT = "100";
    private static final String THREAD_SLEEP_TIME_DEFAULT = "1000";
    private static final String INSERT_INTO = "INSERT INTO";
    public static final String COLUMN_LIST = "created_on, created_user_id, last_updated_on, last_updated_user_id, input_file_path," +
            " total_response_json, paper_no, origin_id, process_id, action_id, process, group_id, tenant_id, " +
            "root_pipeline_id, batch_id, model_registry, status, stage, message, category,request,response,endpoint,sor_container_id, krypton_inference_mode";
    public static final String VAL_STRING_LIST = "VALUES( ?,?,?,?,?," +
            "?,?,?,?,?" +
            ",?,?,?,?,?," +
            "?,?, ?, ?" +
            ",?,?,?,?, ?,?)";

    private final ActionExecutionAudit action;
    private final Logger log;
    private final RadonKvp radonKvp;
    private final Marker aMarker;
    private final ProviderDataTransformer providerDataTransformer;
    private final ObjectMapper objectMapper;
    private final Jdbi jdbi;
    private final InticsIntegrity securityEngine;

    private final int threadSleepTime;
    private final int consumerApiCount;
    private final int writeBatchSize;
    private final int readBatchSize;
    private final int timeout;

    private final String targetTableName;
    private final String radonKvpUrl;
    private final String insertQuery;
    private final String processBase64;

    public RadonKvpAction(final ActionExecutionAudit action, final Logger log, final Object radonKvp) {
        this.action = action;
        this.log = log;
        this.radonKvp = (RadonKvp) radonKvp;
        this.jdbi = ResourceAccess.rdbmsJDBIConn(this.radonKvp.getResourceConn());
        this.securityEngine = SecurityEngine.getInticsIntegrityMethod(this.action);
        this.objectMapper = new ObjectMapper();
        this.aMarker = MarkerFactory.getMarker("RadonKvp:" + this.radonKvp.getName());

        this.timeout = parseContextValue(action, "copro.client.socket.timeout", DEFAULT_SOCKET_TIMEOUT);
        this.threadSleepTime = parseContextValue(action, "copro.client.api.sleeptime", THREAD_SLEEP_TIME_DEFAULT);
        this.consumerApiCount = parseContextValue(action, "Radon.kvp.consumer.API.count", "1");
        this.writeBatchSize = parseContextValue(action, "write.batch.size", "10");
        this.readBatchSize = parseContextValue(action, "read.batch.size", "10");

        this.targetTableName = this.radonKvp.getOutputTable();
        this.radonKvpUrl = this.radonKvp.getEndpoint();
        this.processBase64 = action.getContext().get("pipeline.copro.api.process.file.format");

        this.insertQuery = INSERT_INTO + " " + targetTableName + "(" + COLUMN_LIST + ") " + " " + VAL_STRING_LIST;

        this.providerDataTransformer = new ProviderDataTransformer(this.log, aMarker, objectMapper, this.action, jdbi, securityEngine);
    }

    private int parseContextValue(ActionExecutionAudit action, String key, String defaultValue) {
        String value = action.getContext().getOrDefault(key, defaultValue).trim();
        return value.isEmpty() ? Integer.parseInt(defaultValue) : Integer.parseInt(value);
    }

    @Override
    public void execute() throws Exception {
        try {
            jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
            log.info(aMarker, "kvp extraction with llm Action for {} has been started", radonKvp.getName());
            FileProcessingUtils fileProcessingUtils = new FileProcessingUtils(log, aMarker, action);

            final List<URL> urls = Optional.ofNullable(radonKvpUrl).map(s -> Arrays.stream(s.split(",")).map(urlItem -> {
                try {
                    return new URL(urlItem);
                } catch (MalformedURLException e) {
                    log.error("Error in processing the URL {}", urlItem, e);
                    throw new HandymanException("Error in processing the URL", e, action);
                }
            }).collect(Collectors.toList())).orElse(Collections.emptyList());

            final CoproProcessor<RadonQueryInputTable, RadonQueryOutputTable> coproProcessor = getTableCoproProcessor(jdbi, urls);
            Thread.sleep(threadSleepTime);
            final RadonKvpConsumerProcess radonKvpConsumerProcess = new RadonKvpConsumerProcess(log, aMarker, action, this, processBase64, fileProcessingUtils,jdbi,providerDataTransformer);
            coproProcessor.startConsumer(insertQuery, consumerApiCount, writeBatchSize, radonKvpConsumerProcess);
            log.info(aMarker, " llm kvp Action has been completed {}  ", radonKvp.getName());
        } catch (Exception e) {
            action.getContext().put(radonKvp.getName() + ".isSuccessful", "false");
            HandymanException handymanException = new HandymanException(e);
            HandymanException.insertException("error in execute method for llm kvp action", handymanException, action);

        }

    }

    private @NotNull CoproProcessor<RadonQueryInputTable, RadonQueryOutputTable> getTableCoproProcessor(Jdbi jdbi, List<URL> urls) {
        RadonQueryInputTable neonQueryInputTable = new RadonQueryInputTable();
        final CoproProcessor<RadonQueryInputTable, RadonQueryOutputTable> coproProcessor =
                new CoproProcessor<>(new LinkedBlockingQueue<>(),
                        RadonQueryOutputTable.class,
                        RadonQueryInputTable.class,
                        jdbi, log,
                        neonQueryInputTable, urls, action);

        coproProcessor.startProducer(radonKvp.getQuerySet(), readBatchSize);
        return coproProcessor;
    }


    @Override
    public boolean executeIf() throws Exception {
        return radonKvp.getCondition();
    }

    public int getTimeOut() {
        return this.timeout;
    }
}
