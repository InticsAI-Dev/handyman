package in.handyman.raven.lib;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.GitHubAuthenticator;

import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

import in.handyman.raven.lib.model.gitHubActions.GitHubActions;
import in.handyman.raven.util.CommonQueryUtil;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.result.ResultIterable;
import org.jdbi.v3.core.statement.Query;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "GitHubAuthenticator"
)
public class GitHubAuthenticatorAction implements IActionExecution {
  private final ActionExecutionAudit action;

  private final Logger log;

  private final GitHubAuthenticator gitHubAuthenticator;

  private final Marker aMarker;

  public GitHubAuthenticatorAction(final ActionExecutionAudit action, final Logger log,
                                   final Object gitHubAuthenticator) {
    this.gitHubAuthenticator = (GitHubAuthenticator) gitHubAuthenticator;
    this.action = action;
    this.log = log;
    this.aMarker = MarkerFactory.getMarker(" GitHubAuthenticator:"+this.gitHubAuthenticator.getName());
  }


  @Override
  public void execute() throws Exception {
    String gitHubAuthenticatorName = gitHubAuthenticator.getName();
    log.info(aMarker, "Java TestCase Generator Action for {} has been started", gitHubAuthenticatorName);

    final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(gitHubAuthenticator.getResourceConn());
    final List<GitHubAuthenticatorQueryResult> tableInfos = new ArrayList<>();

    jdbi.useTransaction(handle -> {
      final List<String> formattedQuery = CommonQueryUtil.getFormattedQuery(gitHubAuthenticator.getQuerySet());
      AtomicInteger i = new AtomicInteger(0);
      formattedQuery.forEach(sqlToExecute -> {
        log.info(aMarker, "executing  query {} from index {}", sqlToExecute, i.getAndIncrement());
        Query query = handle.createQuery(sqlToExecute);
        ResultIterable<GitHubAuthenticatorQueryResult> resultIterable = query.mapToBean(GitHubAuthenticatorQueryResult.class);
        List<GitHubAuthenticatorQueryResult> detailList = resultIterable.stream().collect(Collectors.toList());
        tableInfos.addAll(detailList);
        log.info(aMarker, "executed query from index {}", i.get());
      });
    });

    tableInfos.forEach(gitHubAuthenticatorQueryResult -> {
      GitHubActions gitHubActions=new GitHubActions(log);

      String gitToken = gitHubAuthenticatorQueryResult.getGitToken();

      String repoType = gitHubAuthenticatorQueryResult.getRepoType();

      String repoName = gitHubAuthenticatorQueryResult.getRepoName();

      String branchName = gitHubAuthenticatorQueryResult.getBranchName();

      Long groupId = gitHubAuthenticatorQueryResult.getGroupId();

      Long tenantId = gitHubAuthenticatorQueryResult.getTenantId();

      Long userId = gitHubAuthenticatorQueryResult.getUserId();

      String outputTable = gitHubAuthenticator.getOutputTable();

      String remote_url = "https://github.com/" + repoName + ".git";

      LocalDateTime requestedTime = LocalDateTime.now();

      String repoAction = gitHubAuthenticatorQueryResult.getRepoAction();

      String repoCloneDir = gitHubAuthenticatorQueryResult.getRepoCloneDir();

      String directoryPath = gitHubAuthenticatorQueryResult.getRepoBaseDir() + "/"  + tenantId + "/";

      LocalDateTime responseTime = LocalDateTime.now();
      try {
        switch (repoAction) {

          case "CLONE":
            Path clonedRepoPath = gitHubActions.cloneRepository(remote_url,directoryPath,branchName,gitToken);
            insertResponseDetails(repoName, branchName, repoType, gitToken, repoCloneDir, tenantId, "COMPLETED"
                    , requestedTime, responseTime, groupId, userId, repoCloneDir,repoAction, jdbi, outputTable);

            break;
          case "CHECKOUT":
            boolean checkoutClonedRepoPath = gitHubActions.checkout(repoCloneDir,branchName,gitToken);
            insertResponseDetails(repoName, branchName, repoType, gitToken, repoCloneDir, tenantId, "COMPLETED"
                    , requestedTime, responseTime, groupId, userId, repoCloneDir,repoAction, jdbi, outputTable);
            break;
          case "PULL":
            gitHubActions.pullChanges(repoCloneDir,gitToken);
            insertResponseDetails(repoName, branchName, repoType, gitToken, repoCloneDir, tenantId, "COMPLETED"
                    , requestedTime, responseTime, groupId, userId, repoCloneDir,repoAction, jdbi, outputTable);
            break;
          case "PUSH":
            gitHubActions.pushChanges(repoCloneDir,gitToken);
            insertResponseDetails(repoName, branchName, repoType, gitToken, repoCloneDir, tenantId, "COMPLETED"
                    , requestedTime, responseTime, groupId, userId, repoCloneDir,repoAction, jdbi, outputTable);
            break;
            }

      } catch (Exception e) {

        insertResponseDetails(repoName, branchName, repoType, gitToken, repoCloneDir, tenantId, "FAILED", requestedTime, responseTime, groupId, userId, repoCloneDir, jdbi, outputTable);
        log.error("Error: " + e.getMessage());
        e.printStackTrace();
      }

    });

  }

  public void insertResponseDetails(String repoName, String branchName, String repoType, String gitToken, String folderPath, Long tenantId, String status, LocalDateTime requestedTime, LocalDateTime responseTime, Long groupId, Long userId,String projectFolderPath,String repoAction, Jdbi jdbi, String outputTable) {
    Long rootPipelineId = action.getRootPipelineId();
    String sql = "INSERT INTO " + outputTable + " (repo_name, branch_name, tenant_id, repo_type, git_token, folder_path, status, project_folder_path, root_pipeline_id, requested_time, responded_time, group_id, user_id, repo_action) " +
            "VALUES (:repoName, :branchName, :tenantId, :repoType, :gitToken, :folderPath, :status, :projectFolderPath, :rootPipelineId, :requestedTime, :responseTime, :groupId, :userId, :repoAction)";

    try {
      jdbi.withHandle(handle -> handle.createUpdate(sql)
              .bind("repoName", repoName)
              .bind("branchName", branchName)
              .bind("repoType", repoType)
              .bind("gitToken", gitToken)
              .bind("folderPath", folderPath)
              .bind("status", status)
              .bind("projectFolderPath", projectFolderPath)
              .bind("rootPipelineId", rootPipelineId)
              .bind("requestedTime", requestedTime)
              .bind("responseTime", responseTime)
              .bind("groupId", groupId)
              .bind("userId", userId)
              .bind("tenantId", tenantId)
              .bind("repoAction",repoAction)
              .execute());
      log.info("Data inserted successfully into " + outputTable);
    } catch (Exception e) {
      log.error("Error inserting data into table " + outputTable, e);
    }
  }

  @Override
  public boolean executeIf() throws Exception {
    return gitHubAuthenticator.getCondition();
  }

  @AllArgsConstructor
  @NoArgsConstructor
  @Data
  @Builder
  @JsonIgnoreProperties(ignoreUnknown = true)
  public static class GitHubAuthenticatorQueryResult {

    private String gitToken;
    private String repoType;
    private String repoName;
    private String branchName;
    private Long tenantId;
    private Long userId;
    private Long groupId;
    private String repoAction;
    private String repoBaseDir;
    private String repoCloneDir;
  }
}
