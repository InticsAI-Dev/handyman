package in.handyman.raven.lib;

import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.Hwdetection;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;

import in.handyman.raven.util.InstanceUtil;
import okhttp3.*;
import org.jdbi.v3.core.Jdbi;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
    actionName = "Hwdetection"
)
public class HwdetectionAction implements IActionExecution {
  private final ActionExecutionAudit action;

  private final Logger log;
  final String URI;
  final ObjectMapper MAPPER;
  final OkHttpClient httpclient;

  private final Hwdetection hwdetection;

  private final Marker aMarker;
  private static final MediaType MediaTypeJSON = MediaType.parse("application/json; charset=utf-8");

  public HwdetectionAction(final ActionExecutionAudit action, final Logger log,
      final Object hwdetection) {
    this.hwdetection = (Hwdetection) hwdetection;
    this.action = action;
    this.URI = action.getContext().get("copro.hw-detection.url");
    this.MAPPER = new ObjectMapper();
    this.httpclient = InstanceUtil.createOkHttpClient();
    this.log = log;
    this.aMarker = MarkerFactory.getMarker(" Hwdetection:"+this.hwdetection.getName());
  }

  @Override
  public void execute() throws Exception {
    log.info(aMarker, "<-------intelli match process for {} has been started------->" + hwdetection.getName());
    ObjectCodec mapper;
    final ObjectNode objectNode = MAPPER.createObjectNode();
    objectNode.put("inputFilePath", hwdetection.getFilePath());
    objectNode.put("outputDir", hwdetection.getDirectorypath());
    objectNode.put("modelPath", hwdetection.getModelpath());
    log.info(aMarker, " Input variables id : {}", action.getActionId());
    String name = hwdetection.getName();

    // build a request

    Request request = new Request.Builder().url(URI)
            .post(RequestBody.create(objectNode.toString(),MediaTypeJSON)).build();

      try (Response response = httpclient.newCall(request).execute()) {
        String responseBody = response.body().string();

      }
      catch (Exception e) {
        log.error(aMarker, "The Exception occurred ", e);
        action.getContext().put(name + ".isSuccessful", "false");
        throw new HandymanException("Failed to execute", e);
      }



  }

  @Override
  public boolean executeIf() throws Exception {
    return hwdetection.getCondition();
  }
}
