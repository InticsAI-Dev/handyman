package in.handyman.raven.lib;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.PhraseMatchPaperFilter;
import in.handyman.raven.util.ExceptionUtil;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import okhttp3.*;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.json.JSONArray;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.*;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "PhraseMatchPaperFilter"
)
public class PhraseMatchPaperFilterAction implements IActionExecution {
    private final ActionExecutionAudit action;
    private final Logger log;
    private final PhraseMatchPaperFilter phraseMatchPaperFilter;
    private final Marker aMarker;

    public PhraseMatchPaperFilterAction(final ActionExecutionAudit action, final Logger log,
                                        final Object phraseMatchPaperFilter) {
        this.phraseMatchPaperFilter = (PhraseMatchPaperFilter) phraseMatchPaperFilter;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" PhraseMatchPaperFilter:" + this.phraseMatchPaperFilter.getName());
    }

    @Override
    public void execute() throws Exception {
        try {
        final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(phraseMatchPaperFilter.getResourceConn());
        jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
        log.info(aMarker, "<-------Phrase match paper filter Action for {} has been started------->", phraseMatchPaperFilter.getName());
        final String processId = Optional.ofNullable(phraseMatchPaperFilter.getProcessID()).map(String::valueOf).orElse(null);
        final String insertQuery = "INSERT INTO paper.phrase_match_filtering_result_" + processId + "(origin_id,group_id,paper_no,truth_entity, synonym, is_key_present,status,stage,message, created_on,root_pipeline_id) " +
                " VALUES(?,?,?,?,?,?,?,?,?,now(), ?)";
        final List<URL> urls = Optional.ofNullable(action.getContext().get("copro.paper-filtering-phrase-match.url")).map(s -> Arrays.stream(s.split(",")).map(url -> {
            try {
                return new URL(url);
            } catch (MalformedURLException e) {
                log.error("Error in processing the URL {} ", url, e);
                throw new HandymanException("Error in processing the URL", e, action);
            }
        }).collect(Collectors.toList())).orElse(Collections.emptyList());

            final CoproProcessor<PhraseMatchPaperFilterAction.PhraseMatchInputTable, PhraseMatchPaperFilterAction.PhraseMatchOutputTable> coproProcessor =
                    new CoproProcessor<>(new LinkedBlockingQueue<>(),
                            PhraseMatchPaperFilterAction.PhraseMatchOutputTable.class,
                            PhraseMatchPaperFilterAction.PhraseMatchInputTable.class,
                            jdbi, log,
                            new PhraseMatchPaperFilterAction.PhraseMatchInputTable(), urls, action);
            coproProcessor.startProducer(phraseMatchPaperFilter.getQuerySet(), Integer.parseInt(phraseMatchPaperFilter.getReadBatchSize()));
            Thread.sleep(1000);
            coproProcessor.startConsumer(insertQuery, Integer.parseInt(phraseMatchPaperFilter.getThreadCount()),
                    Integer.parseInt(phraseMatchPaperFilter.getWriteBatchSize()),
                    new PhraseMatchPaperFilterAction.PhraseMatchConsumerProcess(log, aMarker, action));
            log.info(aMarker, " Zero shot classifier has been completed {}  ", phraseMatchPaperFilter.getName());

        } catch (Exception e) {
            log.error(aMarker, "Error in phrase match with exception {}", ExceptionUtil.toString(e));
            throw new HandymanException("Error in phrase match action", e, action);
        }

    }

    @Override
    public boolean executeIf() throws Exception {
        return phraseMatchPaperFilter.getCondition();
    }

    public static class PhraseMatchConsumerProcess implements CoproProcessor.ConsumerProcess<PhraseMatchPaperFilterAction.PhraseMatchInputTable, PhraseMatchPaperFilterAction.PhraseMatchOutputTable> {
        private final Logger log;
        private final Marker aMarker;
        private final ObjectMapper mapper = new ObjectMapper();
        private static final MediaType MediaTypeJSON = MediaType
                .parse("application/json; charset=utf-8");
        public final ActionExecutionAudit action;
        private static final String actionName = "PHRASE_MATCH";

        final OkHttpClient httpclient = new OkHttpClient.Builder()
                .connectTimeout(10, TimeUnit.MINUTES)
                .writeTimeout(10, TimeUnit.MINUTES)
                .readTimeout(10, TimeUnit.MINUTES)
                .build();

        public PhraseMatchConsumerProcess(final Logger log, final Marker aMarker, ActionExecutionAudit action) {
            this.log = log;
            this.aMarker = aMarker;
            this.action = action;
        }

        @Override
        public List<PhraseMatchPaperFilterAction.PhraseMatchOutputTable> process(URL endpoint, PhraseMatchPaperFilterAction.PhraseMatchInputTable entity) throws JsonProcessingException {
            List<PhraseMatchPaperFilterAction.PhraseMatchOutputTable> parentObj = new ArrayList<>();
            final ObjectNode objectNode = mapper.createObjectNode();
            String groupId = entity.groupId;
            String originId = entity.originId;
            Integer paperNo = entity.paperNo;
            String truthPlaceholder = entity.truthPlaceholder;

            try {
                String pageContent = entity.pageContent;
                objectNode.put("pageContent", pageContent);
//                objectNode.put("truthEntity", entity.truthEntity);
                objectNode.set("keysToFilter", mapper.readTree(truthPlaceholder));
                objectNode.put("originId", originId);

                objectNode.put("groupId", groupId);
                objectNode.put("paperNo", paperNo);
                log.info(aMarker, " Input variables id : {}", action.getActionId());
                Request request = new Request.Builder().url(endpoint)
                        .post(RequestBody.create(objectNode.toString(), MediaTypeJSON)).build();

                if(log.isInfoEnabled()) {
                    log.info(aMarker, "Request has been build with the parameters \n URI : {}, with truthPlaceHolder {},originId {},groupId {},paperNo {}", endpoint, truthPlaceholder, originId,groupId,paperNo);
                }

                coproAPIProcessor(entity, parentObj, request);
            } catch (JsonProcessingException exception) {
                log.error("error in the phrase match paper filter copro api call {}", exception.toString());
                HandymanException handymanException = new HandymanException(exception);
                HandymanException.insertException("Paper Itemizer  consumer failed for groupId"+ groupId+ "and originId" + originId, handymanException, this.action);
                log.error(aMarker, "The Exception occurred in phrase match paper filter", exception);
            }
            return parentObj;
        }

        private void coproAPIProcessor(PhraseMatchPaperFilterAction.PhraseMatchInputTable entity, List<PhraseMatchPaperFilterAction.PhraseMatchOutputTable> parentObj, Request request) {
            final Integer paperNo = Optional.ofNullable(entity.getPaperNo()).map(String::valueOf).map(Integer::parseInt).orElse(null);
            Long rootPipelineId = entity.rootPipelineId;
            try (Response response = httpclient.newCall(request).execute()) {
                String responseBody = Objects.requireNonNull(response.body()).string();
                if (response.isSuccessful()) {
                    JSONArray responseArray = new JSONArray(responseBody);
                    responseArray.forEach(entry -> {
                        JSONObject responseObject = new JSONObject(String.valueOf(entry));
                        parentObj.add(PhraseMatchOutputTable
                                .builder()
                                .originId(Optional.ofNullable(responseObject.get("originId")).map(String::valueOf).orElse(null))
                                .groupId(Optional.ofNullable(responseObject.get("groupId")).map(String::valueOf).orElse(null))
                                .paperNo(paperNo)
                                .truthEntity(Optional.ofNullable(responseObject.get("truthEntity")).map(String::valueOf).orElse(null))
                                .entity(Optional.ofNullable(responseObject.get("entity")).map(String::valueOf).orElse(null))
                                .isKeyPresent(Optional.ofNullable(responseObject.get("isKeyPresent")).map(String::valueOf).orElse(null))
                                .status("COMPLETED")
                                .stage(actionName)
                                .message("Completed API call phrase match")
                                .rootPipelineId(rootPipelineId)
                                .build());
                    });
                } else {
                    parentObj.add(
                            PhraseMatchOutputTable
                                    .builder()
                                    .originId(Optional.ofNullable(entity.getOriginId()).map(String::valueOf).orElse(null))
                                    .groupId(Optional.ofNullable(entity.getGroupId()).map(String::valueOf).orElse(null))
                                    .status("FAILED")
                                    .paperNo(paperNo)
                                    .stage(actionName)
                                    .message(Optional.of(responseBody).map(String::valueOf).orElse(null))
                                    .rootPipelineId(rootPipelineId)
                                    .build());
                    log.info(aMarker, "The Exception occurred in Phrase match API call");
                }
            } catch (Exception exception) {
                parentObj.add(
                        PhraseMatchOutputTable
                                .builder()
                                .originId(Optional.ofNullable(entity.getOriginId()).map(String::valueOf).orElse(null))
                                .groupId(Optional.ofNullable(entity.getGroupId()).map(String::valueOf).orElse(null))
                                .status("FAILED")
                                .paperNo(paperNo)
                                .stage(actionName)
                                .message(exception.getMessage())
                                .rootPipelineId(rootPipelineId)
                                .build());
                log.error(aMarker, "Exception occurred in the phrase match paper filter action {}", ExceptionUtil.toString(exception));
                HandymanException handymanException = new HandymanException(exception);
                HandymanException.insertException("Error in inserting Intellimatch result table", handymanException, this.action);

            }
        }
    }

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public static class PhraseMatchInputTable implements CoproProcessor.Entity {
        private String originId;
        private Integer paperNo;
        private String groupId;
        private String pageContent;
        private String truthPlaceholder;
        private String processId;
        private Long rootPipelineId;
//        private String truthEntity;

        @Override
        public List<Object> getRowData() {
            return null;
        }
    }


    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public static class PhraseMatchOutputTable implements CoproProcessor.Entity {
        private String originId;
        private Integer paperNo;
        private String groupId;
        private String isKeyPresent;
        private String entity;
        private String truthEntity;

        private String status;

        private String stage;

        private String message;
        private Long rootPipelineId;


        @Override
        public List<Object> getRowData() {
            return Stream.of(this.originId, this.groupId, this.paperNo, this.truthEntity, this.entity,
                    this.isKeyPresent, this.status, this.stage, this.message,this.rootPipelineId).collect(Collectors.toList());
        }
    }

}
