package in.handyman.raven.lib;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.PhraseMatchPaperFilter;
import in.handyman.raven.lib.model.pharseMatch.*;
import in.handyman.raven.lib.model.triton.TritonInputRequest;
import in.handyman.raven.lib.model.triton.TritonRequest;
import in.handyman.raven.util.ExceptionUtil;
import okhttp3.*;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.*;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "PhraseMatchPaperFilter"
)
public class PhraseMatchPaperFilterAction implements IActionExecution {
    private final ActionExecutionAudit action;
    private final Logger log;
    private final PhraseMatchPaperFilter phraseMatchPaperFilter;
    private final Marker aMarker;

    public PhraseMatchPaperFilterAction(final ActionExecutionAudit action, final Logger log,
                                        final Object phraseMatchPaperFilter) {
        this.phraseMatchPaperFilter = (PhraseMatchPaperFilter) phraseMatchPaperFilter;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" PhraseMatchPaperFilter:" + this.phraseMatchPaperFilter.getName());
    }

    @Override
    public void execute() throws Exception {
        try {
            final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(phraseMatchPaperFilter.getResourceConn());
            jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
            log.info(aMarker, "<-------Phrase match paper filter Action for {} has been started------->", phraseMatchPaperFilter.getName());
            final String processId = Optional.ofNullable(phraseMatchPaperFilter.getProcessID()).map(String::valueOf).orElse(null);
            final String insertQuery = "INSERT INTO paper.phrase_match_filtering_result_" + processId + "(origin_id,group_id,paper_no,truth_entity, synonym, is_key_present,status,stage,message, created_on,root_pipeline_id,model_name,model_version) " +
                    " VALUES(?,?,?,?,?,?,?,?,?,now(), ?, ?,?)";
            final List<URL> urls = Optional.ofNullable(action.getContext().get("copro.paper-filtering-phrase-match.url")).map(s -> Arrays.stream(s.split(",")).map(url -> {
                try {
                    return new URL(url);
                } catch (MalformedURLException e) {
                    log.error("Error in processing the URL {} ", url, e);
                    throw new HandymanException("Error in processing the URL", e, action);
                }
            }).collect(Collectors.toList())).orElse(Collections.emptyList());

            final CoproProcessor<PhraseMatchInputTable, PhraseMatchOutputTable> coproProcessor =
                    new CoproProcessor<>(new LinkedBlockingQueue<>(),
                            PhraseMatchOutputTable.class,
                            PhraseMatchInputTable.class,
                            jdbi, log,
                            new PhraseMatchInputTable(), urls, action);
            coproProcessor.startProducer(phraseMatchPaperFilter.getQuerySet(), Integer.parseInt(phraseMatchPaperFilter.getReadBatchSize()));
            Thread.sleep(1000);
            coproProcessor.startConsumer(insertQuery, Integer.parseInt(phraseMatchPaperFilter.getThreadCount()),
                    Integer.parseInt(phraseMatchPaperFilter.getWriteBatchSize()),
                    new PhraseMatchConsumerProcess(log, aMarker, action));
            log.info(aMarker, " Zero shot classifier has been completed {}  ", phraseMatchPaperFilter.getName());

        } catch (Exception e) {
            log.error(aMarker, "Error in phrase match with exception {}", ExceptionUtil.toString(e));
            throw new HandymanException("Error in phrase match action", e, action);
        }

    }

    @Override
    public boolean executeIf() throws Exception {
        return phraseMatchPaperFilter.getCondition();
    }

    public static class PhraseMatchConsumerProcess implements CoproProcessor.ConsumerProcess<PhraseMatchInputTable, PhraseMatchOutputTable> {
        private final Logger log;
        private final Marker aMarker;
        private final ObjectMapper mapper = new ObjectMapper();
        private static final MediaType MediaTypeJSON = MediaType
                .parse("application/json; charset=utf-8");
        public final ActionExecutionAudit action;
        private static final String actionName = "PHRASE_MATCH";

        final OkHttpClient httpclient = new OkHttpClient.Builder()
                .connectTimeout(10, TimeUnit.MINUTES)
                .writeTimeout(10, TimeUnit.MINUTES)
                .readTimeout(10, TimeUnit.MINUTES)
                .build();

        public PhraseMatchConsumerProcess(final Logger log, final Marker aMarker, ActionExecutionAudit action) {
            this.log = log;
            this.aMarker = aMarker;
            this.action = action;
        }

        @Override
        public List<PhraseMatchOutputTable> process(URL endpoint, PhraseMatchInputTable entity) throws JsonProcessingException {
            List<PhraseMatchOutputTable> parentObj = new ArrayList<>();
            String originId = entity.getOriginId();
            String groupId = entity.getGroupId();
            String paperNo = String.valueOf(entity.getPaperNo());
            Long actionId = action.getActionId();
            ObjectMapper objectMapper = new ObjectMapper();

            //payload
            PharseMatchData data = new PharseMatchData();
            data.setRootPipelineId("1");
            data.setActionId(actionId);
            data.setProcess(entity.getProcessId());
            data.setOriginId(originId);
            data.setPaperNo(paperNo);
            data.setGroupId(groupId);
            data.setPageContent(entity.getPageContent());


            Map<String,List<String>> keysToFilterObject = objectMapper.readValue(entity.getTruthPlaceholder(), new TypeReference<Map<String, List<String>>>() {
            });

            data.setKeysToFilter(keysToFilterObject);
            String jsonInputRequest = objectMapper.writeValueAsString(data);

            PharseMatchRequest requests = new PharseMatchRequest();
            TritonRequest requestBody = new TritonRequest();
            requestBody.setName("PM START");
            requestBody.setShape(List.of(1, 1));
            requestBody.setDatatype("BYTES");
            requestBody.setData(Collections.singletonList(jsonInputRequest));

            requests.setInputs(Collections.singletonList(requestBody));

            TritonInputRequest tritonInputRequest=new TritonInputRequest();
            tritonInputRequest.setInputs(Collections.singletonList(requestBody));

            String jsonRequest = objectMapper.writeValueAsString(requests);

            try {


                log.info(aMarker, " Input variables id : {}", action.getActionId());
                Request request = new Request.Builder().url(endpoint)
                        .post(RequestBody.create(jsonRequest, MediaTypeJSON)).build();

                if (log.isInfoEnabled()) {
                    log.info(aMarker, "Input variables id : {}", actionId);
                    log.info(aMarker, "Request has been built with the parameters\nURI: {}, with truthPlaceHolder {}, originId {}, groupId {}, paperNo {}", endpoint, keysToFilterObject, originId, groupId, paperNo);
                }
                coproAPIProcessor(entity, parentObj, request);
            } catch (Exception e) {
                log.error("Error in the zero-shot classifier paper filter copro api call {}", e.toString());
                HandymanException handymanException = new HandymanException(e);
                HandymanException.insertException("Exception occurred in urgency triage model action for group id - " + groupId + " and originId - " + originId, handymanException, this.action);
            }
            return parentObj;
        }

        private void coproAPIProcessor(PhraseMatchInputTable entity, List<PhraseMatchOutputTable> parentObj, Request request) throws JsonProcessingException {
            String originId = entity.getOriginId();
            String groupId = entity.getGroupId();


            final Integer paperNo = Optional.ofNullable(entity.getPaperNo()).map(String::valueOf).map(Integer::parseInt).orElse(null);
            Long rootPipelineId = entity.getRootPipelineId();
            try (Response response = httpclient.newCall(request).execute()) {
                String responseBody = Objects.requireNonNull(response.body()).string();

                if (response.isSuccessful()) {
                    ObjectMapper objectMapper = new ObjectMapper();
                    PharseMatchResponse pharseMatchResponse = objectMapper.readValue(responseBody, PharseMatchResponse.class);
                    if (pharseMatchResponse.getOutputs() != null && !pharseMatchResponse.getOutputs().isEmpty()) {
                        pharseMatchResponse.getOutputs().forEach(o -> {
                            o.getData().forEach(phraseMatchDataItem -> {

                                try {
                                    List<PharseMatchDataItem> phraseMatchDataItem1=objectMapper.readValue(phraseMatchDataItem, new TypeReference<>() {
                                    });
                                    phraseMatchDataItem1.forEach(pharseMatchKeyDataItem -> {
                                        parentObj.add(
                                                PhraseMatchOutputTable
                                                        .builder()
                                                        .originId(Optional.ofNullable(originId).map(String::valueOf).orElse(null))
                                                        .groupId(Optional.ofNullable(groupId).map(String::valueOf).orElse(null))
                                                        .truthEntity(Optional.ofNullable(pharseMatchKeyDataItem.getTruthEntity()).map(String::valueOf).orElse(null))
                                                        .entity(Optional.ofNullable(pharseMatchKeyDataItem.getEntity()).map(String::valueOf).orElse(null))
                                                        .isKeyPresent(Optional.ofNullable(pharseMatchKeyDataItem.getIsKeyPresent()).map(String::valueOf).orElse(null))
                                                        .modelName(pharseMatchResponse.getModelName())
                                                        .modelVersion(pharseMatchResponse.getModelVersion())
                                                        .paperNo(paperNo)
                                                        .status("COMPLETED")
                                                        .stage(actionName)
                                                        .message("Completed API call zero shot classifier")
                                                        .rootPipelineId(rootPipelineId)
                                                        .build());
                                    });

                                } catch (JsonProcessingException e) {
                                    throw new RuntimeException(e);
                                }


                            });
                        });
                    }
                } else {
                    parentObj.add(
                            PhraseMatchOutputTable
                                    .builder()
                                    .originId(Optional.ofNullable(entity.getOriginId()).map(String::valueOf).orElse(null))
                                    .groupId(Optional.ofNullable(entity.getGroupId()).map(String::valueOf).orElse(null))
                                    .status("FAILED")
                                    .paperNo(paperNo)
                                    .stage(actionName)
                                    .message(Optional.of(responseBody).map(String::valueOf).orElse(null))
                                    .rootPipelineId(rootPipelineId)
                                    .build());
                    log.info(aMarker, "The Exception occurred in Phrase match API call");
                }
            } catch (Exception exception) {
                parentObj.add(
                        PhraseMatchOutputTable
                                .builder()
                                .originId(Optional.ofNullable(entity.getOriginId()).map(String::valueOf).orElse(null))
                                .groupId(Optional.ofNullable(entity.getGroupId()).map(String::valueOf).orElse(null))
                                .status("FAILED")
                                .paperNo(paperNo)
                                .stage(actionName)
                                .message(exception.getMessage())
                                .rootPipelineId(rootPipelineId)
                                .build());
                log.error(aMarker, "Exception occurred in the phrase match paper filter action {}", ExceptionUtil.toString(exception));
                HandymanException handymanException = new HandymanException(exception);
                HandymanException.insertException("Error in inserting Intellimatch result table", handymanException, this.action);

            }
        }
    }
}
