package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.ObjectMapper;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.RadonKvpBbox;
import in.handyman.raven.lib.model.radonbbox.RadonBboxConsumerProcess;
import in.handyman.raven.lib.model.radonbbox.query.input.RadonBboxInputEntity;
import in.handyman.raven.lib.model.radonbbox.query.output.RadonBboxOutputEntity;
import in.handyman.raven.util.ExceptionUtil;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.stream.Collectors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "RadonKvpBbox"
)
public class RadonKvpBboxAction implements IActionExecution {
    public static final String WRITE_BATCH_SIZE = "write.batch.size";
    public static final String READ_BATCH_SIZE = "read.batch.size";
    public static final String REGEX_URL_SPLITTER = ",";
    public static final String INSERT_COLUMN_NAMES = "    sor_container_name, \n" +
            "    sor_item_name, \n" +
            "    answer, \n" +
            "    value_type, \n" +
            "    b_box, \n" +
            "    paper_no, \n" +
            "    origin_id, \n" +
            "    input_file_path, \n" +
            "    group_id, \n" +
            "    tenant_id, \n" +
            "    root_pipeline_id, \n" +
            "    batch_id, \n" +
            "    model_registry," +
            "    status," +
            "    stage, message, vqa_score";
    public static final String INSERT_PLACEHOLDERS = "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?";
    public static final String INSERT_INTO = "INSERT INTO";
    public static final String VALUES = "VALUES";
    public static final String OPEN_PARENTHESIS = "(";
    public static final String CLOSED_PARENTHESIS = ")";
    private final ActionExecutionAudit action;

    private final Logger log;

    private final RadonKvpBbox radonKvpBbox;

    private final Marker aMarker;

    public RadonKvpBboxAction(final ActionExecutionAudit action, final Logger log,
                              final Object radonKvpBbox) {
        this.radonKvpBbox = (RadonKvpBbox) radonKvpBbox;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" RadonKvpBbox:" + this.radonKvpBbox.getName());
    }

    @Override
    public void execute() throws Exception {


        ObjectMapper objectMapper = new ObjectMapper();
        try {

            log.info(aMarker, "Radon KVP Bbox Action for {}  has started", radonKvpBbox.getName());
            final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(radonKvpBbox.getResourceConn());
            String writeBatchSize = action.getContext().get(WRITE_BATCH_SIZE);
            String consumerApiCount = radonKvpBbox.getConsumerApiCount();
            Integer consumerCountInt = Integer.valueOf(consumerApiCount);
            Integer writeBatchSizeInt = Integer.valueOf(writeBatchSize);
            String readBatchSize = action.getContext().get(READ_BATCH_SIZE);
            Integer readBatchSizeInt = Integer.valueOf(readBatchSize);
            String coproUrl = radonKvpBbox.getCoproUrl();
            String outputTable = radonKvpBbox.getOutputTable();

            final List<URL> urls = getCoproUrls(coproUrl);

            final String insertQuery = INSERT_INTO + " " + outputTable +
                    OPEN_PARENTHESIS + INSERT_COLUMN_NAMES + CLOSED_PARENTHESIS + " "
                    + " " + VALUES + OPEN_PARENTHESIS + INSERT_PLACEHOLDERS + CLOSED_PARENTHESIS;

            jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
            final CoproProcessor<RadonBboxInputEntity, RadonBboxOutputEntity> coproProcessor =
                    new CoproProcessor<>(new LinkedBlockingQueue<>(),
                            RadonBboxOutputEntity.class,
                            RadonBboxInputEntity.class,
                            jdbi, log,
                            new RadonBboxInputEntity(), urls, action);

            callStartproducer(coproProcessor, readBatchSizeInt);

            log.info("start producer method from copro processor ");
            Thread.sleep(1000);

            callStartConsumer(coproProcessor, insertQuery, consumerCountInt, writeBatchSizeInt, objectMapper);
            log.info("start consumer method from copro processor ");


        } catch (Exception e) {
            log.error("Error in the Radon kvp bbox action {}", ExceptionUtil.toString(e));
            throw new HandymanException("Radon kvp bbox  action failed ", e, action);


        }
    }

    private void callStartproducer(CoproProcessor<RadonBboxInputEntity, RadonBboxOutputEntity> coproProcessor, Integer readBatchSizeInt) {
        coproProcessor.startProducer(radonKvpBbox.getQuerySet(), readBatchSizeInt);
    }

    private void callStartConsumer(CoproProcessor<RadonBboxInputEntity, RadonBboxOutputEntity> coproProcessor, String insertQuery, Integer consumerCountInt, Integer writeBatchSizeInt, ObjectMapper objectMapper) {
        coproProcessor.startConsumer(insertQuery, consumerCountInt, writeBatchSizeInt, new RadonBboxConsumerProcess(log, aMarker, action, radonKvpBbox, objectMapper));
    }

    @NotNull
    private List<URL> getCoproUrls(String coproUrl) {
        final List<URL> urls = Optional.ofNullable(coproUrl).map(s -> Arrays.stream(s.split(REGEX_URL_SPLITTER)).map(s1 -> {
            try {
                return new URL(s1);
            } catch (MalformedURLException e) {
                log.error("Error in processing the URL {}", s1, e);
                throw new HandymanException("Error in processing the URL", e, action);
            }
        }).collect(Collectors.toList())).orElse(Collections.emptyList());
        log.info("Urls for the Integrated radon bbox model :  {}", urls);
        return urls;
    }

    @Override
    public boolean executeIf() throws Exception {
        return radonKvpBbox.getCondition();
    }
}
