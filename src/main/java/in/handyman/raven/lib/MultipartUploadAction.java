package in.handyman.raven.lib;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.MultipartUpload;
import in.handyman.raven.util.ExceptionUtil;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "MultipartUpload"
)
public class MultipartUploadAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final MultipartUpload multipartUpload;

    private final Marker aMarker;

    public MultipartUploadAction(final ActionExecutionAudit action, final Logger log, final Object multipartUpload) {
        this.multipartUpload = (MultipartUpload) multipartUpload;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" MultipartUpload:" + this.multipartUpload.getName());
    }

    @Override
    public void execute() throws Exception {

        try {
            final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(multipartUpload.getResourceConn());
            jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
            log.info(aMarker, "Multipart Upload Action for {} has been started", multipartUpload.getName());
            final String insertQuery = "";
            String endPoint = multipartUpload.getEndPoint();
            final List<URL> urls = Optional.ofNullable(endPoint).map(s -> Arrays.stream(s.split(",")).map(s1 -> {
                try {
                    return new URL(s1);
                } catch (MalformedURLException e) {
                    log.error("Error in processing the URL ", e);
                    throw new RuntimeException(e);
                }
            }).collect(Collectors.toList())).orElse(Collections.emptyList());

            final CoproProcessor<MultipartUploadAction.MultipartUploadInputTable, MultipartUploadAction.MultipartUploadOutputTable> coproProcessor =
                    new CoproProcessor<>(new LinkedBlockingQueue<>(),
                            MultipartUploadAction.MultipartUploadOutputTable.class,
                            MultipartUploadAction.MultipartUploadInputTable.class,
                            jdbi, log,
                            new MultipartUploadAction.MultipartUploadInputTable(), urls, action);
            coproProcessor.startProducer(multipartUpload.getQuerySet(), Integer.valueOf(action.getContext().get("read.batch.size")));
            Thread.sleep(1000);
            coproProcessor.startConsumer(insertQuery, 1, Integer.valueOf(action.getContext().get("write.batch.size")), new MultipartUploadAction.AlchemyInfoConsumerProcess(log, aMarker, action));
            log.info(aMarker, "Multipart Upload has been completed {}  ", multipartUpload.getName());
        } catch (Exception t) {
            log.error(aMarker, "Error at multipart upload execute method {}", ExceptionUtil.toString(t));
            throw new HandymanException("Error at multipart upload execute method ", t, action);
        }
    }

    public static class AlchemyInfoConsumerProcess implements CoproProcessor.ConsumerProcess<MultipartUploadAction.MultipartUploadInputTable, MultipartUploadAction.MultipartUploadOutputTable> {
        private final Logger log;
        private final Marker aMarker;

        public final ActionExecutionAudit action;

        final OkHttpClient httpclient = new OkHttpClient.Builder()
                .connectTimeout(10, TimeUnit.MINUTES)
                .writeTimeout(10, TimeUnit.MINUTES)
                .readTimeout(10, TimeUnit.MINUTES)
                .build();

        public AlchemyInfoConsumerProcess(final Logger log, final Marker aMarker, ActionExecutionAudit action) {
            this.log = log;
            this.aMarker = aMarker;
            this.action = action;
        }

        @Override
        public List<MultipartUploadAction.MultipartUploadOutputTable> process(URL endpoint, MultipartUploadAction.MultipartUploadInputTable entity) throws Exception {

            List<MultipartUploadAction.MultipartUploadOutputTable> parentObj = new ArrayList<>();
            String inputFilePath = entity.getFilepath();
            String outputDir;
            if (entity.getOutputDir() != null) {
                outputDir = entity.getOutputDir();
            } else {
                Path path = Paths.get(inputFilePath);
                Path directory = path.getParent();
                outputDir = directory.toString();
            }

            File file = new File(inputFilePath);
            MediaType MEDIA_TYPE = MediaType.parse("application/pdf");

            RequestBody requestBody = new MultipartBody.Builder()
                    .setType(MultipartBody.FORM)
                    .addFormDataPart("file", file.getName(), RequestBody.create(file, MEDIA_TYPE))
                    .build();

            URL url = new URL(endpoint.toString() + "/?outputDir=" + outputDir);
            Request request = new Request.Builder().url(url)
                    .addHeader("accept", "*/*")
                    .post(requestBody)
                    .build();

            if (log.isInfoEnabled()) {
                log.info(aMarker, "Request has been build with the parameters {} ,inputFilePath : {}", endpoint, inputFilePath);
            }

            try (Response response = httpclient.newCall(request).execute()) {
                if (response.isSuccessful()) {
                    log.info("Response Details: {}", response);
                }
            } catch (Exception e) {
                log.error(aMarker, "The Exception occurred in multipart file upload for file {} with exception {}", inputFilePath, e.getMessage());
                HandymanException handymanException = new HandymanException(e);
                HandymanException.insertException("Exception occurred in multipart upload for file - " + inputFilePath, handymanException, this.action);
            }
            return parentObj;
        }
    }

    @AllArgsConstructor
    @NoArgsConstructor
    @Data
    @Builder
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static class MultipartUploadQueryResult {

        private String filepath;
        private String outputDir;

    }

    @AllArgsConstructor
    @NoArgsConstructor
    @Data
    @Builder
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static class MultipartUploadInputTable {

        private String filepath;
        private String outputDir;

    }


    @AllArgsConstructor
    @Data
    @Builder
    public static class MultipartUploadOutputTable implements CoproProcessor.Entity {

        @Override
        public List<Object> getRowData() {
            return null;
        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return multipartUpload.getCondition();
    }
}
