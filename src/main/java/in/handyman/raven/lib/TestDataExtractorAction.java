package in.handyman.raven.lib;

import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.testDataExtractor.TestDataExtractorInput;
import in.handyman.raven.lib.model.testDataExtractor.TestDataExtractorService;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "TestDataExtractor"
)
public class TestDataExtractorAction implements IActionExecution {
  private final ActionExecutionAudit action;
  private final Logger log;
  private final TestDataExtractorInput testDataExtractorInput;
  private final Marker aMarker;
  private final TestDataExtractorService service;

  public TestDataExtractorAction(final ActionExecutionAudit action, final Logger log,
                                 final Object testDataExtractorInput) {
    this.testDataExtractorInput = (TestDataExtractorInput) testDataExtractorInput;
    this.action = action;
    this.log = log;
    this.aMarker = MarkerFactory.getMarker("TestDataExtractor:" + this.testDataExtractorInput.getName());
    this.service = new TestDataExtractorService();
  }

  @Override
  public void execute() throws Exception {
    log.info(aMarker, "Starting TestDataExtractor action for {}", testDataExtractorInput.getName());

    String mode = testDataExtractorInput.getMode();
    List<String> inputFilePaths = testDataExtractorInput.getInputFilePaths();
    String outputPath = testDataExtractorInput.getOutputPath();
    List<String> keywords = testDataExtractorInput.getKeywords();

    log.debug(aMarker, "Mode: {}, InputFilePaths: {}, OutputPath: {}", mode, inputFilePaths != null ? inputFilePaths.size() : 0, outputPath);

    if (inputFilePaths == null || inputFilePaths.isEmpty()) {
      log.error(aMarker, "No input file paths provided for processing");
      throw new IllegalArgumentException("No input file paths provided");
    }

    // Validate that all input files are JPEGs
    for (String filePath : inputFilePaths) {
      if (!filePath.toLowerCase().endsWith(".jpg") && !filePath.toLowerCase().endsWith(".jpeg")) {
        log.error(aMarker, "Input file is not a JPEG: {}", filePath);
        throw new IllegalArgumentException("Input file is not a JPEG: " + filePath);
      }
      if (!Files.exists(Paths.get(filePath))) {
        log.error(aMarker, "Input file does not exist: {}", filePath);
        throw new IllegalArgumentException("Input file does not exist: " + filePath);
      }
    }

    if ("text".equalsIgnoreCase(mode)) {
      service.processTextExtraction(inputFilePaths, outputPath);
    } else if ("keywords".equalsIgnoreCase(mode)) {
      service.processKeywordExtraction(inputFilePaths, keywords, outputPath);
    } else {
      log.error(aMarker, "Invalid mode: {}. Supported modes: text, keywords", mode);
      throw new IllegalArgumentException("Invalid mode: " + mode);
    }

    log.info(aMarker, "TestDataExtractor action completed successfully");
  }

  @Override
  public boolean executeIf() throws Exception {
    return testDataExtractorInput.getCondition();
  }
}