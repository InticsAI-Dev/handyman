package in.handyman.raven.lib;

import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.LlmJsonParser;
import in.handyman.raven.lib.model.kvp.llm.jsonparser.LlmJsonQueryInputTable;
import in.handyman.raven.lib.model.kvp.llm.jsonparser.LlmJsonQueryOutputTable;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.stream.Collectors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "LlmJsonParser"
)
public class LlmJsonParserAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final LlmJsonParser llmJsonParser;
    public static final String READ_BATCH_SIZE = "read.batch.size";
    public static final String WRITE_BATCH_SIZE = "write.batch.size";
    private final Marker aMarker;

    public static final String DUMMY_URL = "http://localhost:10181/copro/postprocess/llmParser";

    public static final String LLM_JSON_PARSER_CONSUMER_API_COUNT = "llm.json.parser.consumer.API.count";

    public static final String INSERT_INTO = "INSERT INTO ";
    public static final String INSERT_INTO_VALUES_UPDATED = "VALUES(    ?::timestamp,?,?,?,?,?," +
            "    ?,?,?::jsonb,?,?,?,?,?,?," +
            "    ?,?,?,?,?,?,?)";

    public static final String INSERT_COLUMNS_UPDATED = "created_on, tenant_id, created_user_id, last_updated_on, last_updated_user_id,confidence, sor_item_name, answer, bbox, paper_no,origin_id, group_id, root_pipeline_id, batch_id, model_registry, extracted_image_unit, image_dpi, image_height, image_width, sor_container_id, sor_item_label,section_alias";


    public LlmJsonParserAction(final ActionExecutionAudit action, final Logger log,
                               final Object llmJsonParser) {
        this.llmJsonParser = (LlmJsonParser) llmJsonParser;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" LlmJsonParser:" + this.llmJsonParser.getName());

    }

    @Override
    public void execute() {
        try {
            final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(llmJsonParser.getResourceConn());
            jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
            log.info(aMarker, "Llm json parser action {} has been started ", llmJsonParser.getName());

            final List<URL> urls = Optional.of(DUMMY_URL).map(s -> Arrays.stream(s.split(",")).map(s1 -> {
                try {
                    return new URL(s1);
                } catch (MalformedURLException e) {
                    log.error("Error in processing the URL ", e);
                    throw new HandymanException("Error in processing the URL", e, action);
                }
            }).collect(Collectors.toList())).orElse(Collections.emptyList());


            Integer readBatchSize = Integer.valueOf(action.getContext().get(READ_BATCH_SIZE));

            Integer consumerApiCount = Integer.valueOf(action.getContext().get(LLM_JSON_PARSER_CONSUMER_API_COUNT));

            final CoproProcessor<LlmJsonQueryInputTable, LlmJsonQueryOutputTable> coproProcessor = new CoproProcessor<>(new LinkedBlockingQueue<>(),
                    LlmJsonQueryOutputTable.class,
                    LlmJsonQueryInputTable.class,
                    llmJsonParser.getResourceConn(), log,
                    new LlmJsonQueryInputTable(), urls, action);

            log.info(aMarker, "Consumer API count for LLM JSON parser is {}", consumerApiCount);
            String insertQuery = INSERT_INTO + llmJsonParser.getOutputTable() + " ( " + INSERT_COLUMNS_UPDATED + " ) " + INSERT_INTO_VALUES_UPDATED;
            coproProcessor.startProducer(llmJsonParser.getQuerySet(), readBatchSize);
            Thread.sleep(1000);

            Integer writeBatchSize = Integer.valueOf(action.getContext().get(WRITE_BATCH_SIZE));
            LlmJsonParserConsumerProcess llmJsonParserConsumerProcess = new LlmJsonParserConsumerProcess(log, aMarker, action, llmJsonParser);

            coproProcessor.startConsumer(insertQuery, consumerApiCount, writeBatchSize, llmJsonParserConsumerProcess);
            log.info(aMarker, "LLM JSON parser Action has been completed {}  ", llmJsonParser.getName());

        } catch (Exception e) {
            action.getContext().put(llmJsonParser.getName().concat(".error"), "true");
            log.error(aMarker, "The Exception occurred ", e);
            throw new HandymanException("Exception occurred in asset info execute", e, action);
        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return llmJsonParser.getCondition();
    }
}