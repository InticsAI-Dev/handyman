package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.Intellimatch;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;

import in.handyman.raven.util.InstanceUtil;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
    actionName = "Intellimatch"
)
public class IntellimatchAction implements IActionExecution {
  private final ActionExecutionAudit action;

  private final Logger log;

  private final Intellimatch intellimatch;
  final String URI;
  private final Marker aMarker;

  public IntellimatchAction(final ActionExecutionAudit action, final Logger log,
      final Object intellimatch) {
    this.intellimatch = (Intellimatch) intellimatch;
    this.action = action;
    this.log = log;
    this.URI = action.getContext().get("copro.autorotation.url");

    this.aMarker = MarkerFactory.getMarker(" Intellimatch:"+this.intellimatch.getName());
  }

  @Override
  public void execute() throws Exception {
    log.info(aMarker, "<-------intelli match process for {} has been started------->" + intellimatch.getName());
    final OkHttpClient httpclient = InstanceUtil.createOkHttpClient();
    final ObjectMapper mapper = new ObjectMapper();

    final ObjectNode objectNode = mapper.createObjectNode();
    objectNode.put("inputSentence", intellimatch.getActualSentence());
    objectNode.put("sentences", intellimatch.getCompareSentence());
    objectNode.put("intellimatch", intellimatch.getMatchResult());
    Request request = new Request.Builder().url(URI).build();

    Response response = httpclient.newCall(request).execute();
    String responseBody = ((Response) response).body().string();
  }

  @Override
  public boolean executeIf() throws Exception {
    return intellimatch.getCondition();
  }
}
