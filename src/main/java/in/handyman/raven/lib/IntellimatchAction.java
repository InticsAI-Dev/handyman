package in.handyman.raven.lib;

import com.google.common.net.MediaType;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.Intellimatch;

import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.stream.Collectors;

import in.handyman.raven.lib.model.common.IntellimatchConsumerProcess;
import in.handyman.raven.lib.model.common.IntellimatchInputTable;
import in.handyman.raven.lib.model.common.IntellimatchOutputTable;
import in.handyman.raven.util.ExceptionUtil;
import in.handyman.raven.util.InstanceUtil;
import okhttp3.OkHttpClient;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "Intellimatch"
)
public class IntellimatchAction implements IActionExecution {
  private final ActionExecutionAudit action;

  private final Logger log;

  private final Intellimatch intellimatch;

  private final Marker aMarker;
  final String URI;
  final OkHttpClient httpclient;
  private static String httpClientTimeout = new String();
  private static final MediaType MediaTypeJSON = MediaType.parse("application/json; charset=utf-8");


  public IntellimatchAction(final ActionExecutionAudit action, final Logger log,
                            final Object intellimatch) {
    this.intellimatch = (Intellimatch) intellimatch;
    this.URI = action.getContext().get("copro.intelli-match.url");
    this.action = action;
    this.httpclient = InstanceUtil.createOkHttpClient();
    this.log = log;
    this.aMarker = MarkerFactory.getMarker(" Intellimatch:" + this.intellimatch.getName());
    this.httpClientTimeout = action.getContext().get("okhttp.client.timeout");

  }

  @Override
  public void execute() throws Exception {

    log.info(aMarker, "master data comparison process for {} has been started", intellimatch.getName());
    try {

      final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(intellimatch.getResourceConn());
      jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
      // build insert prepare statement with output table columns
      final String insertQuery = "INSERT INTO " + intellimatch.getMatchResult() +
              " (file_name,origin_id,group_id,created_on,root_pipeline_id,actual_value, extracted_value,confidence_score,intelli_match,status,stage,message,model_name,model_version,tenant_id,request,response,endpoint)" +
              " VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?, ?,?,?,?);";
      log.info(aMarker, "intelli match Insert query {}", insertQuery);

      //3. initiate copro processor and copro urls
      final List<URL> urls = Optional.ofNullable(action.getContext().get("copro.intelli-match.url")).map(s -> Arrays.stream(s.split(",")).map(s1 -> {
        try {
          return new URL(s1);
        } catch (MalformedURLException e) {
          log.error("Error in processing the URL ", e);
          throw new HandymanException("Error in processing the URL", e, action);
        }
      }).collect(Collectors.toList())).orElse(Collections.emptyList());
      log.info(aMarker, "intelli match copro urls {}", urls);

      final CoproProcessor<IntellimatchInputTable, IntellimatchOutputTable> coproProcessor =
              new CoproProcessor<>(new LinkedBlockingQueue<>(),
                      IntellimatchOutputTable.class,
                      IntellimatchInputTable.class,
                      jdbi, log,
                      new IntellimatchInputTable(), urls, action);
      log.info(aMarker, "intelli match copro Processor initialization  {}", coproProcessor);

      //4. call the method start producer from coproprocessor
      Integer readBatchSize = Integer.valueOf(action.getContext().get("read.batch.size"));
      coproProcessor.startProducer(intellimatch.getInputSet(), readBatchSize);
      log.info(aMarker, "intelli match startProducer called read batch size {}", readBatchSize);
      Thread.sleep(1000);
      Integer consumerCount = Integer.valueOf(action.getContext().get("consumer.intellimatch.API.count"));
      Integer writeBatchSize = Integer.valueOf(action.getContext().get("write.batch.size"));
      coproProcessor.startConsumer(insertQuery, consumerCount, writeBatchSize,
              new IntellimatchConsumerProcess(log, aMarker, action));
      log.info(aMarker, "intelli match coproProcessor startConsumer called consumer count {} write batch count {} ", consumerCount, writeBatchSize);

    } catch (Exception ex) {
      log.error(aMarker, "Error in execute method for Drug Match {} ", ExceptionUtil.toString(ex));
      throw new HandymanException("Error in execute method for Drug Match", ex, action);
    }
    log.info(aMarker, "Intellimatch process for {} has been completed", intellimatch.getName());
  }

  @Override
  public boolean executeIf() throws Exception {
    return intellimatch.getCondition();
  }
}
