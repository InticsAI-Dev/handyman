package in.handyman.raven.lib;

import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.CheckboxAttribution;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.stream.Collectors;

import in.handyman.raven.lib.model.checkboxAttribution.CheckboxAttributionConsumerProcess;
import in.handyman.raven.lib.model.checkboxAttribution.CheckboxAttributionInputTable;
import in.handyman.raven.lib.model.checkboxAttribution.CheckboxAttributionOutputTable;

import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
    actionName = "CheckboxAttribution"
)
public class CheckboxAttributionAction implements IActionExecution {
  private final ActionExecutionAudit action;

  private final Logger log;

  private final CheckboxAttribution checkboxAttribution;

  private final Marker aMarker;

  public CheckboxAttributionAction(final ActionExecutionAudit action, final Logger log,
      final Object checkboxAttribution) {
    this.checkboxAttribution = (CheckboxAttribution) checkboxAttribution;
    this.action = action;
    this.log = log;
    this.aMarker = MarkerFactory.getMarker(" CheckboxAttribution:"+this.checkboxAttribution.getName());
  }

  @Override
  public void execute() throws Exception {
    final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(checkboxAttribution.getResourceConn());
    jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
    log.info(aMarker, "kvp extraction with llm Action for {} has been started", checkboxAttribution.getName());
    final String INSERT_INTO = "INSERT INTO";
    final String COLUMN_LIST = "created_on, created_user_id, last_updated_on, last_updated_user_id, input_file_path," +
            " paper_no, origin_id, process_id, action_id, process, group_id, tenant_id, " +
            "root_pipeline_id, batch_id, model_registry, status, stage, message, category, container_name, predicted_value, state, confidence_score, bbox";
    final String VAL_STRING_LIST = "VALUES( ?,?,?,?,?," +
            "?,?,?,?,?" +
            ",?,?,?,?,?," +
            "?,?, ?, ?" +
            ",?,?,?,?,?::jsonb)";
    String targetTableName = checkboxAttribution.getOutputTable();

    final String insertQuery = INSERT_INTO + " " + targetTableName + "(" + COLUMN_LIST + ") " + " " + VAL_STRING_LIST;
    final Integer consumerApiCount = Integer.valueOf(action.getContext().get("Radon.kvp.consumer.API.count"));
    final String writeBatchSizeStr = this.action.getContext().get("write.batch.size");
    final Integer writeBatchSize = Integer.valueOf(writeBatchSizeStr);
    final Integer readBatchSize = Integer.valueOf(action.getContext().get("read.batch.size"));


    final List<URL> urls = Optional.ofNullable(checkboxAttribution.getEndpoint()).map(s -> Arrays.stream(s.split(",")).map(urlItem -> {
      try {
        return new URL(urlItem);
      } catch (MalformedURLException e) {
        log.error("Error in processing the URL {}", urlItem, e);
        throw new HandymanException("Error in processing the URL", e, action);
      }
    }).collect(Collectors.toList())).orElse(Collections.emptyList());

    final CoproProcessor<CheckboxAttributionInputTable, CheckboxAttributionOutputTable> coproProcessor =
            new CoproProcessor<>(new LinkedBlockingQueue<>(),
                    CheckboxAttributionOutputTable.class,
                    CheckboxAttributionInputTable.class,
                    jdbi, log,
                    new CheckboxAttributionInputTable(), urls, action);

    //4. call the method start producer from coproprocessor
    CheckboxAttributionConsumerProcess checkboxAttributionConsumerProcess = new CheckboxAttributionConsumerProcess(log, aMarker, action, this);
    coproProcessor.startProducer(checkboxAttribution.getQuerySet(), readBatchSize);
    log.info("start producer method from copro processor ");
    Thread.sleep(1000);
    //8. call the method start consumer from coproprocessor
    coproProcessor.startConsumer(insertQuery, consumerApiCount, writeBatchSize, checkboxAttributionConsumerProcess);
    log.info("start consumer method from copro processor ");

  }

  @Override
  public boolean executeIf() throws Exception {
    return checkboxAttribution.getCondition();
  }

    public int getTimeOut() {
    return 0;
    }
}
