package in.handyman.raven.lib;

import in.handyman.raven.context.ActionContext;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.LambdaAutowire;
import in.handyman.raven.lambda.LambdaExecution;
import in.handyman.raven.lib.model.RestApi;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.util.Objects;

import in.handyman.raven.util.ExceptionUtil;
import lombok.extern.log4j.Log4j2;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import org.apache.logging.log4j.MarkerManager;

/**
 * Auto Generated By Raven
 */
@LambdaAutowire(
    lambdaName = "RestApi"
)
@Log4j2
public class RestApiAction implements LambdaExecution {
  private final ActionContext actionContext;

  private final RestApi context;

  private final MarkerManager.Log4jMarker aMarker;

  public RestApiAction(final ActionContext actionContext, final Object context) {
    this.context = (RestApi) context;
    this.actionContext = actionContext;
    this.aMarker = new MarkerManager.Log4jMarker("RestApi");
    this.actionContext.getDetailMap().putPOJO("context", context);
  }

  @Override
  public void execute() throws Exception {
      var url = context.getUrl();
      var method = context.getMethod();
      var name = context.getName();
      var payload = context.getValue();
      var id = actionContext.getProcessId();
      var header = context.getHeader();
      log.info(aMarker, " id#{}, name#{}, url#{}, payload#{}", id, name, url, payload);
      final OkHttpClient client = new OkHttpClient();
      final Request request;
      final Request.Builder builder = new Request.Builder().url(url);
      if (header.isArray()) {
          header.forEach(jsonNode -> jsonNode.fields()
                  .forEachRemaining(stringJsonNodeEntry -> builder
                          .header(stringJsonNodeEntry.getKey(),
                                  stringJsonNodeEntry.getValue().textValue())));
      } else {
          header.fields()
                  .forEachRemaining(stringJsonNodeEntry -> builder
                          .header(stringJsonNodeEntry.getKey(),
                                  stringJsonNodeEntry.getValue().textValue()));
      }
      if (Objects.equals("GET", method)) {
          request = builder.get().build();
      } else if (Objects.equals("DELETE", method)) {
          request = builder.delete().build();
      } else {
          final MediaType contentType = MediaType.get("application/json; charset=utf-8");
          if (Objects.equals("POST", method)) {
              final RequestBody body = RequestBody.create(payload.toString(), contentType);
              request = builder.post(body).build();
          } else if (Objects.equals("PUT", method)) {
              final RequestBody body = RequestBody.create(payload.toString(), contentType);
              request = builder.put(body).build();
          } else {
              throw new HandymanException("Unknown HTTP method");
          }
      }
      try {
          final Response execute = client.newCall(request).execute();
          log.info("Rest Api Response Content: " + execute.body() + " for URL: " + url);
      } catch (Exception e) {
          log.error(aMarker, "Stopping execution, {}", url, e);
          actionContext.getDetailMap().put("Exception", ExceptionUtil.toString(e));
      }

  }

  @Override
  public boolean executeIf() throws Exception {
    return context.getCondition();
  }
}
