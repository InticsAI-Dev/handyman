package in.handyman.raven.lib;

import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.DocnetResult;
import in.handyman.raven.util.CommonQueryUtil;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.jdbi.v3.core.Jdbi;
import org.json.JSONArray;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "DocnetResult"
)
public class DocnetResultAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final DocnetResult docnetResult;

    private final Marker aMarker;

    public DocnetResultAction(final ActionExecutionAudit action, final Logger log,
                              final Object docnetResult) {
        this.docnetResult = (DocnetResult) docnetResult;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" DocnetResult:" + this.docnetResult.getName());
    }

    @Override
    public void execute() throws Exception {

        log.info(aMarker, "<-------questions from docnet json Action for {} has been started------->" + docnetResult.getName());
        final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(docnetResult.getResourceConn());
        final List<Map<String, Object>> results = new ArrayList<>();
        jdbi.useTransaction(handle -> {
            final List<String> formattedQuery = CommonQueryUtil.getFormattedQuery(docnetResult.getJsonSql());
            formattedQuery.forEach(sqlToExecute -> {
                results.addAll(handle.createQuery(sqlToExecute).mapToMap().stream().collect(Collectors.toList()));
                final int size = results.size();

                if (size > 0) {
                    results.forEach(jsonData -> {
                        final String groupId = Optional.ofNullable(jsonData.get("group_id")).map(String::valueOf).orElse(null);
                        final Integer paperNo = Optional.ofNullable(jsonData.get("paper_no")).map(String::valueOf).map(Integer::parseInt).orElse(null);
                        final String fileRefId = Optional.ofNullable(jsonData.get("file_ref_id")).map(String::valueOf).orElse(null);
                        final Integer sorAttributionType = Optional.ofNullable(jsonData.get("sor_item_name")).map(String::valueOf).map(Integer::parseInt).orElse(null);
                        final String createdUserId = Optional.ofNullable(jsonData.get("created_user_id")).map(String::valueOf).orElse(null);
                        final String tenantId = Optional.ofNullable(jsonData.get("tenant_id")).map(String::valueOf).orElse(null);
                        final String response = Optional.ofNullable(jsonData.get("response")).map(String::valueOf).orElse(null);

                        JSONArray jObj = new JSONArray(response);

                        jObj.forEach(resultObject -> {
                            JSONObject obj = (JSONObject) resultObject;
                            obj.getString("sorKey");
                            obj.getString("sorId");
                            JSONArray result = obj.getJSONArray("attributionResult");
                            for (int i = 0; i < result.length(); i++) {
                                JSONObject object = (JSONObject) result.get(i);
                                final DocnetResultTable docnetResult = DocnetResultTable.builder()
                                        .fileRefId(fileRefId)
                                        .paperNo(paperNo)
                                        .groupId(groupId)
                                        .triageResultId(12345678)
                                        .sorItemId(obj.getInt("sorId"))
                                        .sorItemName(obj.getString("sorKey"))
                                        .answer(object.getString("predictedAttributionValue"))
                                        .question(object.getString("question"))
                                        .createdUserId(createdUserId)
                                        .tenantId(tenantId)
                                        .confidenceScore(123456)
                                        .build();
                                insertDocnutResult(jdbi, docnetResult);

                            }
                        });
                    });

                }
            });
        });

        log.info(aMarker, "<-------questions from docnet json Action for {} has been completed------->" + docnetResult.getName());

    }


    @Override
    public boolean executeIf() throws Exception {
        return docnetResult.getCondition();
    }

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public static class DocnetResultTable {

        private String fileRefId;
        private Integer paperNo;
        private String groupId;
        private Integer triageResultId;
        private Integer sorItemId;
        private String sorItemName;
        private String question;
        private String answer;
        private String createdUserId;
        private String tenantId;
        private Integer confidenceScore;
    }

    private void insertDocnutResult(final Jdbi jdbi, final DocnetResultTable docnetResultTable) {
        jdbi.useTransaction(handle -> {

            handle.createUpdate("INSERT INTO truth_attribution.docnet_result (file_ref_id,paper_no,group_id,triage_result_id,sor_item_id,sor_item_name,question,answer,created_user_id,tenant_id,confidence_score)" +
                            " select  :fileRefId , :paperNo, :groupId, :triageResultId, :sorItemId, :sorItemName, :question, :answer, :createdUserId, :tenantId, :confidenceScore;")
                    .bindBean(docnetResultTable)
                    .execute();
        });
    }
}
