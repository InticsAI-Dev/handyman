package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.node.ObjectNode;
import com.zaxxer.hikari.HikariDataSource;
import in.handyman.raven.connection.ResourceAccess;
import in.handyman.raven.context.ActionContext;
import in.handyman.raven.context.ProcessContext;
import in.handyman.raven.process.ProcessEngine;
import in.handyman.raven.lambda.LambdaAutowire;
import in.handyman.raven.lambda.LambdaExecution;
import in.handyman.raven.lib.model.CallProcess;
import in.handyman.raven.util.CommonQueryUtil;
import lombok.extern.log4j.Log4j2;
import org.apache.logging.log4j.MarkerManager;

import java.util.Map;

/**
 * Auto Generated By Raven
 */
@LambdaAutowire(lambdaName = "CallProcess")
@Log4j2
public class CallProcessAction implements LambdaExecution {

    private final ActionContext actionContext;
    private final CallProcess context;
    private final MarkerManager.Log4jMarker aMarker;

    public CallProcessAction(final ActionContext actionContext, final Object context) {
        this.context = (CallProcess) context;
        this.actionContext = actionContext;
        this.aMarker = new MarkerManager.Log4jMarker("CallProcess");
        this.actionContext.getDetailMap().putPOJO("context", context);
    }

    @Override
    public void execute() throws Exception {
        final String fileRelativePath = context.getSource();
        var targetProcess = context.getTarget();
        var dbSrc = context.getDatasource();
        var sql = context.getValue().replaceAll("\"", "");
        log.info(aMarker, " id#{}, name#{}, calledProcess#{}, calledFile#{}, db=#{}", actionContext.getProcessId(), actionContext.getName(), targetProcess, fileRelativePath, dbSrc);
        final HikariDataSource source = ResourceAccess.rdbmsConn(dbSrc);
        try (var conn = source.getConnection()) {
            try (var stmt = conn.createStatement()) {
                final Map<String, String> configContext = actionContext.getContext();
                final ObjectNode detailMap = actionContext.getDetailMap();
                try (var rs = stmt.executeQuery(sql)) {
                    var columnCount = rs.getMetaData().getColumnCount();
                    while (rs.next()) {
                        CommonQueryUtil.addKeyConfig(configContext, detailMap, rs, columnCount);
                        final ProcessContext processContext = ProcessEngine.start(fileRelativePath, targetProcess, actionContext.getProcessId(), configContext);
                        log.info(aMarker, processContext);
                    }
                }
            }
        }
        log.info(aMarker, "Completed name#{}, calledProcess#{}, calledFile#{}, db=#{}", actionContext.getName(), targetProcess, fileRelativePath, dbSrc);
    }



    @Override
    public boolean executeIf() {
        return context.getCondition();
    }
}
