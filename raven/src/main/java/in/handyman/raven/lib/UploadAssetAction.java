package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.UploadAsset;

import java.io.File;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.util.Collections;
import java.util.concurrent.TimeUnit;

import okhttp3.*;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "UploadAsset"
)
public class UploadAssetAction implements IActionExecution {
  private final ActionExecutionAudit action;

  private final Logger log;

  private final UploadAsset uploadAsset;
  private final ObjectMapper mapper = new ObjectMapper();
  private static final MediaType MediaTypeJSON = MediaType.parse("application/json; charset=utf-8");
  private final String URI;
  MediaType MEDIA_TYPE_PNG = MediaType.parse("image/png/pdf");

  private final Marker aMarker;

  public UploadAssetAction(final ActionExecutionAudit action, final Logger log,
                           final Object uploadAsset) {
    this.uploadAsset = (UploadAsset) uploadAsset;
    this.action = action;
    this.log = log;
    this.aMarker = MarkerFactory.getMarker(" UploadAsset:"+this.uploadAsset.getName());
    this.URI=action.getContext().get("copro.upload-asset.url");
  }

  @Override
  public void execute() throws Exception {
    OkHttpClient httpclient = new OkHttpClient.Builder()
            .connectTimeout(10, TimeUnit.MINUTES)
            .writeTimeout(10, TimeUnit.MINUTES)
            .readTimeout(10, TimeUnit.MINUTES).build();

    File file = new File(uploadAsset.getFilePath());
    RequestBody requestBody = new MultipartBody.Builder().setType(MultipartBody.FORM)
            .addFormDataPart("multipartFile", file.getName(), RequestBody.create(MEDIA_TYPE_PNG, file))
            .addFormDataPart("templateId",uploadAsset.getTemplateId())
            .build();

    Request request = new Request.Builder().url(URI)
            .addHeader("Authorization", "Bearer " + uploadAsset.getToken())
            .post(requestBody).build();
    log.info(aMarker, "The request got it successfully to upload Asset {}",
            uploadAsset.getFilePath());
    try (Response response = httpclient.newCall(request).execute()) {
      String responseBody = response.body().string();
      JSONObject jsonResult = new JSONObject(responseBody);
      String name = uploadAsset.getName();
      log.info(aMarker, "The response got it successfully for upload Asset as ==> {}",
              responseBody);
      if (response.isSuccessful()) {
        action.getContext().put(name, jsonResult.getJSONObject("asset").getString("assetId"));
        log.info(aMarker, "The Successful Response  {} {}", name, responseBody);
      }else {
        log.info(aMarker, "The Failure Response  {} {}", name, responseBody);
      }
      log.info(aMarker, "The response got it successfully for upload Asset as ==> {}",
              action);
    }catch (Exception e){
      log.info(aMarker, "The Exception occurred ",e);
      throw new HandymanException("Failed to execute", e);
    }
  }

  @Override
  public boolean executeIf() throws Exception {
    return uploadAsset.getCondition();
  }
}
