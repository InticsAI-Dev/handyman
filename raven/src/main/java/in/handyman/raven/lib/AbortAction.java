package in.handyman.raven.lib;

import in.handyman.raven.process.Context;
import in.handyman.raven.exception.AbortException;
import in.handyman.raven.action.Action;
import in.handyman.raven.action.IActionExecution;
import in.handyman.raven.lib.model.Abort;
import lombok.extern.log4j.Log4j2;
import org.apache.logging.log4j.MarkerManager;

/**
 * Auto Generated By Raven
 */
@Action(actionName = "Abort")
@Log4j2
public class AbortAction implements IActionExecution {

    private final Context context;
    private final Abort abort;
    private final MarkerManager.Log4jMarker aMarker;

    public AbortAction(final Context context, final Object abort) {
        this.abort = (Abort) abort;
        this.context = context;
        this.aMarker = new MarkerManager.Log4jMarker("Abort");
        this.context.getDetailMap().putPOJO("context", this.context);
    }

    @Override
    public void execute() {
        log.info(aMarker, "Abort action id#{}, name#{}, calledProcess#{}, message#{}", context.getLambdaId(), context.getName(),
                context.getProcessName(), abort.getValue());
        throw new AbortException(abort.getValue());
    }

    @Override
    public boolean executeIf() {
        final Boolean condition = abort.getCondition();
        log.info(aMarker, "Completed evaluation to execute id#{} actionId#{}, name#{}, expression#{}",
                context.getProcessId(), context.getLambdaId(),
                context.getName(), condition);
        context.getDetailMap().put("condition-output", condition);
        return condition;
    }
}
