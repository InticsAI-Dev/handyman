package in.handyman.raven.lib;

import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.ThresholdCheck;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(actionName = "ThresholdCheck")
public class ThresholdCheckAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final ThresholdCheck thresholdCheck;

    private final Marker aMarker;

    public ThresholdCheckAction(final ActionExecutionAudit action, final Logger log, final Object thresholdCheck) {
        this.thresholdCheck = (ThresholdCheck) thresholdCheck;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" ThresholdCheck:" + this.thresholdCheck.getName());
    }

    @Override
    public void execute() throws Exception {
        String name = thresholdCheck.getName() + "_response";
        JSONObject inputObject = new JSONObject(thresholdCheck.getInput());
        JSONObject responseObject = new JSONObject();
//        List<String> thresholdResponse = new ArrayList<>();
        inputObject.keys().forEachRemaining(entry -> {
            final double predictedValue = Double.parseDouble(String.valueOf(inputObject.get(entry)));
            final double thresholdValue = Double.parseDouble(thresholdCheck.getThreshold());
            if (predictedValue >= thresholdValue) {
                responseObject.put(entry, inputObject.get(entry));
//                thresholdResponse.add(entry);
            }
        });
//        JSONObject response = new JSONObject();
        if (responseObject.isEmpty()) action.getContext().put(name, "");
//            response = null;
        else action.getContext().put(name, String.valueOf(responseObject));


        log.info(aMarker, "The Successful Response for {} --> {}", name, responseObject);

    }

    @Override
    public boolean executeIf() throws Exception {
        return thresholdCheck.getCondition();
    }
}
