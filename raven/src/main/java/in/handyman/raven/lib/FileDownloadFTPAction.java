package in.handyman.raven.lib;

import com.jcraft.jsch.*;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.FileDownloadFTP;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "FileDownloadFTP"
)
public class FileDownloadFTPAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final FileDownloadFTP fileDownloadFTP;

    private final Marker aMarker;

    public FileDownloadFTPAction(final ActionExecutionAudit action, final Logger log,
                                 final Object fileDownloadFTP) {
        this.fileDownloadFTP = (FileDownloadFTP) fileDownloadFTP;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" FileDownloadFTP:" + this.fileDownloadFTP.getName());
    }

    @Override
    public void execute() throws Exception {
        final String remoteHost = fileDownloadFTP.getHost();
        final String userName = fileDownloadFTP.getUserName();
        final String password = fileDownloadFTP.getPassword();
        final int remotePort = Integer.parseInt(fileDownloadFTP.getPort());
        final int sessionTimeout = Integer.parseInt(fileDownloadFTP.getSessionTimeOut());
        final int channelTimeout = Integer.parseInt(fileDownloadFTP.getChannelTimeOut());
        final String destDir = fileDownloadFTP.getDestDir();
        final String remoteFile = fileDownloadFTP.getSourceFile();
        log.info(aMarker, "Got the sftp details for the host {} and user {}", remoteHost, userName);
        Session jschSession = null;
        try {
            JSch jsch = new JSch();
            jsch.setKnownHosts("/home/sanjeeya.v@zucisystems.com/.ssh/known_hosts");
            jschSession = jsch.getSession(userName, remoteHost, remotePort);
            jschSession.setPassword(password);
            jschSession.connect(sessionTimeout);
            Channel sftp = jschSession.openChannel("sftp");
            sftp.connect(channelTimeout);
            log.info(aMarker, "sftp connection established for the host {} and user {}", remoteHost, userName);
            ChannelSftp channelSftp = (ChannelSftp) sftp;
            if (!(remoteFile.isEmpty())) {
                channelSftp.get(remoteFile, destDir);
                log.info(aMarker, "Downloaded {} file and saved in the {} directory", remoteFile, destDir);
                channelSftp.exit();
            }
        } catch (JSchException | SftpException e) {
            e.printStackTrace();
        } finally {
            if (jschSession != null) {
                jschSession.disconnect();
            }
        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return fileDownloadFTP.getCondition();
    }
}
