package in.handyman.raven.lib;

import in.handyman.raven.action.Action;
import in.handyman.raven.action.IActionExecution;
import in.handyman.raven.context.ActionContext;
import in.handyman.raven.lib.model.SpawnProcess;
import lombok.extern.log4j.Log4j2;
import org.apache.logging.log4j.MarkerManager;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executors;

/**
 * Auto Generated By Raven
 */
@Action(
        actionName = "SpawnProcess"
)
@Log4j2
public class SpawnProcessAction implements IActionExecution {
    private final ActionContext actionContext;

    private final SpawnProcess context;

    private final MarkerManager.Log4jMarker aMarker;

    public SpawnProcessAction(final ActionContext actionContext, final Object context) {
        this.context = (SpawnProcess) context;
        this.actionContext = actionContext;
        this.aMarker = new MarkerManager.Log4jMarker("SpawnProcess");
        this.actionContext.getDetailMap().putPOJO("context", context);
    }

    @Override
    public void execute() throws Exception {
        log.info(aMarker," id: {}, name: {}", actionContext.getLambdaId(), context.getName());
        var executor = Executors.newWorkStealingPool();
        var processWorker = new LambdaCallable(context.getSource(),
                context.getTarget(), actionContext.getProcessId(),
                actionContext.getContext(), null);
        executor.submit(processWorker);
    }

    @Override
    public boolean executeIf() throws Exception {
        return context.getCondition();
    }
}
