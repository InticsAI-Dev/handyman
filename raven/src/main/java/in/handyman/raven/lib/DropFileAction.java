package in.handyman.raven.lib;

import in.handyman.raven.context.ActionContext;
import in.handyman.raven.lambda.LambdaAutowire;
import in.handyman.raven.lambda.LambdaExecution;
import in.handyman.raven.lib.model.DropFile;
import lombok.extern.log4j.Log4j2;
import org.apache.logging.log4j.MarkerManager;

import java.io.File;
import java.nio.file.Files;

/**
 * Auto Generated By Raven
 */
@LambdaAutowire(lambdaName = "DropFile")
@Log4j2
public class DropFileAction implements LambdaExecution {

    private final ActionContext actionContext;
    private final DropFile context;
    private final MarkerManager.Log4jMarker aMarker;

    public DropFileAction(final ActionContext actionContext, final Object context) {
        this.context = (DropFile) context;
        this.actionContext = actionContext;
        this.aMarker = new MarkerManager.Log4jMarker("DropFile");
        this.actionContext.getDetailMap().putPOJO("context", context);
    }

    @Override
    public void execute() throws Exception {
        var filePath = context.getTarget();
        var name = context.getName();
        var id = actionContext.getProcessId();

        log.info(aMarker, " id#{}, name#{}, file#{}", id, name, filePath);

        var file = new File(filePath);
        Files.deleteIfExists(file.toPath());
        log.info(aMarker, " Completed id#{}, name#{}, file#{}", id, name, file);
    }

    @Override
    public boolean executeIf() throws Exception {
        return context.getCondition();
    }
}
