package in.handyman.raven.lib;

import in.handyman.raven.action.Action;
import in.handyman.raven.action.IActionExecution;
import in.handyman.raven.context.ActionContext;
import in.handyman.raven.lib.model.DogLeg;
import lombok.extern.log4j.Log4j2;
import org.apache.logging.log4j.MarkerManager;

import java.util.Collections;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executors;

/**
 * Auto Generated By Raven
 */
@Action(
        actionName = "DogLeg"
)
@Log4j2
public class DogLegAction implements IActionExecution {
    private final ActionContext actionContext;

    private final DogLeg context;

    private final MarkerManager.Log4jMarker aMarker;

    public DogLegAction(final ActionContext actionContext, final Object context) {
        this.context = (DogLeg) context;
        this.actionContext = actionContext;
        this.aMarker = new MarkerManager.Log4jMarker("DogLeg");
        this.actionContext.getDetailMap().putPOJO("context", context);
    }

    @Override
    public void execute() throws Exception {
        var processList = context.getProcessList();
        log.info(aMarker," id: {}, name: {}", actionContext.getLambdaId(), context.getName());
        var countDownLatch = new CountDownLatch(processList.size());
        var inheritContext = Objects.equals(context.getInheritContext(), "true");
        var executor = Executors.newWorkStealingPool();
        final Map<String, String> config = inheritContext ? actionContext.getContext() : Collections.emptyMap();
        processList.forEach(process -> {
            var processName = process.getName();
            var fileRelativePath = process.getTarget();
            var processWorker = new LambdaCallable(fileRelativePath,
                    processName, actionContext.getProcessId(),
                    config, countDownLatch);
            executor.submit(processWorker);
        });
        countDownLatch.await();
    }

    @Override
    public boolean executeIf() throws Exception {
        return context.getCondition();
    }
}
