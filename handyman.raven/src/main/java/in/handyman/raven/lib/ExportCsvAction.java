package in.handyman.raven.lib;

import com.opencsv.CSVWriter;
import com.zaxxer.hikari.HikariDataSource;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.Action;
import in.handyman.raven.lib.model.ExportCsv;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import in.handyman.raven.util.ExceptionUtil;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
    actionName = ExportCsvAction.EXPORT_CSV
)
public class ExportCsvAction implements IActionExecution {

    protected static final String EXPORT_CSV = "ExportCsv";

    private final Action action;

  private final Logger log;

  private final ExportCsv exportCsv;

  private final Marker aMarker;

  public ExportCsvAction(final Action action, final Logger log, final Object exportCsv) {
    this.exportCsv = (ExportCsv) exportCsv;
    this.action = action;
    this.log = log;
    this.aMarker = MarkerFactory.getMarker(" ExportCsv:"+this.exportCsv.getName());
  }


    @Override
    public void execute() throws Exception {
        var dbSrc = exportCsv.getSource();
        var executionSource = exportCsv.getExecutionSource();
        var location = exportCsv.getTargetLocation();
        var execStmt = exportCsv.getStmt();
        log.info(aMarker, "Starting the execution with id {} dbSrc {} execStmt {} location {} executionSource {}", action.getActionId(), dbSrc, execStmt, location, executionSource);
        final HikariDataSource hikariDataSource = ResourceAccess.rdbmsConn(dbSrc);
        log.info(aMarker, "Created a hikariDataSource for rdbms connection src {}", dbSrc);
        var sql = new ArrayList<String>();
        try (var con = hikariDataSource.getConnection()) {
            try (var stmt = con.createStatement()) {
                log.info("Executing sql statement {}", execStmt);
                var result = stmt.executeQuery(execStmt);
                while (result.next()) {
                    sql.add(result.getString(1));
                }
            } catch (SQLException ex) {
                log.error(aMarker, "Stopping execution, General Error executing sql for {} with for campaign {}", execStmt, ex);
                log.info(execStmt + ".exception", ExceptionUtil.toString(ex));
                throw new HandymanException("Process failed", ex);
            }
        }
        if (!sql.isEmpty()) {
            getSqlExecution(sql, executionSource, location);
        } else {
            log.error("SQL stmts are empty");
        }
    }

    private void getSqlExecution(final List<String> sql, final String executionSource, final String location) {

        for (var execStmt : sql) {
            final HikariDataSource hikariDataSource = ResourceAccess.rdbmsConn(executionSource);
            log.info(aMarker, "Created a hikariDataSource for rdbms connection src {}", executionSource);
            try (var con = hikariDataSource.getConnection()) {
                try (var stmt = con.createStatement()) {
                    log.info("Executing sql statement {}", execStmt);
                    var result = stmt.executeQuery(execStmt);
                    performWriteCsv(result, location);
                }
            } catch (SQLException ex) {
                log.error(aMarker, "Stopping execution, General Error executing sql for {} with for campaign {}", execStmt, ex);
                log.info(execStmt + ".exception", ExceptionUtil.toString(ex));
                throw new HandymanException("Process failed", ex);
            }
        }

    }

    private void performWriteCsv(final ResultSet resultSet, final String location) {

        var file = new File(location);
        if (file.isDirectory()) {
            var fileName = location + "output_" + UUID.randomUUID() + ".csv";
            log.info("Filename {} has been built", fileName);
            try (var writer = new CSVWriter(new FileWriter(fileName))) {
                writer.writeAll(resultSet, true);
            } catch (IOException | SQLException ex) {
                throw new HandymanException(ex.toString());
            }
        } else {
            throw new HandymanException("Directory not found");
        }

    }

  @Override
  public boolean executeIf() throws Exception {
    return exportCsv.getCondition();
  }
}
