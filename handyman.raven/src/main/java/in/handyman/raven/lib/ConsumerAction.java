package in.handyman.raven.lib;

import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.Action;
import in.handyman.raven.lambda.process.LambdaEngine;
import in.handyman.raven.lib.model.Consumer;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "Consumer"
)
public class ConsumerAction implements IActionExecution {

    private final Action action;
    private final Logger log;
    private final Consumer consumer;
    private final Marker aMarker;

    public ConsumerAction(final Action action, final Logger log, final Object consumer) {
        this.consumer = (Consumer) consumer;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" Consumer:" + this.consumer.getName());
    }

    @Override
    public void execute() {

        final int popSize = Optional.ofNullable(consumer.getPopSize()).map(Integer::valueOf).orElse(1);

        while (true) {

            final List<String> collect = consumer.getNodes().stream().limit(popSize).collect(Collectors.toList());


            collect.forEach(node -> {

                final Map<String, String> context = new HashMap<>(action.getContext());
                context.put(consumer.getPop(), node);

                Optional.ofNullable(consumer.getActions()).filter(x -> !x.isEmpty())
                        .ifPresent(actionContexts -> {

                            var vAction = LambdaEngine.getAction(consumer.getName(), action);
                            vAction.setContext(context);

                            actionContexts.stream()
                                    .map(actionContext -> new ActionCallable(actionContext, vAction, null))
                                    .forEach(ActionCallable::run);

                        });


            });

            final boolean contains = collect.contains(consumer.getPoison());
            if (contains) {
                break;
            }

        }

    }

    @Override
    public boolean executeIf()  {
        return consumer.getCondition();
    }
}
