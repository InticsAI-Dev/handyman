package in.handyman.raven.lib;

import in.handyman.raven.action.ActionExecution;
import in.handyman.raven.action.IActionExecution;
import in.handyman.raven.lib.model.SpawnProcess;
import in.handyman.raven.process.Context;
import in.handyman.raven.process.Process;
import in.handyman.raven.process.ProcessEngine;
import lombok.extern.log4j.Log4j2;
import org.apache.logging.log4j.MarkerManager;

import java.util.concurrent.Executors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "SpawnProcess"
)
@Log4j2
public class SpawnProcessAction implements IActionExecution {
    private final Context context;

    private final SpawnProcess spawnProcess;

    private final MarkerManager.Log4jMarker aMarker;

    public SpawnProcessAction(final Context context, final Object spawnProcess) {
        this.spawnProcess = (SpawnProcess) spawnProcess;
        this.context = context;
        this.aMarker = new MarkerManager.Log4jMarker("SpawnProcess");
        this.context.getDetailMap().putPOJO("context", spawnProcess);
    }

    @Override
    public void execute() throws Exception {
        log.info(aMarker, " id: {}, name: {}", context.getLambdaId(), spawnProcess.getName());
        var executor = Executors.newWorkStealingPool();
        final Process process = ProcessEngine.newInstanceProcess(spawnProcess.getSource(),
                spawnProcess.getTarget(), context.getProcessId(), context.getContext());
        var processWorker = new LambdaCallable(process, null);
        executor.submit(processWorker);
    }

    @Override
    public boolean executeIf() throws Exception {
        return spawnProcess.getCondition();
    }
}
