package in.handyman.raven.lib;

import com.zaxxer.hikari.HikariDataSource;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.Action;
import in.handyman.raven.lambda.process.HRequestResolver;
import in.handyman.raven.lambda.process.LContext;
import in.handyman.raven.lambda.process.LambdaEngine;
import in.handyman.raven.lib.model.CallProcess;
import in.handyman.raven.util.CommonQueryUtil;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.Map;

/**
 * Auto Generated By Raven
 */
@ActionExecution(actionName = "CallProcess")
public class CallProcessAction implements IActionExecution {

    private final Action action;
    private final Logger log;
    private final CallProcess callProcess;

    private final Marker aMarker;

    public CallProcessAction(final Action action, final Logger log, final Object callProcess) {
        this.callProcess = (CallProcess) callProcess;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker("CallProcess");
    }

    @Override
    public void execute() throws Exception {
        final String fileRelativePath = callProcess.getSource();
        var targetProcess = callProcess.getTarget();
        var dbSrc = callProcess.getDatasource();
        var sql = callProcess.getValue().replaceAll("\"", "");
        log.info(aMarker, " id#{}, name#{}, calledProcess#{}, calledFile#{}, db=#{}", action.getActionId(), callProcess.getName(), targetProcess, fileRelativePath, dbSrc);
        final HikariDataSource source = ResourceAccess.rdbmsConn(dbSrc);
        try (var conn = source.getConnection()) {
            try (var stmt = conn.createStatement()) {
                final Map<String, String> context = action.getContext();
                try (var rs = stmt.executeQuery(sql)) {
                    var columnCount = rs.getMetaData().getColumnCount();
                    while (rs.next()) {
                        CommonQueryUtil.addKeyConfig(context, log,
                                rs, columnCount, "");
                        final LContext lContext = LContext.builder()
                                .inheritedContext(context)
                                .lambdaName(action.getLambdaName())
                                .parentActionId(action.getActionId())
                                .parentActionName(action.getActionName())
                                .relativePath(fileRelativePath)
                                .processLoadType(HRequestResolver.LoadType.FILE.name())
                                .pipelineName(callProcess.getName())
                                .parentPipelineId(action.getPipelineId())
                                .parentPipelineName(action.getPipelineName())
                                .build();
                        LambdaEngine.start(lContext);
                    }
                }
            }
        }
        log.info(aMarker, "Completed name#{}, calledProcess#{}, calledFile#{}, db=#{}", callProcess.getName(), targetProcess, fileRelativePath, dbSrc);
    }


    @Override
    public boolean executeIf() {
        return callProcess.getCondition();
    }
}
