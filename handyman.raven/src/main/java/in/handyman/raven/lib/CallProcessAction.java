package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.node.ObjectNode;
import com.zaxxer.hikari.HikariDataSource;
import in.handyman.raven.action.ActionExecution;
import in.handyman.raven.action.IActionExecution;
import in.handyman.raven.connection.ResourceAccess;
import in.handyman.raven.lib.model.CallProcess;
import in.handyman.raven.process.Context;
import in.handyman.raven.process.Process;
import in.handyman.raven.process.ProcessEngine;
import in.handyman.raven.util.CommonQueryUtil;
import lombok.extern.log4j.Log4j2;
import org.apache.logging.log4j.MarkerManager;

import java.util.Map;

/**
 * Auto Generated By Raven
 */
@ActionExecution(actionName = "CallProcess")
@Log4j2
public class CallProcessAction implements IActionExecution {

    private final Context context;
    private final CallProcess callProcess;
    private final MarkerManager.Log4jMarker aMarker;

    public CallProcessAction(final Context context, final Object callProcess) {
        this.callProcess = (CallProcess) callProcess;
        this.context = context;
        this.aMarker = new MarkerManager.Log4jMarker("CallProcess");
        this.context.getDetailMap().putPOJO("context", callProcess);
    }

    @Override
    public void execute() throws Exception {
        final String fileRelativePath = callProcess.getSource();
        var targetProcess = callProcess.getTarget();
        var dbSrc = callProcess.getDatasource();
        var sql = callProcess.getValue().replaceAll("\"", "");
        log.info(aMarker, " id#{}, name#{}, calledProcess#{}, calledFile#{}, db=#{}", context.getProcessId(), callProcess.getName(), targetProcess, fileRelativePath, dbSrc);
        final HikariDataSource source = ResourceAccess.rdbmsConn(dbSrc);
        try (var conn = source.getConnection()) {
            try (var stmt = conn.createStatement()) {
                final Map<String, String> configContext = context.getContext();
                final ObjectNode detailMap = context.getDetailMap();
                try (var rs = stmt.executeQuery(sql)) {
                    var columnCount = rs.getMetaData().getColumnCount();
                    while (rs.next()) {
                        CommonQueryUtil.addKeyConfig(configContext, detailMap,
                                rs, columnCount, "");
                        final Process process = ProcessEngine.start(fileRelativePath, targetProcess, context.getProcessId(), configContext);
                        log.info(aMarker, process);
                    }
                }
            }
        }
        log.info(aMarker, "Completed name#{}, calledProcess#{}, calledFile#{}, db=#{}", callProcess.getName(), targetProcess, fileRelativePath, dbSrc);
    }


    @Override
    public boolean executeIf() {
        return callProcess.getCondition();
    }
}
