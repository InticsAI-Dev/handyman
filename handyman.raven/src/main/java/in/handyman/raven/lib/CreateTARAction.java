package in.handyman.raven.lib;

import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.Action;
import in.handyman.raven.lib.model.CreateTAR;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.utils.IOUtils;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.zip.GZIPOutputStream;


/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "CreateTAR"
)
public class CreateTARAction implements IActionExecution {
  private final Action action;

  private final Logger log;

  private final CreateTAR createTAR;

  private final Marker aMarker;

  public CreateTARAction(final Action action, final Logger log, final Object createTAR) {
    this.createTAR = (CreateTAR) createTAR;
    this.action = action;
    this.log = log;
    this.aMarker = MarkerFactory.getMarker("CreateTAR");
  }

  @Override
  public void execute() throws Exception {
    TarArchiveOutputStream tarOs = null;
    try {
      String source = createTAR.getSource();
      if(!Files.exists(Paths.get(source))) {
        //log.info("{} Sorce Folder not found",path);
      }
      String destination = createTAR.getDestination();
      Path path = Paths.get(destination);
      if(!Files.exists(path)) {
        Files.createDirectory(path);
      }
      String extension = createTAR.getExtension();
      File sourceFile = new File(source);
      String fileNameWithOutExt = FileNameUtils.getBaseName(sourceFile.getName());
      File destinationFile = new File(destination.concat("/"+ fileNameWithOutExt));
      FileOutputStream fos = new FileOutputStream(destinationFile.getAbsolutePath().concat("."+extension));
      GZIPOutputStream gos = new GZIPOutputStream(new BufferedOutputStream(fos));
      tarOs = new TarArchiveOutputStream(gos);
      addFilesToTarGZ(source, "", tarOs);
    } catch (IOException e) {
      e.printStackTrace();
    }finally{
      try {
        tarOs.close();
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
  }

  public void addFilesToTarGZ(String filePath, String parent, TarArchiveOutputStream tarArchive) throws IOException {
    File file = new File(filePath);
    String entryName = parent + file.getName();
    tarArchive.putArchiveEntry(new TarArchiveEntry(file, entryName));
    if(file.isFile()){
      FileInputStream fis = new FileInputStream(file);
      BufferedInputStream bis = new BufferedInputStream(fis);
      IOUtils.copy(bis, tarArchive);
      tarArchive.closeArchiveEntry();
      bis.close();
    }else if(file.isDirectory()){
      tarArchive.closeArchiveEntry();
      for(File f : file.listFiles()){
        addFilesToTarGZ(f.getAbsolutePath(), entryName+File.separator, tarArchive);
      }
    }
  }

  @Override
  public boolean executeIf() throws Exception {
    return false;
  }
}
