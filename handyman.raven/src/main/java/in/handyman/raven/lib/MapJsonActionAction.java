package in.handyman.raven.lib;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.Action;
import in.handyman.raven.lib.model.MapJson;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.Map;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "MapJson"
)
public class MapJsonActionAction implements IActionExecution {
    private final Action action;

    private final Logger log;

    private final MapJson mapJson;

    private final Marker aMarker;
    private final ObjectMapper objectMapper = new ObjectMapper();

    public MapJsonActionAction(final Action action, final Logger log, final Object mapJson) {
        this.mapJson = (MapJson) mapJson;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" MapJson:" + this.mapJson.getName());
    }

    @Override
    public void execute() throws Exception {

        final JsonNode value = objectMapper.readTree(this.action.getContext().getOrDefault(mapJson.getValue(), "{}"));
        if (value != null) {
            action.getContext().get(value.toString());
            if (value.isArray()) {
                value.forEach(node -> {
                    try {
                        var stringStringMap = objectMapper.readValue(node.toString(), new TypeReference<Map<String, String>>() {
                        });
                        action.getContext().putAll(stringStringMap);

                    } catch (JsonProcessingException e) {
                        throw new HandymanException("", e);
                    }
                });
            } else {
                final Map<String, String> stringStringMap = objectMapper.readValue(value.toString(), new TypeReference<Map<String, String>>() {
                });
                action.getContext().putAll(stringStringMap);
            }
        }

    }

    @Override
    public boolean executeIf() throws Exception {
        return mapJson.getCondition();
    }
}
