/**
 * generated by Xtext 2.16.0
 */
package in.handyman.dsl.impl;

import in.handyman.dsl.DslPackage;
import in.handyman.dsl.EsUpdate;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Es Update</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link in.handyman.dsl.impl.EsUpdateImpl#getSource <em>Source</em>}</li>
 *   <li>{@link in.handyman.dsl.impl.EsUpdateImpl#getTarget <em>Target</em>}</li>
 *   <li>{@link in.handyman.dsl.impl.EsUpdateImpl#getFetchSize <em>Fetch Size</em>}</li>
 *   <li>{@link in.handyman.dsl.impl.EsUpdateImpl#getWriteSize <em>Write Size</em>}</li>
 *   <li>{@link in.handyman.dsl.impl.EsUpdateImpl#getValue <em>Value</em>}</li>
 *   <li>{@link in.handyman.dsl.impl.EsUpdateImpl#getWriteThreadCount <em>Write Thread Count</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EsUpdateImpl extends ActionImpl implements EsUpdate
{
  /**
   * The default value of the '{@link #getSource() <em>Source</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSource()
   * @generated
   * @ordered
   */
  protected static final String SOURCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSource() <em>Source</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSource()
   * @generated
   * @ordered
   */
  protected String source = SOURCE_EDEFAULT;

  /**
   * The default value of the '{@link #getTarget() <em>Target</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected static final String TARGET_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTarget() <em>Target</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected String target = TARGET_EDEFAULT;

  /**
   * The default value of the '{@link #getFetchSize() <em>Fetch Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFetchSize()
   * @generated
   * @ordered
   */
  protected static final String FETCH_SIZE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFetchSize() <em>Fetch Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFetchSize()
   * @generated
   * @ordered
   */
  protected String fetchSize = FETCH_SIZE_EDEFAULT;

  /**
   * The default value of the '{@link #getWriteSize() <em>Write Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWriteSize()
   * @generated
   * @ordered
   */
  protected static final String WRITE_SIZE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getWriteSize() <em>Write Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWriteSize()
   * @generated
   * @ordered
   */
  protected String writeSize = WRITE_SIZE_EDEFAULT;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected EList<String> value;

  /**
   * The default value of the '{@link #getWriteThreadCount() <em>Write Thread Count</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWriteThreadCount()
   * @generated
   * @ordered
   */
  protected static final String WRITE_THREAD_COUNT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getWriteThreadCount() <em>Write Thread Count</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWriteThreadCount()
   * @generated
   * @ordered
   */
  protected String writeThreadCount = WRITE_THREAD_COUNT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EsUpdateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.Literals.ES_UPDATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSource()
  {
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSource(String newSource)
  {
    String oldSource = source;
    source = newSource;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.ES_UPDATE__SOURCE, oldSource, source));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTarget()
  {
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTarget(String newTarget)
  {
    String oldTarget = target;
    target = newTarget;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.ES_UPDATE__TARGET, oldTarget, target));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getFetchSize()
  {
    return fetchSize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFetchSize(String newFetchSize)
  {
    String oldFetchSize = fetchSize;
    fetchSize = newFetchSize;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.ES_UPDATE__FETCH_SIZE, oldFetchSize, fetchSize));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getWriteSize()
  {
    return writeSize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setWriteSize(String newWriteSize)
  {
    String oldWriteSize = writeSize;
    writeSize = newWriteSize;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.ES_UPDATE__WRITE_SIZE, oldWriteSize, writeSize));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getValue()
  {
    if (value == null)
    {
      value = new EDataTypeEList<String>(String.class, this, DslPackage.ES_UPDATE__VALUE);
    }
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getWriteThreadCount()
  {
    return writeThreadCount;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setWriteThreadCount(String newWriteThreadCount)
  {
    String oldWriteThreadCount = writeThreadCount;
    writeThreadCount = newWriteThreadCount;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.ES_UPDATE__WRITE_THREAD_COUNT, oldWriteThreadCount, writeThreadCount));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.ES_UPDATE__SOURCE:
        return getSource();
      case DslPackage.ES_UPDATE__TARGET:
        return getTarget();
      case DslPackage.ES_UPDATE__FETCH_SIZE:
        return getFetchSize();
      case DslPackage.ES_UPDATE__WRITE_SIZE:
        return getWriteSize();
      case DslPackage.ES_UPDATE__VALUE:
        return getValue();
      case DslPackage.ES_UPDATE__WRITE_THREAD_COUNT:
        return getWriteThreadCount();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.ES_UPDATE__SOURCE:
        setSource((String)newValue);
        return;
      case DslPackage.ES_UPDATE__TARGET:
        setTarget((String)newValue);
        return;
      case DslPackage.ES_UPDATE__FETCH_SIZE:
        setFetchSize((String)newValue);
        return;
      case DslPackage.ES_UPDATE__WRITE_SIZE:
        setWriteSize((String)newValue);
        return;
      case DslPackage.ES_UPDATE__VALUE:
        getValue().clear();
        getValue().addAll((Collection<? extends String>)newValue);
        return;
      case DslPackage.ES_UPDATE__WRITE_THREAD_COUNT:
        setWriteThreadCount((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.ES_UPDATE__SOURCE:
        setSource(SOURCE_EDEFAULT);
        return;
      case DslPackage.ES_UPDATE__TARGET:
        setTarget(TARGET_EDEFAULT);
        return;
      case DslPackage.ES_UPDATE__FETCH_SIZE:
        setFetchSize(FETCH_SIZE_EDEFAULT);
        return;
      case DslPackage.ES_UPDATE__WRITE_SIZE:
        setWriteSize(WRITE_SIZE_EDEFAULT);
        return;
      case DslPackage.ES_UPDATE__VALUE:
        getValue().clear();
        return;
      case DslPackage.ES_UPDATE__WRITE_THREAD_COUNT:
        setWriteThreadCount(WRITE_THREAD_COUNT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.ES_UPDATE__SOURCE:
        return SOURCE_EDEFAULT == null ? source != null : !SOURCE_EDEFAULT.equals(source);
      case DslPackage.ES_UPDATE__TARGET:
        return TARGET_EDEFAULT == null ? target != null : !TARGET_EDEFAULT.equals(target);
      case DslPackage.ES_UPDATE__FETCH_SIZE:
        return FETCH_SIZE_EDEFAULT == null ? fetchSize != null : !FETCH_SIZE_EDEFAULT.equals(fetchSize);
      case DslPackage.ES_UPDATE__WRITE_SIZE:
        return WRITE_SIZE_EDEFAULT == null ? writeSize != null : !WRITE_SIZE_EDEFAULT.equals(writeSize);
      case DslPackage.ES_UPDATE__VALUE:
        return value != null && !value.isEmpty();
      case DslPackage.ES_UPDATE__WRITE_THREAD_COUNT:
        return WRITE_THREAD_COUNT_EDEFAULT == null ? writeThreadCount != null : !WRITE_THREAD_COUNT_EDEFAULT.equals(writeThreadCount);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (source: ");
    result.append(source);
    result.append(", target: ");
    result.append(target);
    result.append(", fetchSize: ");
    result.append(fetchSize);
    result.append(", writeSize: ");
    result.append(writeSize);
    result.append(", value: ");
    result.append(value);
    result.append(", writeThreadCount: ");
    result.append(writeThreadCount);
    result.append(')');
    return result.toString();
  }

} //EsUpdateImpl
